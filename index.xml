<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>董二千</title>
    <link>https://LinkRober.github.io/bookshelf/index.xml</link>
    <description>Recent content on 董二千</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://LinkRober.github.io/bookshelf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CombineLatest、Zip和Merge的区别</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/combinelatestzip%E5%92%8Cmerge%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/combinelatestzip%E5%92%8Cmerge%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h4 id=&#34;信号触发方式&#34;&gt;信号触发方式&lt;/h4&gt;

&lt;h5 id=&#34;merge&#34;&gt;merge&lt;/h5&gt;

&lt;p&gt;只要&lt;code&gt;merge&lt;/code&gt;之后生成的信号被订阅就会&lt;strong&gt;自动&lt;/strong&gt;触发所有压缩信号的订阅回调，如果靠前的信号出现了&lt;code&gt;error&lt;/code&gt;后面的信号不再发送。&lt;/p&gt;

&lt;p&gt;核心方法：&lt;code&gt;- (instancetype)flatten&lt;/code&gt;&lt;/br&gt;
值：多次收到，分开的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1
 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *s1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
  [subscriber sendNext:@&amp;quot;1&amp;quot;];
    return nil;
}];

RACSignal *s2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;2&amp;quot;];
    return nil;
}];

[[RACSignal merge:@[s1,s2]] subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;combinelatest&#34;&gt;combineLatest&lt;/h5&gt;

&lt;p&gt;必须等到&lt;strong&gt;所有&lt;/strong&gt;的信号都成功发送才能触发&lt;code&gt;combineLatest&lt;/code&gt;生成的新信号的订阅回调。如果中间出现有信号error或者complete，新信号将收不到回调。&lt;/p&gt;

&lt;p&gt;核心方法：
&lt;code&gt;+ (instancetype)join:(id&amp;lt;NSFastEnumeration&amp;gt;)streams block:(RACStream * (^)(id, id))block&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;- (RACSignal *)combineLatestWith:(RACSignal *)signal&lt;/code&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;值：一次收到，通过&lt;code&gt;RACTuple&lt;/code&gt;聚合的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;RACTuple: 0x60000318c780&amp;gt; (
    1,
    2
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RACSubject *s1 = [RACSubject subject];
[s1 subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];

RACSubject *s2 = [RACSubject subject];
[s2 subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];

[[RACSignal combineLatest:@[s1,s2]] subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];

[s1 sendNext:@&amp;quot;1&amp;quot;];
[s2 sendNext:@&amp;quot;2&amp;quot;];

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;zip&#34;&gt;zip&lt;/h5&gt;

&lt;p&gt;必须等到&lt;strong&gt;所有&lt;/strong&gt;的信号都成功发送才能触发&lt;code&gt;zip&lt;/code&gt;生成的新信号的订阅回调(和&lt;code&gt;combineLatest&lt;/code&gt;类似)。如果中间出现有信号error或者complete，新信号将收不到回，和&lt;code&gt;combineLatest&lt;/code&gt;不同的是，同一时间返回多个信号的值只取第一个，而&lt;code&gt;combineLatest&lt;/code&gt;是取最新的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//zip
....
void (^sendNext)(void) = ^{
			@synchronized (selfValues) {
				if (selfValues.count == 0) return;
				if (otherValues.count == 0) return;
				//去数组第一个值
				RACTuple *tuple = [RACTuple tupleWithObjects:selfValues[0], otherValues[0], nil];
				[selfValues removeObjectAtIndex:0];
				[otherValues removeObjectAtIndex:0];

				[subscriber sendNext:tuple];
				sendCompletedIfNecessary();
			}
		};
....
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//combineLatestWith
...
void (^sendNext)(void) = ^{
			@synchronized (disposable) {
				if (lastSelfValue == nil || lastOtherValue == nil) return;
				[subscriber sendNext:[RACTuple tupleWithObjects:lastSelfValue, lastOtherValue, nil]];
			}
		};
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心方法：
1. &lt;code&gt;+ (instancetype)join:(id&amp;lt;NSFastEnumeration&amp;gt;)streams block:(RACStream * (^)(id, id))block&lt;/code&gt;
2. &lt;code&gt;- (RACSignal *)zipWith:(RACSignal *)signal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;值：一次收到，通过&lt;code&gt;RACTuple&lt;/code&gt;聚合的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;RACTuple: 0x600002668e20&amp;gt; (
    1,
    2,
    3
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *s1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
   [subscriber sendNext:@&amp;quot;1&amp;quot;];
    return nil;
}];
RACSignal *s2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;2&amp;quot;];
    return nil;
}];
RACSignal *s3 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;3&amp;quot;];
    return nil;
}];

RACSignal *zs = [RACSignal zip:@[s1,s2,s3]];

[zs subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Connect、AutoConnect、RACReplaySubject、Replay</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/connectautoconnectracreplaysubjectreplay/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/connectautoconnectracreplaysubjectreplay/</guid>
      <description>&lt;h4 id=&#34;connect&#34;&gt;Connect&lt;/h4&gt;

&lt;p&gt;将冷信号包装成热信号，初始化冷信号，调用&lt;code&gt;publish&lt;/code&gt;方法会自动生成一个&lt;code&gt;RACMulticastConnection&lt;/code&gt;，该对象持有了原始信号和一个热信号。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACMulticastConnection *)publish {
	RACSubject *subject = [[RACSubject subject] setNameWithFormat:@&amp;quot;[%@] -publish&amp;quot;, self.name];
	RACMulticastConnection *connection = [self multicast:subject];
	return connection;
}
- (RACMulticastConnection *)multicast:(RACSubject *)subject {
	[subject setNameWithFormat:@&amp;quot;[%@] -multicast: %@&amp;quot;, self.name, subject.name];
	RACMulticastConnection *connection = [[RACMulticastConnection alloc] initWithSourceSignal:self subject:subject];
	return connection;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用&lt;code&gt;connect&lt;/code&gt;方法来触发订阅，注意调用一次触发一次。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACDisposable *)connect {
	BOOL shouldConnect = OSAtomicCompareAndSwap32Barrier(0, 1, &amp;amp;_hasConnected);

	if (shouldConnect) {
		self.serialDisposable.disposable = [self.sourceSignal subscribe:_signal];
	}

	return self.serialDisposable;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB322c067dfd25b07390b5016979f95684?method=download&amp;amp;shareKey=18be9a0156c074ce3ed310a30cf3d782&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;autoconnect&#34;&gt;Autoconnect&lt;/h4&gt;

&lt;p&gt;在&lt;code&gt;publish&lt;/code&gt;之后，&lt;code&gt;RACMulticastConnection&lt;/code&gt;调用&lt;code&gt;autoconnect&lt;/code&gt;，生成一个信号，只有当生成的信号订阅之后才会触发其他订阅者开始接受订阅消息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACSignal *)autoconnect {
	__block volatile int32_t subscriberCount = 0;

	return [[RACSignal
		createSignal:^(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
			OSAtomicIncrement32Barrier(&amp;amp;subscriberCount);

			RACDisposable *subscriptionDisposable = [self.signal subscribe:subscriber];
			RACDisposable *connectionDisposable = [self connect];

			return [RACDisposable disposableWithBlock:^{
				[subscriptionDisposable dispose];

				if (OSAtomicDecrement32Barrier(&amp;amp;subscriberCount) == 0) {
					[connectionDisposable dispose];
				}
			}];
		}]
		setNameWithFormat:@&amp;quot;[%@] -autoconnect&amp;quot;, self.signal.name];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBfd22a762ef7800a5d21b2fd823b26905?method=download&amp;amp;shareKey=0d72e57669a7945987449fb7dd3179f3&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;racmulticastconnection-racreplaysubject&#34;&gt;RACMulticastConnection &amp;amp; RACReplaySubject&lt;/h4&gt;

&lt;p&gt;上面在&lt;code&gt;connect&lt;/code&gt;之后的订阅者都不到订阅值，使用&lt;code&gt;RACReplaySubject&lt;/code&gt;可以让后面的订阅者也能收到订阅值。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *sourceSignal = [RACSignal createSignal:^RACDisposable * _Nullable(id&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) {
    [subscriber sendNext:@{@&amp;quot;id&amp;quot;:@&amp;quot;1&amp;quot;}];
    return nil;
}];

RACMulticastConnection *connection = [sourceSignal multicast:[RACReplaySubject subject]];

[connection.signal subscribeNext:^(id  _Nullable x) {
    NSLog(@&amp;quot;product: %@&amp;quot;, x);
}];

[connection connect];

[connection.signal subscribeNext:^(id  _Nullable x) {
    NSNumber *productId = [x objectForKey:@&amp;quot;id&amp;quot;];
    NSLog(@&amp;quot;productId: %@&amp;quot;, productId);
}];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBeaf769304dcdeb50aedaf81ef877ce54?method=download&amp;amp;shareKey=825769b6f66cab9528c1aa2337763104&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;replay&#34;&gt;Replay&lt;/h4&gt;

&lt;p&gt;快速生成一个基于&lt;code&gt;RACReplaySubject&lt;/code&gt;创建的热信号。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACSignal *)replay {
	RACReplaySubject *subject = [[RACReplaySubject subject] setNameWithFormat:@&amp;quot;[%@] -replay&amp;quot;, self.name];

	RACMulticastConnection *connection = [self multicast:subject];
	[connection connect];

	return connection.signal;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *sourceSignal = [[RACSignal createSignal:^RACDisposable * _Nullable(id&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) {
        [subscriber sendNext:@{@&amp;quot;id&amp;quot;:@&amp;quot;1&amp;quot;}];
        return nil;
    }] replay];

    [sourceSignal subscribeNext:^(id  _Nullable x) {
        NSLog(@&amp;quot;product: %@&amp;quot;, x);
    }];

    [sourceSignal subscribeNext:^(id  _Nullable x) {
        NSNumber *productId = [x objectForKey:@&amp;quot;id&amp;quot;];
        NSLog(@&amp;quot;productId: %@&amp;quot;, productId);
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBdddd77c6ae072d234b09b7b5e6e3e17c?method=download&amp;amp;shareKey=35c80261e0e41092892c011b92cbb488&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RACSignal</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/racsignal/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/racsignal/</guid>
      <description>&lt;h4 id=&#34;创建信号&#34;&gt;创建信号&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;
RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:@&amp;quot;1&amp;quot;];
        return nil;
    }];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//RACSignal.m
+ (RACSignal *)createSignal:(RACDisposable * (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))didSubscribe {
	return [RACDynamicSignal createSignal:didSubscribe];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;通过子类创建信号&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//RACDynamicSignal.m
+ (RACSignal *)createSignal:(RACDisposable * (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))didSubscribe {
	RACDynamicSignal *signal = [[self alloc] init];
	signal-&amp;gt;_didSubscribe = [didSubscribe copy];
	return [signal setNameWithFormat:@&amp;quot;+createSignal:&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个RACDynamicSignal，将回调&lt;code&gt;didSubscribe&lt;/code&gt;保存在&lt;code&gt;_didSubscribe&lt;/code&gt;中。&lt;/p&gt;

&lt;h4 id=&#34;订阅信号&#34;&gt;订阅信号&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;[signal subscribeNext:^(id x) {
        
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock {
	NSCParameterAssert(nextBlock != NULL);
	
	RACSubscriber *o = [RACSubscriber subscriberWithNext:nextBlock error:NULL completed:NULL];
	return [self subscribe:o];
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个订阅者&lt;code&gt;RACSubscriber&lt;/code&gt;，将回调&lt;code&gt;nextBlock&lt;/code&gt;作为订阅者的初始入参，最后订阅RACSubscriber。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACDisposable *)subscribe:(id&amp;lt;RACSubscriber&amp;gt;)subscriber {
	NSCParameterAssert(subscriber != nil);
	//创建销毁对象，负责销毁信号
	RACCompoundDisposable *disposable = [RACCompoundDisposable compoundDisposable];
	//将RACSubscriber类型的订阅者转换成RACPassthroughSubscriber，为什么呢
	subscriber = [[RACPassthroughSubscriber alloc] initWithSubscriber:subscriber signal:self disposable:disposable];
	
	//创建自旋锁，防止资源竞争，懒加载订阅者集合(_subscribers),
	OSSpinLockLock(&amp;amp;_subscribersLock);
	if (_subscribers == nil) {
		_subscribers = [NSMutableArray arrayWithObject:subscriber];
	} else {
		[_subscribers addObject:subscriber];
	}
	OSSpinLockUnlock(&amp;amp;_subscribersLock);
	
	@weakify(self);
	//创建销毁对象（和上面的有什么不同？？？，看下面），当信号被销毁，从订阅者集合里面移除subscriber
	RACDisposable *defaultDisposable = [RACDisposable disposableWithBlock:^{
		@strongify(self);
		if (self == nil) return;

		BOOL stillHasSubscribers = YES;

		OSSpinLockLock(&amp;amp;_subscribersLock);
		{
			// Since newer subscribers are generally shorter-lived, search
			// starting from the end of the list.
			NSUInteger index = [_subscribers indexOfObjectWithOptions:NSEnumerationReverse passingTest:^ BOOL (id&amp;lt;RACSubscriber&amp;gt; obj, NSUInteger index, BOOL *stop) {
				return obj == subscriber;
			}];

			if (index != NSNotFound) {
				[_subscribers removeObjectAtIndex:index];
				stillHasSubscribers = _subscribers.count &amp;gt; 0;
			}
		}
		OSSpinLockUnlock(&amp;amp;_subscribersLock);
		
		if (!stillHasSubscribers) {
			[self invalidateGlobalRefIfNoNewSubscribersShowUp];
		}
	}];
	
	//将创建的销毁对象添加到一个管理类中
	[disposable addDisposable:defaultDisposable];

    //通过`didSubscribe`拿到订阅者对应的innerDisposable，添加到disposable中，
    //最后将schedulingDisposabl也添加到disposable中
	if (self.didSubscribe != NULL) {
		RACDisposable *schedulingDisposable = [RACScheduler.subscriptionScheduler schedule:^{
			RACDisposable *innerDisposable = self.didSubscribe(subscriber);
			[disposable addDisposable:innerDisposable];
		}];

		[disposable addDisposable:schedulingDisposable];
	}
	
	return disposable;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;信号被订阅之后的销毁流程。首先创建了一个销毁者管理类&lt;code&gt;disposable&lt;/code&gt;，以subscriber为入参生成一个新的subscriber（RACPassthroughSubscriber），老的订阅者和销毁者管理类都在这里面管理。
然后将&lt;code&gt;defaultDisposable&lt;/code&gt;、&lt;code&gt;innerDisposable&lt;/code&gt;、 &lt;code&gt;schedulingDisposable&lt;/code&gt;都放到管理类中进行管理&lt;/p&gt;

&lt;h4 id=&#34;问题&#34;&gt;问题&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;如何做到一订阅，就开始执行&lt;code&gt;[subscriber sendNext:xxx];&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本质是调用了block。在创建的时候，block会被属性引用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;signal-&amp;gt;_didSubscribe = [didSubscribe copy];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在订阅方法的最后，调用代码块&lt;code&gt;didSubscribe&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	if (self.didSubscribe != NULL) {
		RACDisposable *schedulingDisposable = [RACScheduler.subscriptionScheduler schedule:^{
			RACDisposable *innerDisposable = self.didSubscribe(subscriber);
			[disposable addDisposable:innerDisposable];
		}];

		[disposable addDisposable:schedulingDisposable];
	}

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>SwitchToLatest</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/switchtolatest/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/switchtolatest/</guid>
      <description>&lt;p&gt;&lt;code&gt;- (RACSignal *)switchToLatest&lt;/code&gt;和&lt;code&gt;- (RACSignal *)flatten&lt;/code&gt;的功能类似，都可以将信号中的信号的值取出来。不同的是，前者如果订阅者处理多个信号，只有最后一个信号的值能收到，之前的信号会被销毁。而后者则都能收到所有值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *signal1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
   
   
    [subscriber sendNext:@&amp;quot;nancy&amp;quot;];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        
         [subscriber sendNext:@&amp;quot;botwen&amp;quot;];
    });
    return nil;
}];
    
RACSignal *signal2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;jiang&amp;quot;];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
         [subscriber sendNext:@&amp;quot;longjian&amp;quot;];
    });
    return nil;
}];
    
RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(id&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) {
    [subscriber sendNext: signal1];
    [subscriber sendNext: signal2];
    [subscriber sendCompleted];
    
    return nil;
}];

RACSignal *newSignal = [signal switchToLatest];
[newSignal subscribeNext:^(id  _Nullable x) {
    NSLog(@&amp;quot;-=-=======-=%@&amp;quot;, x);
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-=-=======-=nancy
-=-=======-=jiang
-=-=======-=longjian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;botwen&lt;/code&gt;没有输出，因为&lt;code&gt;signal1&lt;/code&gt;已经被销毁。
这里有一个难点，&lt;strong&gt;为什么&lt;code&gt;nancy&lt;/code&gt;输出了&lt;/strong&gt;。要知道原因，我们必须要清楚的理解整个信号的创建和销毁时机。&lt;/p&gt;

&lt;p&gt;原信号O通过&lt;code&gt;- (RACSignal *)switchToLatest&lt;/code&gt;方法生成了一个新信号A，当A被订阅时，O信号通过&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RACMulticastConnection *connection = [self publish];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成了一个热信号，然后调用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (__kindof RACStream *)flattenMap:(__kindof RACStream * (^)(id value))block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来实现信号中信号的压平，这里和&lt;code&gt;- (__kindof RACStream *)flatten&lt;/code&gt;一样，最大的不同是&lt;code&gt;block&lt;/code&gt;的实现，在&lt;code&gt;- (RACSignal *)switchToLatest&lt;/code&gt;中，&lt;code&gt;block&lt;/code&gt;里面调用了&lt;code&gt;takeUntil&lt;/code&gt;方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RACSignal *s = [connection.signal
flattenMap:^(RACSignal *x) {
    NSCAssert(x == nil || [x isKindOfClass:RACSignal.class], @&amp;quot;-switchToLatest requires that the source signal (%@) send signals. Instead we got: %@&amp;quot;, self, x);
    return [x takeUntil:[connection.signal concat:[RACSignal never]]];
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当信号&lt;code&gt;[connection.signal concat:[RACSignal never]]&lt;/code&gt;被&lt;strong&gt;订阅&lt;/strong&gt;的时候，通过&lt;code&gt;takeUntil&lt;/code&gt;生成的信号B会被销毁。这也是上面销毁&lt;code&gt;signal1&lt;/code&gt;的地方。&lt;/p&gt;

&lt;p&gt;那么在什么时机触发销毁动作呢？这里涉及到热信号。每个热信号都有一个订阅者的数组，当热信号受到订阅者发送的消息时，会遍历这个数组，一一调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)enumerateSubscribersUsingBlock:(void (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))block {
	NSArray *subscribers;
	@synchronized (self.subscribers) {
		subscribers = [self.subscribers copy];
	}

	for (id&amp;lt;RACSubscriber&amp;gt; subscriber in subscribers) {
		block(subscriber);
	}
}

- (void)sendNext:(id)value {
	[self enumerateSubscribersUsingBlock:^(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
		[subscriber sendNext:value];
	}];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例代码里热信号的订阅者数组里面最多的时候一个有3个订阅者，下面列出添加订阅者数组的地方：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//[self subscribeNext:^(id x)...调用1次
RACDisposable *bindingDisposable = [self subscribeNext:^(id x) {
    // Manually check disposal to handle synchronous errors.
    if (compoundDisposable.disposed) return;

    BOOL stop = NO;
    id signal = bindingBlock(x, &amp;amp;stop);

    @autoreleasepool {
        if (signal != nil) addSignal(signal);
        if (signal == nil || stop) {
            [selfDisposable dispose];
            completeSignal(selfDisposable);
        }
    }
} error:^(NSError *error) {
    [compoundDisposable dispose];
    [subscriber sendError:error];
} completed:^{
    @autoreleasepool {
        completeSignal(selfDisposable);
    }
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//这里的[self subscribeNext:^(id x)...调用了2次，对应两次订阅者发送信号
- (RACSignal *)concat:(RACSignal *)signal {
	return [[RACSignal createSignal:^(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
		RACCompoundDisposable *compoundDisposable = [[RACCompoundDisposable alloc] init];

		RACDisposable *sourceDisposable = [self subscribeNext:^(id x) {
			[subscriber sendNext:x];
		} error:^(NSError *error) {
			[subscriber sendError:error];
		} completed:^{
			RACDisposable *concattedDisposable = [signal subscribe:subscriber];
			[compoundDisposable addDisposable:concattedDisposable];
		}];

		[compoundDisposable addDisposable:sourceDisposable];
		return compoundDisposable;
	}] setNameWithFormat:@&amp;quot;[%@] -concat: %@&amp;quot;, self.name, signal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次为了压平信号调&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subscribers = [subscriber1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二次在&lt;code&gt;[subscriber sendNext: signal1];&lt;/code&gt;后调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subscribers = [subscriber1,subscriber2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三次在&lt;code&gt;[subscriber sendNext: signal2];&lt;/code&gt;后调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subscribers = [subscriber1,subscriber2,subscriber3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在第三次调用&lt;code&gt;sendNext&lt;/code&gt;的时候会遍历订阅者数组（这时候数组里面还只有两个订阅者）发送信号从而走到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
RACCompoundDisposable *disposable = [RACCompoundDisposable compoundDisposable];
		void (^triggerCompletion)(void) = ^{
			[disposable dispose];
			[subscriber sendCompleted];
		};

		RACDisposable *triggerDisposable = [signalTrigger subscribeNext:^(id _) {
		    //走到这里
			triggerCompletion();
		} completed:^{
			triggerCompletion();
		}];
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将&lt;code&gt;signal1&lt;/code&gt;的订阅者销毁，以此类推。这也是为什么第一次两个信号的值都能收到的原因。&lt;/p&gt;

&lt;p&gt;到这里就是&lt;code&gt;SwitchToLatest&lt;/code&gt;的功能实现。&lt;/p&gt;

&lt;p&gt;难点；&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;理解&lt;code&gt;- (RACSignal *)takeUntil:(RACSignal *)signalTrigger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;冷信号转换成热信号的实现&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>concat、catchTo、never、takeUntil</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/concatcatchtonevertakeuntil/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/concatcatchtonevertakeuntil/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;code&gt;- (RACSignal *)concat:(RACSignal *)signal&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;//源码
- (RACSignal *)concat:(RACSignal *)signal {
	return [[RACSignal createSignal:^(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
		RACSerialDisposable *serialDisposable = [[RACSerialDisposable alloc] init];

		RACDisposable *sourceDisposable = [self subscribeNext:^(id x) {
			[subscriber sendNext:x];
		} error:^(NSError *error) {
			[subscriber sendError:error];
		} completed:^{
			RACDisposable *concattedDisposable = [signal subscribe:subscriber];
			serialDisposable.disposable = concattedDisposable;
		}];

		serialDisposable.disposable = sourceDisposable;
		return serialDisposable;
	}] setNameWithFormat:@&amp;quot;[%@] -concat: %@&amp;quot;, self.name, signal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;多个信号顺序输出，只有当前一个信号&lt;code&gt;sendCompleted&lt;/code&gt;后一个信号才会执行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//eg.
RACSignal *s1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;1&amp;quot;];
    [subscriber sendCompleted];
    return nil;
}];

RACSignal *s2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;2&amp;quot;];
    return nil;
}];

[[s1 concat:s2] subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;2020-07-06 17:39:06.542592+0800 C-41[3323:243230] 1 &lt;/br&gt;
2020-07-06 17:39:06.542817+0800 C-41[3323:243230] 2&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;- (RACSignal *)catchTo:(RACSignal *)signal&lt;/code&gt;
```
//源码&lt;/li&gt;
&lt;li&gt;(RACSignal *)catch:(RACSignal * (^)(NSError *error))catchBlock {
	NSCParameterAssert(catchBlock != NULL);&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;	return [[RACSignal createSignal:^(id&lt;RACSubscriber&gt; subscriber) {
		RACSerialDisposable *catchDisposable = [[RACSerialDisposable alloc] init];&lt;/p&gt;

&lt;p&gt;		RACDisposable *subscriptionDisposable = [self subscribeNext:^(id x) {
			[subscriber sendNext:x];
		} error:^(NSError *error) {
			RACSignal *signal = catchBlock(error);
			NSCAssert(signal != nil, @&amp;ldquo;Expected non-nil signal from catch block on %@&amp;rdquo;, self);
			catchDisposable.disposable = [signal subscribe:subscriber];
		} completed:^{
			[subscriber sendCompleted];
		}];&lt;/p&gt;

&lt;p&gt;		return [RACDisposable disposableWithBlock:^{
			[catchDisposable dispose];
			[subscriptionDisposable dispose];
		}];
	}] setNameWithFormat:@&amp;rdquo;[%@] -catch:&amp;ldquo;, self.name];
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;当某个信号发生错误时`senderError`，将替补信号的值作为备选值。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//eg.
RACSignal *s1 = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
    [subscriber sendError:nil];
    return nil;
}];&lt;/p&gt;

&lt;p&gt;RACSignal *s2 = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
    [subscriber sendNext:@&amp;ldquo;替补队员跟上&amp;rdquo;];
    return nil;
}];&lt;/p&gt;

&lt;p&gt;[[s1 catchTo:s2] subscribeNext:^(id x) {
    NSLog(@&amp;ldquo;%@&amp;rdquo;,x);
}];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输出：

2020-07-06 17:48:06.347187+0800 C-41[3418:248921] 替补队员跟上


3. `+ (RACSignal *)never`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//源码
+ (RACSignal *)never {
	return [[self createSignal:^ RACDisposable * (id&lt;RACSubscriber&gt; subscriber) {
		return nil;
	}] setNameWithFormat:@&amp;ldquo;+never&amp;rdquo;];
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;订阅者永远收不到订阅值；没有错误；没有完成。



4. `- (RACSignal *)takeUntil:(RACSignal *)signalTrigger`

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//源码
- (RACSignal *)takeUntil:(RACSignal *)signalTrigger {
	return [[RACSignal createSignal:^(id&lt;RACSubscriber&gt; subscriber) {
		RACCompoundDisposable *disposable = [RACCompoundDisposable compoundDisposable];
		void (^triggerCompletion)(void) = ^{
			[disposable dispose];
			[subscriber sendCompleted];
		};&lt;/p&gt;

&lt;p&gt;		RACDisposable *triggerDisposable = [signalTrigger subscribeNext:^(id _) {
			triggerCompletion();
		} completed:^{
			triggerCompletion();
		}];&lt;/p&gt;

&lt;p&gt;		[disposable addDisposable:triggerDisposable];&lt;/p&gt;

&lt;p&gt;		RACDisposable *selfDisposable = [self subscribeNext:^(id x) {
			[subscriber sendNext:x];
		} error:^(NSError *error) {
			[subscriber sendError:error];
		} completed:^{
			[disposable dispose];
			[subscriber sendCompleted];
		}];&lt;/p&gt;

&lt;p&gt;		[disposable addDisposable:selfDisposable];&lt;/p&gt;

&lt;p&gt;		return disposable;
	}] setNameWithFormat:@&amp;rdquo;[%@] -takeUntil: %@&amp;ldquo;, self.name, signalTrigger];
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;正在进行的信号叫做A信号，遇到信号B被订阅就停止。
首先，通过A信号创建了一个中间信号A1。开始时对A信号进行了了订阅，并将值作为A1信号的输出。当B信号被订阅时，会触发A1信号的`sendCompleted`操作。这样无理A怎么发消息，A1都不会转发。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//eg.
RACSubject *untilSignal = [RACSubject subject];
RACSubject *afterUntilSignal = [RACSubject subject];&lt;/p&gt;

&lt;p&gt;[[afterUntilSignal takeUntil:untilSignal] subscribeNext:^(id x) {
    NSLog(@&amp;ldquo;%@&amp;rdquo;,x);
}];&lt;/p&gt;

&lt;p&gt;[untilSignal subscribeNext:^(id x) {
    NSLog(@&amp;ldquo;%@&amp;rdquo;,x);
}];&lt;/p&gt;

&lt;p&gt;[afterUntilSignal sendNext:@&amp;ldquo;1&amp;rdquo;];
[afterUntilSignal sendNext:@&amp;ldquo;2&amp;rdquo;];
[untilSignal sendNext:@&amp;ldquo;stop&amp;rdquo;];
[afterUntilSignal sendNext:@&amp;ldquo;3&amp;rdquo;];
```
输出&lt;/p&gt;

&lt;p&gt;2020-07-06 17:42:51.878488+0800 C-41[3354:245702] 1&lt;/br&gt;
2020-07-06 17:42:51.878642+0800 C-41[3354:245702] 2&lt;/br&gt;
2020-07-06 17:42:51.878854+0800 C-41[3354:245702] stop&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zip</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/zip/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/zip/</guid>
      <description>&lt;pre&gt;&lt;code&gt;RACSignal *s1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
       [subscriber sendNext:@&amp;quot;1&amp;quot;];
    return nil;
}];
RACSignal *s2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;2&amp;quot;];
    return nil;
}];
RACSignal *s3 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    [subscriber sendNext:@&amp;quot;3&amp;quot;];
    return nil;
}];

RACSignal *zs = [RACSignal zip:@[s1,s2,s3]];

[zs subscribeNext:^(id x) {
    NSLog(@&amp;quot;%@&amp;quot;,x);
}];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同&lt;code&gt;zip&lt;/code&gt;压缩的信号只有等所有的自信号都&lt;code&gt;sendNext&lt;/code&gt;之后才会执行订阅回调。&lt;/p&gt;

&lt;p&gt;问题：
1. 如何确保每个信号都发送完，才执行后压缩信号的订阅回调&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;答：
+ (instancetype)join:(id&amp;lt;NSFastEnumeration&amp;gt;)streams block:(RACStream * (^)(id, id))block {
    RACStream *current = nil;
	// Creates streams of successively larger tuples by combining the input
	// streams one-by-one.
	for (RACStream *stream in streams) {
		// For the first stream, just wrap its values in a RACTuple. That way,
		// if only one stream is given, the result is still a stream of tuples.
		if (current == nil) {
			current = [stream map:^(id x) {
				return RACTuplePack(x);
			}];

			continue;
		}

		current = block(current, stream);
	}
	    ....
	    ....
	    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次&lt;code&gt;map&lt;/code&gt;操作信号1会生成一个新信号new1，new1和信号2经过&lt;code&gt;block(current,stream)&lt;/code&gt;又生成一个新信号new2，以此类推。
这两种操作都会对原始信号进行订阅，如果接受不到请求就不会继续下去。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;信号是如何被压平的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在发生zs的订阅之后，通过&lt;code&gt;RACTuplePack(x)&lt;/code&gt;，生成一个元组，然后不断循环，形成元组套值(元组+值)的形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;RACTuple: 0x60000236c720&amp;gt; (
    &amp;lt;RACTuple: 0x600002375d00&amp;gt; (1),
    2
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后通过递归算法将值从元组套元组的组合里一一提取出来，这样信号就压平了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSMutableArray *values = [[NSMutableArray alloc] init];
while (xs != nil) {
    [values insertObject:xs.last ?: RACTupleNil.tupleNil atIndex:0];
	xs = (xs.count &amp;gt; 1 ? xs.first : nil);
}
return [RACTuple tupleWithObjectsFromArray:values];
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>信号中的信号-flatten</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/%E4%BF%A1%E5%8F%B7%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7-flatten/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/%E4%BF%A1%E5%8F%B7%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7-flatten/</guid>
      <description>&lt;pre&gt;&lt;code&gt;    RACSignal *targetSignal = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:@&amp;quot;1&amp;quot;];
        return nil;
    }];
    
    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
    //发送一个信号
        [subscriber sendNext:targetSignal];
        return nil;
    }];
    
    RACSignal *flattenSignal = [signal flatten];
    [flattenSignal subscribeNext:^(id x) {
        NSLog(@&amp;quot;%@&amp;quot;,x);//1
    }];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[signal flatten]&lt;/code&gt;做了什么，可以看出最终返回的是一个信号，深入方法里面，进行了如下的方法调用&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;- (instancetype)flatten&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- (instancetype)flattenMap:(RACStream * (^)(id value))block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- (RACSignal *)bind:(RACStreamBindBlock (^)(void))block&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最终：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return [[RACSignal createSignal:^(id&amp;lt;RACSubscriber&amp;gt; subscriber) {....}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个方法里面，首先对自己就行了订阅，于是执行了&lt;code&gt;[subscriber sendNext:targetSignal];&lt;/code&gt;然后两层回调，&lt;code&gt;bindingBlock(x,&amp;amp;stop)&lt;/code&gt;和&lt;code&gt;block(value)&lt;/code&gt;。返回信号&lt;code&gt;targetSignal&lt;/code&gt;。将信号作为&lt;code&gt;void (^addSignal)(RACSignal *) = ^(RACSignal *signal){}&lt;/code&gt;的入参，其实是在这里面执行&lt;code&gt;targetSignal&lt;/code&gt;订阅，得到了值&lt;strong&gt;1&lt;/strong&gt;，最后通过原来的&lt;code&gt;[subscriber sendNext:x];&lt;/code&gt;将值返回。&lt;/p&gt;

&lt;p&gt;这时候你可能想，这里只嵌套了一层信号，如果嵌套两层怎么处理。你可以类比成递归，将&lt;code&gt;RACSignal *flattenSignal = [signal flatten]&lt;/code&gt;作为递归中的一步，然后对层层信号进行&lt;code&gt;flatten&lt;/code&gt;操作，最后就能得到你想要的结果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//三个信号
    RACSignal *signal1 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:@&amp;quot;1&amp;quot;];
        return nil;
    }];
    
    RACSignal *signal2 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:signal1];
        return nil;
    }];
    
    RACSignal *faltSignal2 = [signal2 flattenMap:^RACStream *(id value) {
        NSLog(@&amp;quot;&amp;quot;);
        return value;
    }];
    
    
    RACSignal *param3 = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:faltSignal2];
        return nil;
    }];
    
    RACSignal *flatSignal3 = [param3 flattenMap:^RACStream *(id value) {
        NSLog(@&amp;quot;&amp;quot;);
        return value;
    }];
    
    [flatSignal3 subscribeNext:^(id x) {
        NSLog(@&amp;quot;&amp;quot;);
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后输出了1&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>冷信号和热信号构建触发流程</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/%E5%86%B7%E4%BF%A1%E5%8F%B7%E5%92%8C%E7%83%AD%E4%BF%A1%E5%8F%B7%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/%E5%86%B7%E4%BF%A1%E5%8F%B7%E5%92%8C%E7%83%AD%E4%BF%A1%E5%8F%B7%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;提到RAC就离不开冷热信号。在实际的开发中如果不理清两者的用法就会出问题。&lt;/p&gt;

&lt;p&gt;冷信号像专车，从你打车（订阅）开始，从出发地点（sendNext）发往你在的地方。它是一对一的，不会错过。&lt;/p&gt;

&lt;p&gt;热信号像公交车，在你等车（订阅）之前可能已经发车了（sendNext）；不仅你可以上，其他人也能上，它是一对多的；错过了这班车（假设只有一班）就没了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//冷信号
    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
        [subscriber sendNext:@1];
        return nil;
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:1.1 schedule:^{
        [signal subscribeNext:^(id x) {
            NSLog(@&amp;quot;cold signal  recveive: %@&amp;quot;, x);
        }];
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;输出: cold signal  recveive: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;//热信号
        RACMulticastConnection *connection =  [[RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) {
            [subscriber sendNext:@1];
            return nil;
        }] publish];
        [connection connect];

        RACSignal *signal = connection.signal;

        [[RACScheduler mainThreadScheduler] afterDelay:1.1 schedule:^{
            [signal subscribeNext:^(id x) {
                NSLog(@&amp;quot;hot signal recveive: %@&amp;quot;, x);
            }];
        }];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;没有输出，公交车比你早到了1.1s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;冷信号转换成热信号经过了两步&lt;code&gt;[RACSignal publish]&lt;/code&gt;和&lt;code&gt;[RACMulticastConnection connect]&lt;/code&gt;，
第一步将信号&lt;code&gt;signal&lt;/code&gt;和&lt;code&gt;subject&lt;/code&gt;进行绑定，返回一个&lt;code&gt;RACMulticastConnection&lt;/code&gt;对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACMulticastConnection *)multicast:(RACSubject *)subject {
	[subject setNameWithFormat:@&amp;quot;[%@] -multicast: %@&amp;quot;, self.name, subject.name];
	RACMulticastConnection *connection = [[RACMulticastConnection alloc] initWithSourceSignal:self subject:subject];
	return connection;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步立即触发信号的订阅，公交车开始发车了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (RACDisposable *)connect {
	BOOL shouldConnect = OSAtomicCompareAndSwap32Barrier(0, 1, &amp;amp;_hasConnected);

	if (shouldConnect) {
		self.serialDisposable.disposable = [self.sourceSignal subscribe:_signal];
	}

	return self.serialDisposable;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么&lt;code&gt;RACMulticastConnection&lt;/code&gt;是做什么的呢?
它将信号（Signal）和订阅（subject）包装，为一个或多个订阅者提供服务（一对多）。当信号存在潜在的副作用或者接受事件不超过1次（eg.&lt;code&gt;[subscriber sendNext:@1]&lt;/code&gt;）的时候使用它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBb47d084e7444069fc09c784160fa22be?method=download&amp;amp;shareKey=44e2ac121991c7bfe127a3f1b3539762&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>方法替换和Aspects</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2%E5%92%8Caspects/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2%E5%92%8Caspects/</guid>
      <description>&lt;h4 id=&#34;带着问题看文章&#34;&gt;带着问题看文章：&lt;/h4&gt;

&lt;p&gt;1.常规姿势的方法替换原理是什么&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;Aspects&lt;/code&gt;的方法替换原理是什么&lt;/p&gt;

&lt;p&gt;3.为什么这样下面的代码这样hook之后，所有的实例的&lt;code&gt;viewWillAppear:&lt;/code&gt;也被hook了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[UIViewController class] aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionBefore usingBlock:^(){
        
} error:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.为什么&lt;code&gt;Aspect&lt;/code&gt;不能hook静态方法&lt;/p&gt;

&lt;p&gt;5.如果用先用Aspects hook了方法A，接着又用MethodSwizzle方法（下文有）对A进行了hook，两个hook都能执行吗？
&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3 id=&#34;正文&#34;&gt;正文&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;runtime&#34;&gt;&lt;code&gt;Runtime&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;void MethodSwizzle(Class c,SEL origSEL,SEL overrideSEL)
   {
       Method origMethod = class_getInstanceMethod(c, origSEL);
       Method overrideMethod= class_getInstanceMethod(c, overrideSEL);
       if(class_addMethod(c, origSEL, method_getImplementation(overrideMethod),method_getTypeEncoding(overrideMethod)))
       {
            //当前类不存在`origSEL`
            class_replaceMethod(c,overrideSEL, method_getImplementation(origMethod), method_getTypeEncoding(origMethod));
       } else  {
            method_exchangeImplementations(origMethod,overrideMethod);
       }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-method-class-getinstancemethod-class-cls-sel-sel&#34;&gt;1. &lt;code&gt;Method class_getInstanceMethod(Class cls, SEL sel)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;从子类往父类递归查找Method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static method_t *
getMethod_nolock(Class cls, SEL sel)
{
    method_t *m = nil;

    runtimeLock.assertLocked();

    // fixme nil cls?
    // fixme nil sel?

    assert(cls-&amp;gt;isRealized());

    while (cls  &amp;amp;&amp;amp;  ((m = getMethodNoSuper_nolock(cls, sel))) == nil) {
        cls = cls-&amp;gt;superclass;
    }

    return m;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-bool-class-addmethod-class-cls-sel-name-imp-imp-const-char-types&#34;&gt;2. &lt;code&gt;BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;为类添加新方法&lt;/p&gt;

&lt;p&gt;如果当前类已经有这个&lt;code&gt;selector&lt;/code&gt;，拿到该&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;返回False；如果没有，或父类存在，会将这个方法的IMP指向新的IMP，返回True。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
    if (!cls) return NO;

    mutex_locker_t lock(runtimeLock);
    return ! addMethod(cls, name, imp, types ?: &amp;quot;&amp;quot;, NO);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;static IMP 
addMethod(Class cls, SEL name, IMP imp, const char *types, bool replace)
{
    IMP result = nil;

    runtimeLock.assertLocked();

    checkIsKnownClass(cls);
    
    assert(types);
    assert(cls-&amp;gt;isRealized());

    method_t *m;
    if ((m = getMethodNoSuper_nolock(cls, name))) {
        // already exists
        if (!replace) {
            result = m-&amp;gt;imp;
        } else {
            result = _method_setImplementation(cls, m, imp);
        }
    } else {
        // fixme optimize
        method_list_t *newlist;
        newlist = (method_list_t *)calloc(sizeof(*newlist), 1);
        newlist-&amp;gt;entsizeAndFlags = 
            (uint32_t)sizeof(method_t) | fixed_up_method_list;
        newlist-&amp;gt;count = 1;
        newlist-&amp;gt;first.name = name;
        newlist-&amp;gt;first.types = strdupIfMutable(types);
        newlist-&amp;gt;first.imp = imp;

        prepareMethodLists(cls, &amp;amp;newlist, 1, NO, NO);
        cls-&amp;gt;data()-&amp;gt;methods.attachLists(&amp;amp;newlist, 1);
        flushCaches(cls);

        result = nil;
    }

    return result;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-imp-class-replacemethod-class-cls-sel-name-imp-imp-const-char-types&#34;&gt;3. &lt;code&gt;IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;改变当前类中某个&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IMP 
class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
    if (!cls) return nil;

    mutex_locker_t lock(runtimeLock);
    return addMethod(cls, name, imp, types ?: &amp;quot;&amp;quot;, YES);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;static IMP _method_setImplementation(Class cls, method_t *m, IMP imp)
{
    runtimeLock.assertLocked();

    if (!m) return nil;
    if (!imp) return nil;

    IMP old = m-&amp;gt;imp;
    m-&amp;gt;imp = imp;

    // Cache updates are slow if cls is nil (i.e. unknown)
    // RR/AWZ updates are slow if cls is nil (i.e. unknown)
    // fixme build list of classes whose Methods are known externally?

    flushCaches(cls);

    updateCustomRR_AWZ(cls, m);

    return old;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-void-method-exchangeimplementations-method-m1-method-m2&#34;&gt;4. &lt;code&gt;void method_exchangeImplementations(Method m1, Method m2)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;交换两个&lt;code&gt;Method&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void method_exchangeImplementations(Method m1, Method m2)
{
    if (!m1  ||  !m2) return;

    mutex_locker_t lock(runtimeLock);

    IMP m1_imp = m1-&amp;gt;imp;
    m1-&amp;gt;imp = m2-&amp;gt;imp;
    m2-&amp;gt;imp = m1_imp;


    // RR/AWZ updates are slow because class is unknown
    // Cache updates are slow because class is unknown
    // fixme build list of classes whose Methods are known externally?

    flushCaches(nil);

    updateCustomRR_AWZ(nil, m1);
    updateCustomRR_AWZ(nil, m2);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结：&lt;/br&gt;
上面包含了方法交互的两种方式：
- 已经存在的要交换的方法，直接交换方法的&lt;code&gt;IMP&lt;/code&gt;指针
- 要交换的方法不存在，动态创建方法再交换方法的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tips:交换&lt;code&gt;Method&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method_exchangeImplementations(class_getInstanceMethod(self, @selector(viewDidAppear:)),
                                   class_getInstanceMethod(self, @selector(ex_viewDidAppear:
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;aspects&#34;&gt;&lt;code&gt;Aspects&lt;/code&gt;&lt;/h4&gt;

&lt;h5 id=&#34;一-消息转发&#34;&gt;（一）消息转发&lt;/h5&gt;

&lt;p&gt;消息转发有3个阶段：
1. 当前对象动态添加方法来响应
2. 有备用对象能够响应该方法
3. 通过forwardInvocation方法来处理该方法&lt;/p&gt;

&lt;p&gt;阶段3最灵活，和原来的类耦合最少。&lt;code&gt;Aspects&lt;/code&gt;就是在这个阶段来做方法替换。它替换的是什么呢，就是&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB95b6876b75aa452319fef5a997016d55?method=download&amp;amp;shareKey=809104bf2daedc6e202304bd2e45d2e8&#34; alt=&#34;&#34; /&gt;
经过讨论应该是下面这样的流程
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB84716c5dcfa90f82f31dca71e6baf268?method=download&amp;amp;shareKey=476d1e7dc88416af4d492f8d9e541243&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aspects会强制将你要hook的方法的&lt;code&gt;IMP&lt;/code&gt;指向&lt;code&gt;_objc_msgForward&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;，也就意味着你&lt;strong&gt;直接&lt;/strong&gt;走到了消息转发的最后一步。接着在新的&lt;code&gt;IMP&lt;/code&gt;： &lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt; 里面做各种切面的hook，before、instead、after。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef NS_OPTIONS(NSUInteger, AspectOptions) {
    AspectPositionAfter   = 0,            /// Called after the original implementation (default)
    AspectPositionInstead = 1,            /// Will replace the original implementation.
    AspectPositionBefore  = 2,            /// Called before the original implementation.
    
    AspectOptionAutomaticRemoval = 1 &amp;lt;&amp;lt; 3 /// Will remove the hook after the first execution.
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;二-实例对象和类对象的hook&#34;&gt;（二）实例对象和类对象的Hook&lt;/h5&gt;

&lt;p&gt;类对象：&lt;br&gt;
直接将当前类对象&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;替换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_swizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    // If there is no method, replace will act like class_addMethod.
    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, &amp;quot;v@:@&amp;quot;);
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例对象：&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBaab254928096c6f3850e8c5d74175e90?method=download&amp;amp;shareKey=f9ddd204eb6c299ad61feb797005dca4&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1.动态创建当前类的子类，2.再将子类的&lt;code&gt;forwardInvocation&lt;/code&gt;进行替换，3.最后将类对象和原类&lt;code&gt;class&lt;/code&gt;方法的&lt;code&gt;IMP&lt;/code&gt;指向当前类的&lt;code&gt;class&lt;/code&gt;方法的&lt;code&gt;IMP&lt;/code&gt;,4.将当前类的&lt;code&gt;isa&lt;/code&gt;指向动态创建的类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const char *subclassName = [className stringByAppendingString:AspectsSubclassSuffix].UTF8String;
Class subclass = objc_getClass(subclassName);
if (subclass == nil) {
		subclass = objc_allocateClassPair(baseClass, subclassName, 0);
		if (subclass == nil) {
            NSString *errrorDesc = [NSString stringWithFormat:@&amp;quot;objc_allocateClassPair failed to allocate class %s.&amp;quot;, subclassName];
            AspectError(AspectErrorFailedToAllocateClassPair, errrorDesc);
            return nil;
        }

		aspect_swizzleForwardInvocation(subclass);
		aspect_hookedGetClass(subclass, statedClass);
		aspect_hookedGetClass(object_getClass(subclass), statedClass);
		objc_registerClassPair(subclass);
	}
	//将self的isa指向动态创建的类
object_setClass(self, subclass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样做能保证现有的方法能正常执行；对当前类结构的改动最小。在&lt;code&gt;remove&lt;/code&gt;的时候&lt;code&gt;isa&lt;/code&gt;指针指回来就好了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
NSString *className = NSStringFromClass(klass);
        if ([className hasSuffix:AspectsSubclassSuffix]) {
            Class originalClass = NSClassFromString([className stringByReplacingOccurrencesOfString:AspectsSubclassSuffix withString:@&amp;quot;&amp;quot;]);
            NSCAssert(originalClass != nil, @&amp;quot;Original class must exist&amp;quot;);
            //将self的isa指向原来的类
            object_setClass(self, originalClass);
            AspectLog(@&amp;quot;Aspects: %@ has been restored.&amp;quot;, NSStringFromClass(originalClass));
            ...
        }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;三-源码&#34;&gt;（三）源码&lt;/h5&gt;

&lt;h6 id=&#34;配置&#34;&gt;配置&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;static id aspect_add(id self, SEL selector, AspectOptions options, id block, NSError **error) {
    NSCParameterAssert(self);
    NSCParameterAssert(selector);
    NSCParameterAssert(block);

    __block AspectIdentifier *identifier = nil;
    
    ①aspect_performLocked(^{
        if (②aspect_isSelectorAllowedAndTrack(self, selector, options, error)) {
            ③AspectsContainer *aspectContainer = aspect_getContainerForObject(self, selector);
            identifier = [AspectIdentifier identifierWithSelector:selector object:self options:options block:block error:error];
            if (identifier) {
                ④[aspectContainer addAspect:identifier withOptions:options];

                // Modify the class to allow message interception.
                ⑤aspect_prepareClassAndHookSelector(self, selector, error);
            }
        }
    });
    return identifier;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;①-br&#34;&gt;①&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;对代码块加自旋锁&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_performLocked(dispatch_block_t block) {
    static OSSpinLock aspect_lock = OS_SPINLOCK_INIT;
    OSSpinLockLock(&amp;amp;aspect_lock);
    block();
    OSSpinLockUnlock(&amp;amp;aspect_lock);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;②-br&#34;&gt;②&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;selector校验和tracker设置&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;黑名单校验，这些方法是无法被hook的，有&lt;code&gt;retain&lt;/code&gt;、&lt;code&gt;release&lt;/code&gt;、&lt;code&gt;autorelease&lt;/code&gt;、&lt;code&gt;forwardInvocation:&lt;/code&gt;、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Check against the blacklist.
NSString *selectorName = NSStringFromSelector(selector);
if ([disallowedSelectorList containsObject:selectorName]) {
    NSString *errorDescription = [NSString stringWithFormat:@&amp;quot;Selector %@ is blacklisted.&amp;quot;, selectorName];
    AspectError(AspectErrorSelectorBlacklisted, errorDescription);
    return NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dealloc&lt;/code&gt;无法在&lt;code&gt;AspectPositionBefore&lt;/code&gt;情况下被hook；当前实例和类必须要都能响应要hook的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AspectOptions position = options&amp;amp;AspectPositionFilter;
if ([selectorName isEqualToString:@&amp;quot;dealloc&amp;quot;] &amp;amp;&amp;amp; position != AspectPositionBefore) {
    NSString *errorDesc = @&amp;quot;AspectPositionBefore is the only valid position when hooking dealloc.&amp;quot;;
    AspectError(AspectErrorSelectorDeallocPosition, errorDesc);
    return NO;
}
if (![self respondsToSelector:selector] &amp;amp;&amp;amp; ![self.class instancesRespondToSelector:selector]) {
    NSString *errorDesc = [NSString stringWithFormat:@&amp;quot;Unable to find selector -[%@ %@].&amp;quot;, NSStringFromClass(self.class), selectorName];
    AspectError(AspectErrorDoesNotRespondToSelector, errorDesc);
    return NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果是类对象，为该类及其继承体系上的所有类创建一个&lt;code&gt;AspectTracker&lt;/code&gt;，并保存到一个全局单例的可变字典中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    currentClass = klass;
    AspectTracker *parentTracker = nil;
    do {
        AspectTracker *tracker = swizzledClassesDict[currentClass];
        if (!tracker) {
            tracker = [[AspectTracker alloc] initWithTrackedClass:currentClass parent:parentTracker];
            swizzledClassesDict[(id&amp;lt;NSCopying&amp;gt;)currentClass] = tracker;
        }
        [tracker.selectorNames addObject:selectorName];
        // All superclasses get marked as having a subclass that is modified.
        parentTracker = tracker;
    }while ((currentClass = class_getSuperclass(currentClass)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AspectTracker结构&lt;/code&gt;
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB715024449547b00293407b3d99066c57?method=download&amp;amp;shareKey=d84e9dd7fe1949030441cea5e1156e96&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;③-br&#34;&gt;③&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;通过runtime为当前类关联一个&lt;code&gt;AspectsContainer&lt;/code&gt;类型的属性。命名方式是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//aspects__ + 方法名
eg:aspects__eat:andWater:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AspectsContainer&lt;/code&gt;保存了被hook方法的三种切面数组
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB970471b0e4303ce3e0f095a4a2c92d93?method=download&amp;amp;shareKey=014892c4716701c7a5ed9026b33e33d1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;数组里面的对象&lt;code&gt;AspectIdentifier&lt;/code&gt;包含了在进行所有切面操作所需的信息，原方法、切面block、切面block的签名、如何切以及原方法所属的类。
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB78a33ecad4ae519b1113d730103d4def?method=download&amp;amp;shareKey=49e5bfc2a4f7297a29964987ea9fa873&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在创建&lt;code&gt;AspectIdentifier&lt;/code&gt;对象的初始化方法里有两个校验逻辑，1. 方法签名的校验 2. 方法签名兼容性判断。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Aspects&lt;/code&gt;定义了一个结构和&lt;code&gt;NSGlobalBlock&lt;/code&gt;类似的结构体&lt;code&gt;_AspectBlock&lt;/code&gt;。我们的切面block(&lt;code&gt;NSGlobalBlock&lt;/code&gt;)会被强转为&lt;code&gt;_AspectBlock&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Block internals.
typedef NS_OPTIONS(int, AspectBlockFlags) {
	AspectBlockFlagsHasCopyDisposeHelpers = (1 &amp;lt;&amp;lt; 25),
	AspectBlockFlagsHasSignature          = (1 &amp;lt;&amp;lt; 30)
};
typedef struct _AspectBlock {
	__unused Class isa;
	AspectBlockFlags flags;
	__unused int reserved;
	void (__unused *invoke)(struct _AspectBlock *block, ...);
	struct {
		unsigned long int reserved;
		unsigned long int size;
		// requires AspectBlockFlagsHasCopyDisposeHelpers
		void (*copy)(void *dst, const void *src);
		void (*dispose)(const void *);
		// requires AspectBlockFlagsHasSignature
		const char *signature;
		const char *layout;
	} *descriptor;
	// imported variables
} *AspectBlockRef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Block方法签名的校验有两步：
1. &lt;code&gt;!(layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasSignature)&lt;/code&gt;(这应该是flags的一个规则)，如果&lt;code&gt;layout-&amp;gt;flags&lt;/code&gt;的值是0，返回nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AspectBlockRef layout = (__bridge void *)block;
	if (!(layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasSignature)) {
        NSString *description = [NSString stringWithFormat:@&amp;quot;The block %@ doesn&#39;t contain a type signature.&amp;quot;, block];
        AspectError(AspectErrorMissingBlockSignature, description);
        return nil;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;layout-&amp;gt;descriptor&lt;/code&gt;中是否存在&lt;code&gt;signature&lt;/code&gt;。&lt;code&gt;desc&lt;/code&gt;先向下偏移2个&lt;code&gt;unsigned long int&lt;/code&gt;大小，如果存在copy和dispose函数继续向下偏移2个&lt;code&gt;unsigned long int&lt;/code&gt;大小。这时候检查签名是否为空。
&lt;code&gt;
void *desc = layout-&amp;gt;descriptor;
	desc += 2 * sizeof(unsigned long int);
	if (layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasCopyDisposeHelpers) {
		desc += 2 * sizeof(void *);
}
	if (!desc) {
    NSString *description = [NSString stringWithFormat:@&amp;quot;The block %@ doesn&#39;t has a type signature.&amp;quot;, block];
    AspectError(AspectErrorMissingBlockSignature, description);
    return nil;
}
	const char *signature = (*(const char **)desc);
	return [NSMethodSignature signatureWithObjCTypes:signature];
&lt;/code&gt;
&lt;img src=&#34;https://lc-api-gold-cdn.xitu.io/3293f66aeb756e10eba7&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方法签名兼容性判断，通过对比方法签名来实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *blockSignature, id object, SEL selector, NSError **error) {
    NSCParameterAssert(blockSignature);
    NSCParameterAssert(object);
    NSCParameterAssert(selector);

    BOOL signaturesMatch = YES;
    NSMethodSignature *methodSignature = [[object class] instanceMethodSignatureForSelector:selector];
    if (blockSignature.numberOfArguments &amp;gt; methodSignature.numberOfArguments) {
        signaturesMatch = NO;
    }else {
        if (blockSignature.numberOfArguments &amp;gt; 1) {
            const char *blockType = [blockSignature getArgumentTypeAtIndex:1];
            if (blockType[0] != &#39;@&#39;) {
                signaturesMatch = NO;
            }
        }
        // Argument 0 is self/block, argument 1 is SEL or id&amp;lt;AspectInfo&amp;gt;. We start comparing at argument 2.
        // The block can have less arguments than the method, that&#39;s ok.
        if (signaturesMatch) {
            for (NSUInteger idx = 2; idx &amp;lt; blockSignature.numberOfArguments; idx++) {
                const char *methodType = [methodSignature getArgumentTypeAtIndex:idx];
                const char *blockType = [blockSignature getArgumentTypeAtIndex:idx];
                // Only compare parameter, not the optional type data.
                if (!methodType || !blockType || methodType[0] != blockType[0]) {
                    signaturesMatch = NO; break;
                }
            }
        }
    }

    if (!signaturesMatch) {
        NSString *description = [NSString stringWithFormat:@&amp;quot;Blog signature %@ doesn&#39;t match %@.&amp;quot;, blockSignature, methodSignature];
        AspectError(AspectErrorIncompatibleBlockSignature, description);
        return NO;
    }
    return YES;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果方法签名个数不等返回NO；如果切面block的方法签名第1个参数（从第0个开始）的字符不是&lt;code&gt;@&lt;/code&gt;返回NO；如果切面block的方法签名和要替换方法的方法签名从第2个开始不能一一匹配返回NO。&lt;/p&gt;

&lt;h3 id=&#34;④-br&#34;&gt;④&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;将构建好的&lt;code&gt;AspectIdentifier&lt;/code&gt;，添加到类对应的&lt;code&gt;AspectsContainer&lt;/code&gt;中，调用Hook方法时要用。&lt;/p&gt;

&lt;h3 id=&#34;⑤-br&#34;&gt;⑤&lt;/br&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_prepareClassAndHookSelector(NSObject *self, SEL selector, NSError **error) {
    NSCParameterAssert(selector);
    Class klass = aspect_hookClass(self, error);
    Method targetMethod = class_getInstanceMethod(klass, selector);
    IMP targetMethodIMP = method_getImplementation(targetMethod);
    if (!aspect_isMsgForwardIMP(targetMethodIMP)) {
        // Make a method alias for the existing method implementation, it not already copied.
        const char *typeEncoding = method_getTypeEncoding(targetMethod);
        SEL aliasSelector = aspect_aliasForSelector(selector);
        if (![klass instancesRespondToSelector:aliasSelector]) {
            __unused BOOL addedAlias = class_addMethod(klass, aliasSelector, method_getImplementation(targetMethod), typeEncoding);
            NSCAssert(addedAlias, @&amp;quot;Original implementation for %@ is already copied to %@ on %@&amp;quot;, NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);
        }

        // We use forwardInvocation to hook in.
        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);
        AspectLog(@&amp;quot;Aspects: Installed hook for -[%@ %@].&amp;quot;, klass, NSStringFromSelector(selector));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里就是调整&lt;code&gt;IMP&lt;/code&gt;指针。下面这段代码主要有两个功能。
1. 将类的&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;指向自定义的&lt;code&gt;IMP&lt;/code&gt;。这里分四种情况，（一）已经hook过的类，指实例对象，当前类的前缀是&lt;code&gt;_Aspects_&lt;/code&gt;，直接返回。（二）类对象，上文已讨论过。（三）类对象和元类不是同一个类。（四）动态添加方法，上文也已讨论过。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//交换forwardInvocation IMP的代码
static NSString *const AspectsForwardInvocationSelectorName = @&amp;quot;__aspects_forwardInvocation:&amp;quot;;
static void aspect_swizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    // If there is no method, replace will act like class_addMethod.
    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, &amp;quot;v@:@&amp;quot;);
    if (originalImplementation) {
        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, &amp;quot;v@:@&amp;quot;);
    }
    AspectLog(@&amp;quot;Aspects: %@ is now aspect aware.&amp;quot;, NSStringFromClass(klass));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.将要hook方法的&lt;code&gt;IMP&lt;/code&gt;指向&lt;code&gt;_objc_msgForward&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;到这里完成了所有的配置工作&lt;/p&gt;

&lt;h6 id=&#34;运行时&#34;&gt;运行时&lt;/h6&gt;

&lt;p&gt;直接上源码。&lt;/br&gt;
先拿实例对象和类对象的&lt;code&gt;AspectsContainer&lt;/code&gt;，可以为空。组装&lt;code&gt;AspectInfo&lt;/code&gt;。先执行所有的&lt;code&gt;beforeAspects&lt;/code&gt;切;接着如果存在&lt;code&gt;insteadAspects&lt;/code&gt;，执行install切面，否则执行原方法；最后执行&lt;code&gt;afterAspects&lt;/code&gt;切面。在每个切面执行的时候，实例对象和类对象的都要执行。如果有需要remove的切面都会加到&lt;code&gt;aspectsToRemove&lt;/code&gt;这个数组里面，最后以remove掉。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma mark - Aspect Invoke Point

// This is a macro so we get a cleaner stack trace.
#define aspect_invoke(aspects, info) \
for (AspectIdentifier *aspect in aspects) {\
    [aspect invokeWithInfo:info];\
    if (aspect.options &amp;amp; AspectOptionAutomaticRemoval) { \
        aspectsToRemove = [aspectsToRemove?:@[] arrayByAddingObject:aspect]; \
    } \
}

// This is the swizzled forwardInvocation: method.
static void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {
    NSCParameterAssert(self);
    NSCParameterAssert(invocation);
    SEL originalSelector = invocation.selector;
	SEL aliasSelector = aspect_aliasForSelector(invocation.selector);
    invocation.selector = aliasSelector;
    AspectsContainer *objectContainer = objc_getAssociatedObject(self, aliasSelector);
    AspectsContainer *classContainer = aspect_getContainerForClass(object_getClass(self), aliasSelector);
    AspectInfo *info = [[AspectInfo alloc] initWithInstance:self invocation:invocation];
    NSArray *aspectsToRemove = nil;

    // Before hooks.
    aspect_invoke(classContainer.beforeAspects, info);
    aspect_invoke(objectContainer.beforeAspects, info);

    // Instead hooks.
    BOOL respondsToAlias = YES;
    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {
        aspect_invoke(classContainer.insteadAspects, info);
        aspect_invoke(objectContainer.insteadAspects, info);
    }else {
        Class klass = object_getClass(invocation.target);
        do {
            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {
                [invocation invoke];
                break;
            }
        }while (!respondsToAlias &amp;amp;&amp;amp; (klass = class_getSuperclass(klass)));
    }

    // After hooks.
    aspect_invoke(classContainer.afterAspects, info);
    aspect_invoke(objectContainer.afterAspects, info);

    // If no hooks are installed, call original implementation (usually to throw an exception)
    if (!respondsToAlias) {
        invocation.selector = originalSelector;
        SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);
        if ([self respondsToSelector:originalForwardInvocationSEL]) {
            ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);
        }else {
            [self doesNotRecognizeSelector:invocation.selector];
        }
    }

    // Remove any hooks that are queued for deregistration.
    [aspectsToRemove makeObjectsPerformSelector:@selector(remove)];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里基本差不多了，还有两个地方没讲，切面Block调用实现&lt;code&gt;[aspect invokeWithInfo:info]&lt;/code&gt;和移除切面，有兴趣的可以看看。&lt;/p&gt;

&lt;p&gt;最后附上一张整体流程图
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB24a1a6c4e7c65ed963c9c65099042c69?method=download&amp;amp;shareKey=c4ea75a79f085b53d9d848ebd1b8543b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;四-答题&#34;&gt;（四）答题&lt;/h5&gt;

&lt;p&gt;1、2上面基本都已经说清楚了，我们从3看起：&lt;/p&gt;

&lt;p&gt;3.为什么这样hook之后所有的实例方法也被hook了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[UIViewController class] aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionBefore usingBlock:^(){
        
} error:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;答：这里考察的是&lt;code&gt;isa&lt;/code&gt;的概念。实例对象调用方法的时候是在&lt;strong&gt;isa指针指向的对象&lt;/strong&gt;里的方法列表去找，而&lt;strong&gt;isa指针指向的对象&lt;/strong&gt;就是类对象，&lt;code&gt;Aspects&lt;/code&gt;改变的是类对象方法列表里方法的&lt;code&gt;IMP&lt;/code&gt;，所以无论那是实例调用了&lt;code&gt;viewWillAppear:&lt;/code&gt;都会被hook&lt;/p&gt;

&lt;p&gt;4.为什么&lt;code&gt;Aspect&lt;/code&gt;不能hook静态方法
答：这里考察的也是&lt;code&gt;isa&lt;/code&gt;的概念，可见&lt;code&gt;isa&lt;/code&gt;在runtime中的地位非常重要。因为类对象调用方法的时候是到元类中去查找，而我们并没有对元类的方法进行hook。&lt;/p&gt;

&lt;p&gt;5.如果用先用Aspects hook了方法A，接着又用MethodSwizzle对A进行了hook，两个hook都能执行吗？
答：先看这张图，以&lt;code&gt;viewDidAppear:&lt;/code&gt;为列&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBbd552a8d0fd08c81bddf036c20023229?method=download&amp;amp;shareKey=c8ab8006d377bd96f97cd3bc38ca9d1b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viewDidAppear:&lt;/code&gt;的IMP先被指向了&lt;code&gt;forwardInvocatoin:&lt;/code&gt;，当用MethodSwizzle进行第二次hook的时候，原来想指向&lt;code&gt;viewDidAppear:&lt;/code&gt;正真的&lt;code&gt;IMP&lt;/code&gt;的指针其实指向了&lt;code&gt;forwardInvocatoin:&lt;/code&gt;，而&lt;code&gt;forwardInvocatoin:&lt;/code&gt;被&lt;code&gt;Aspects&lt;/code&gt;指向了自定义的&lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt;。这时候当调用&lt;code&gt;km_viewDidAppear:&lt;/code&gt;的时候调用了&lt;code&gt;Aspects&lt;/code&gt;的消息转发。在执行原方法的时候执行的是&lt;code&gt;aspects__t_viewDidAppear:&lt;/code&gt;而不是当初动态添加的&lt;code&gt;aspects__viewDidAppear:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self doesNotRecognizeSelector:invocation.selector];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以答案是用&lt;code&gt;MethodSwizzle&lt;/code&gt;hook的方法可以执行。&lt;code&gt;Aspects&lt;/code&gt;Hook的方法无法执行，已经无法拿到正确的&lt;code&gt;AspectsContainer&lt;/code&gt;，动态添加的属性名称class_getSuperclass不对（是基于&lt;code&gt;viewDidAppear&lt;/code&gt;创建的属性，而不是&lt;code&gt;km_viewDidAppear&lt;/code&gt;）了，最后崩溃了。&lt;/p&gt;

&lt;p&gt;但是&lt;code&gt;Aspects&lt;/code&gt;还给了你最后一次机会如果被hook的类里面实现了方法&lt;code&gt;__aspects_forwardInvocation&lt;/code&gt;还能挽救下崩溃的局面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
invocation.selector = originalSelector;
SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);
if ([self respondsToSelector:originalForwardInvocationSEL]) {
    ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);
}else {
    [self doesNotRecognizeSelector:invocation.selector];
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上的推断建立在当前类没有实现&lt;code&gt;viewDidAppear:&lt;/code&gt;的前提下。如果当前类实现了&lt;code&gt;viewDidAppear:&lt;/code&gt;MethodSwizzle拿到的就不是被交换过的IMP。这时候就可以形成闭环：&lt;code&gt;km_viewDidAppear:&lt;/code&gt;-&amp;gt;&lt;code&gt;viewDidAppear:(调用了[super viewDidAppear])&lt;/code&gt;-&amp;gt;&lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt;-&amp;gt;&lt;code&gt;Aspects的hook方法&lt;/code&gt;&lt;/br&gt;
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBb7863bbb0e16ab705af8d7443bfead85?method=download&amp;amp;shareKey=3b736c680f87c3c52f724c4845dca10b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;四-知识点&#34;&gt;（四）知识点：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;消息转发&lt;/li&gt;
&lt;li&gt;runtime的各种方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object_getClass(id _Nullable obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_isMetaClass(Class _Nullable cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_getSuperclass(Class _Nullable cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_getInstanceMethod(Class _Nullable cls, SEL _Nonnull name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_getImplementation(Method _Nonnull m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_getTypeEncoding(Method _Nonnull m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_replaceMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_exchangeImplementations(Method _Nonnull m1, Method _Nonnull m2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object_setClass(id _Nullable obj, Class _Nonnull cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;isa指针&lt;/li&gt;
&lt;li&gt;block结构&lt;/li&gt;
&lt;li&gt;NSMethodSignature方法签名&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Object-C多线程总结</title>
      <link>https://linkrober.github.io/bookshelf/2018/05/object-c%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2018/05/object-c%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;多线程概念&lt;/li&gt;
&lt;li&gt;NSOperation&lt;/li&gt;
&lt;li&gt;GCD(Grand Central Dispatch)&lt;/li&gt;
&lt;li&gt;NSThread&lt;/li&gt;
&lt;li&gt;资源竞争&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;多线程概念&#34;&gt;多线程概念&lt;/h3&gt;

&lt;p&gt;线程也叫轻量级进程，是程序执行流的最小单元。
线程组成：&lt;strong&gt;线程ID&lt;/strong&gt;、&lt;strong&gt;指令指针&lt;/strong&gt;、&lt;strong&gt;寄存器集合&lt;/strong&gt;、&lt;strong&gt;堆栈&lt;/strong&gt;。
线程是进程中的一个实体，是被系统独立调度和分派的基本单位。&lt;/p&gt;

&lt;p&gt;线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属于一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。&lt;/p&gt;

&lt;p&gt;线程有就绪、阻塞和运行三种基本状态。&lt;br&gt;
&lt;strong&gt;就绪&lt;/strong&gt;：是指线程具备运行的所有条件，逻辑上可运行，在等待处理机。&lt;br&gt;
&lt;strong&gt;运行&lt;/strong&gt;：线程占有处理机正在运行&lt;br&gt;
&lt;strong&gt;阻塞&lt;/strong&gt;：线程在等一个事件（如信号量），逻辑上不可执行&lt;/p&gt;

&lt;p&gt;每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。在单个程序中同时运行多个线程完成不同的工作，称为&lt;strong&gt;多线程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;nsoperation&#34;&gt;NSOperation&lt;/h3&gt;

&lt;p&gt;因为&lt;code&gt;NSOperation&lt;/code&gt;是一个抽象类，我们不能直接使用它，我们一般使用系统定义好了的两个子类&lt;code&gt;NSInvocationOperation&lt;/code&gt;和&lt;code&gt;NSBlockOperation&lt;/code&gt;。尽管&lt;code&gt;NSOperation&lt;/code&gt;很抽象，但是它的实现很优雅，能让你安全的执行任务。&lt;/p&gt;

&lt;p&gt;它是一次性对象（single-shot object），一个任务执行结束了，就不能再次执行。我们通常将它添加到&lt;code&gt;NSOperationQueue&lt;/code&gt;来执行任务。&lt;code&gt;NSOperationQueue&lt;/code&gt;将任务放到其他线程或者直接调动&lt;code&gt;GCD&lt;/code&gt;来执行任务。如果你不想使用&lt;code&gt;NSOperationQueue&lt;/code&gt;可以直接通过&lt;code&gt;NSOperation&lt;/code&gt;的&lt;code&gt;start&lt;/code&gt;方法来执行。但是这样会给你的code带来更多的负担。如果执行的时候线程不在一个就绪状态就会引起异常(&lt;code&gt;NSOperation&lt;/code&gt;存在依赖)。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;nsblockoperation-nsinvocationoperation&#34;&gt;NSBlockOperation&amp;amp;NSInvocationOperation&lt;/h4&gt;

&lt;p&gt;添加任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//selector
- (nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;
//block
+ (instancetype)blockOperationWithBlock:(void (^)(void))block;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//开始执行任务
- (void)start
//可以取消线程操作对应方法
- (void)cancel
//添加依赖
- (void)addDependency:(NSOperation *)op
//移除依赖
- (void)removeDependency:(NSOperation *)op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;nsoperationqueue&#34;&gt;NSOperationQueue&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;NSOperation&lt;/code&gt;的队列，通过设置并发数量来控制异步还是同步，属性为&lt;code&gt;maxConcurrentOperationCount&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperation:(NSOperation *)op;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperations:(NSArray&amp;lt;NSOperation *&amp;gt; *)ops waitUntilFinished:(BOOL)wait API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperationWithBlock:(void (^)(void))block API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;添加完之后会立即执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;取消任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)cancelAllOperations;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)waitUntilAllOperationsAreFinished;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;会使当前线程（例如，主线程）忙等，直到所有任务完成&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;gcd-grand-central-dispatch&#34;&gt;GCD (Grand Central Dispatch)&lt;/h3&gt;

&lt;p&gt;GCD将语言特性、OC运行时和系统提供的优化结合在一起，充分发挥系统的多核特性。BSD子系统，Core Foundation和Cocoa API都是用了CGD来帮助iOS系统和App跑的更快、更高效、响应更及时。GCD在系统层面更好的协调了所有在run的App，使它们在系统资源的利用上达到了一个平衡。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;当你使用Object-C的编译器编译你的App，所有的GCD对象都是Object-C对象。在RAC环境下，引用和释放也是自动管理的。在非ARC环境下需要手动管理。（dispatch_retain和 dispatch_release）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CGD&lt;/code&gt;每个任务都要放到一个队列中去执行，队列分两种串行队列和并行队列。任务也分两种同步和异步。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;串行队列&lt;/th&gt;
&lt;th&gt;并行队列&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同步线程&lt;/td&gt;
&lt;td&gt;会阻塞当前线程；不会开辟新的线程；任务在当前的线程串行执行&lt;/td&gt;
&lt;td&gt;会阻塞当前线程；不会开辟新的线程；任务在当前的线程同步执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异步线程&lt;/td&gt;
&lt;td&gt;不会阻塞当前线程；会开辟新的线程；任务在新的线程串行执行&lt;/td&gt;
&lt;td&gt;不会阻塞当前线程；会开辟新的线程；任务在新的线程异步执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;死锁&#34;&gt;死锁&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dispatch_sync(dispatch_get_main_queue(), ^{
    NSLog(@&amp;quot;sync - %@&amp;quot;, [NSThread currentThread]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为是同步任务，主线程停下，等待队列里的任务完成，因为队列是主队列，跑的是主线程，这时候主线程处于等待状态，就出现了互相等待的情况。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group&#34;&gt;dispatch_group&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dispatch_group&lt;/code&gt;能够在一个&lt;code&gt;Queue&lt;/code&gt;的所有任务结束之后得到通知，执行相关代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    dispatch_group_t anchorGroup = dispatch_group_create();

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dispatch_group_notify(anchorGroup, anchorQueue, ^{
        //刷新第一个cell
        @strongify(self);
        [self.tableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:0 inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group-enter-dispatch-group-leave&#34;&gt;dispatch_group_enter&amp;amp;&amp;amp;dispatch_group_leave&lt;/h4&gt;

&lt;p&gt;当GCD的任务是异步的时候，如果想要在所有任务结束之后得到通知，就要在各个任务的前后加上&lt;code&gt;dispatch_group_enter&lt;/code&gt;和&lt;code&gt;dispatch_group_leave&lt;/code&gt;。他们需要传入&lt;code&gt;group&lt;/code&gt;作为参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch_group_enter(anchorGroup);
    dispatch_async(anchorQueue, ^{
        [[XYLeaderboardService share] anchorCharmLeaderboard:XYLeaderboardCharmMonthType succeed:^(NSArray&amp;lt;XYLeaderboardItem *&amp;gt; *items) {
            @strongify(self);
            [self.datasource firstObject].secondLeaderboard = items;
            dispatch_group_leave(anchorGroup);
        } failure:^(XYNetError *error) {
            //
            dispatch_group_leave(anchorGroup);
        }];
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-barrier-async-dispatch-queue-t-queue-dispatch-block-t-block&#34;&gt;dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);&lt;/h4&gt;

&lt;p&gt;等待queue中的任务全部结束，异步执行block中的任务&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-barrier-sync-dispatch-queue-t-queue-dispatch-noescape-dispatch-block-t-block&#34;&gt;dispatch_barrier_sync(dispatch_queue_t queue,DISPATCH_NOESCAPE dispatch_block_t block);&lt;/h4&gt;

&lt;p&gt;等待queue中的任务全部结束，同步执行block中的任务&lt;/p&gt;

&lt;h3 id=&#34;nsthread&#34;&gt;NSThread&lt;/h3&gt;

&lt;p&gt;在执行一个长任务的时候比较有优势，其他的和&lt;code&gt;NSOperation&lt;/code&gt;比较像。&lt;/p&gt;

&lt;h4 id=&#34;创建nsthread&#34;&gt;创建NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithBlock:^{

    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithTarget:&amp;lt;#(nonnull id)#&amp;gt; selector:&amp;lt;#(nonnull SEL)#&amp;gt; object:&amp;lt;#(nullable id)#&amp;gt;];

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;运行nsthread&#34;&gt;运行NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithBlock:^{
        NSLog(@&amp;quot;thread测试%@&amp;quot;,[NSThread currentThread]);
    }];
    [thread start];

//直接运行
[NSThread detachNewThreadWithBlock:^{
        NSLog(@&amp;quot;thrad直接执行%@&amp;quot;,[NSThread currentThread]);
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;停止nsthread&#34;&gt;停止NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//退出当前线程
[NSThread exit];
//取消该线程
NSThread *thread = [[NSThread alloc] initWithBlock:^{
        NSLog(@&amp;quot;thread测试%@&amp;quot;,[NSThread currentThread]);
    }];
[thread cancel];

//阻塞当前线程直到某个时间
[NSThread sleepUntilDate:&amp;lt;#(nonnull NSDate *)#&amp;gt;];

//使当前线程沉睡多少时间
NSLog(@&amp;quot;===============start sleep================&amp;quot;);
[NSThread sleepForTimeInterval:5];
NSLog(@&amp;quot;==============end sleep=================&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;检测当前nsthread的状态&#34;&gt;检测当前NSThread的状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//是否正在执行
[thread isExecuting];
//是否完成
[thread isFinished];
//是否被取消
[thread isCancelled];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;priority&#34;&gt;Priority&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//设置当前线程的优先级
[NSThread setThreadPriority:&amp;lt;#(double)#&amp;gt;];
//查看当前线程的优先级
[NSThread threadPriority];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;资源竞争&#34;&gt;资源竞争&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/&#34;&gt;iOS多线程中的锁&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>入坑小程序</title>
      <link>https://linkrober.github.io/bookshelf/2018/03/%E5%85%A5%E5%9D%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2018/03/%E5%85%A5%E5%9D%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;h3 id=&#34;描述&#34;&gt;描述&lt;/h3&gt;

&lt;p&gt;去年各大平台纷纷开始占领微信上的又一流量入口——小程序。因为小程序的门槛低，这里指，技术上和前端大同小异，审核刚开始也比较松。除了大厂，很多个人开发这都投入进去。想在小程序上打响自己的个人品牌。在筹备了三个月之久，我的第一款小程序，终于快要完成了。在这里我会总结一下整体的过程，从idea到一个完整的小程序、期间遇到的坑、和觉得挺有意思的地方。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
1. 购买服务器
    本人购买的服务器是阿里云服务器，因为经历的几家公司都是用的它，感觉还是比较靠谱的（我一同事也用过腾讯的服务，一直在吐槽不稳定，后来也换到阿里云了)&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
2. 购买域名
    小程序的是无法直接通过IP访问，必须申请一个域名，同样的阿里云上买就行了。这里要提醒大家的是，因为国家政策原因域名需要备案，整个过程大概需要一个月时间。阿里云还是比较良心的，备案成功之后会再赠送你一个月的服务器时间。因为整个备案时间大概是一个月。所有绑定域名一定要提前。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
3. 申请CA证书绑定到域名。在小程序里的API都需要Htps服务，如果你有CA证书可以直接使用，我也是通过阿里云申请的免费CA证书，时间是一年，到期看可以续的。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
4. 根据idea设计产品&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
5. 开发小程序和server&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
6.发布&lt;/p&gt;

&lt;h3 id=&#34;小程序&#34;&gt;小程序&lt;/h3&gt;

&lt;p&gt;因为是我的第一个小程序，先试试手，所以选了一个比较简单的东西，音乐欣赏。数据是从其他网站爬过来插到数据库的。
本人是移动端出生，对前端和后端的东西都不是很熟，不过刚好去年写了不少RN的东西，前端的东西也算是半只脚入门了。在小程序里面文件分为下面几种&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;js文件，和前端的一样，&lt;/li&gt;
&lt;li&gt;wxml文件，类似于html文件&lt;/li&gt;
&lt;li&gt;wxss文件，类似于css文件&lt;/li&gt;
&lt;li&gt;wxs文件，这是小程序的一套脚本语言，语法看似和JavaScript语法一样，其实他们是不同的语言，有自己的语法，并不和 javascript 一致    。我们可以把它当做方法类在wxml中来使用。在wxml中是无法调用js中的非事件方法的，如果从js文件里拿到的数据你希望再做一步处理然后展示，这样的处理需要放到wxs文件里。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发前花半天浏览下微信小程序的API差不多就可以了，套路都差不多MVC。&lt;/p&gt;

&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;

&lt;p&gt;服务器是用Node.js+MongoDB+Express搭建的，全套搭建起来还是很快的。Node.js是一个基于事件驱动I/O的服务端JavaScript环境，它在高并发的服务上有很好的体验。同样是js所以语法基本没门槛了。
MongoDB数据库和一般的关系型数据库不同，它是非关系型数据库。关系型数据库对数据操作都是:&lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;FROM&lt;/code&gt;、&lt;code&gt;WHERE&lt;/code&gt;、&lt;code&gt;BY&lt;/code&gt;等。来感受一下MongoDB怎么操作数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//插入一个数据
var user = {
    &amp;quot;name&amp;quot;:&amp;quot;小芳&amp;quot;，
    &amp;quot;age&amp;quot;:18,
    &amp;quot;gender&amp;quot;:1,
    &amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;
};
db.user.insert(user)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//查询姓名是：张三、李四、王五的信息
db.user.find({&amp;quot;name&amp;quot;:  {&amp;quot;\$in&amp;quot; : [&amp;quot;张三&amp;quot;,&amp;quot;李四&amp;quot;,&amp;quot;王五&amp;quot;] }})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给我最大的感觉，它是一个面向对象面向集合的存储过程，对于经常做面向对象开发人来说是比较容易入手的。&lt;/p&gt;

&lt;h3 id=&#34;express&#34;&gt;Express&lt;/h3&gt;

&lt;p&gt;基于Node.js的极其简洁灵活的web应用开发框架，它有丰富的HTTP快捷方法，非常快捷的创建node服务.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首页模块入口设置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
...
...
var home = require(&#39;./routes/home&#39;);//首页接口
...
...
...
app.use(&#39;/home&#39;, home);//将home绑定到首页接口path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;详细的首页模块&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var URL = require(&#39;url&#39;);
var MusicModel = require(&#39;./model.js&#39;);
const mongoose = require(&#39;mongoose&#39;);
//连接数据库并打开
mongoose.connect(&#39;mongodb://localhost:27017/funmusic&#39;)
var db = mongoose.connection;

db.on(&#39;open&#39;,function(){
	console.log(&#39;MongoDB Connect Successed&#39;);
});
db.on(&#39;error&#39;,function(){
	console.log(&#39;MongoDB Connect Error&#39;);
});
//定义card模型
const cardSchema = new mongoose.Schema({
 	vol_id:String,
 	vol_number:String,
 	number:Number,
 	title:String,
 	summary:String,
 	covers:[{
 		origin:String,
 		large:String,
 		large_low:String,
 		small:String,
 	}],
 	create_time:Number,
 	is_free:Number,
 	is_trial:Number,
 	tags:[{
 		tag_id:String,
 		name:String,
 		alias:String,
 		cover:String,
 	}],
 	comments_count:String,
 	favs_count:Number,
 	url:String,
 	detail_desc:String
 }, { collection: &#39;card&#39; });
const cardModel = mongoose.model(&#39;card&#39;,cardSchema);

//list接口
router.get(&#39;/list&#39;,function(req,res,next){
	var params = URL.parse(req.url,true).query;
	var response = res;
	cardModel.find({},(err,result,res) =&amp;gt; {
		if(err)  return console.log(err);
		console.log(result);
		var content = {status:1,data:result};
		response.send(JSON.stringify(content));
	});
	
})

//定义cardDetail模型
const cardDetailSchema = new mongoose.Schema({
	covers:[{
		origin:String,
		large:String,
		large_low:String,
		small:String,
	}],
	detail_desc:String,
	title:String,
	number:Number,
	tags:[{
 		tag_id:String,
 		name:String,
 		alias:String,
 		cover:String,
 	}],
},{collection:&#39;card&#39;});

//detail接口
router.get(&#39;/detail&#39;,function(req,res,next){
	var params = URL.parse(req.url,true).query;
	var response = res;
	var _vol_id = params.vol_id;
	console.log(_vol_id);
	cardModel.aggregate([{ $match : { vol_id : _vol_id}},{ $project : {title : 1,covers : 1,detail_desc : 1,number : 1,tags : 1,&amp;quot;_id&amp;quot; : 0}}],(err,result,res) =&amp;gt; {
		if(err)  return console.log(err);
		console.log(result);
		var restruct = {
			image_large:result[0].covers[0].large,
			detail_desc:result[0].detail_desc,
			title:result[0].title,
			number:result[0].number,
			tags:result[0].tags,
		}
		var content = {status:1,data:restruct};
		response.send(JSON.stringify(content));
	});
});



module.exports = router;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;端口管理-nginx&#34;&gt;端口管理 - Nginx&lt;/h3&gt;

&lt;p&gt;Nginx是一个反向代理服务器，平时我们抓包数据从server到client是正向代理，从client到server就是反向代理。服务器的http服务只会向外暴露80端口（默认），https服务暴露443(默认)端口。我们的服务则是3000端口，Nginx会将请求反向代理到3000端口，无论你是http还是hppts请求。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39;
                      &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
                      &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
	  proxy_pass http://127.0.0.1:3000;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
    server {
        listen       443;
        server_name  www.lify.online;
	ssl on;
        root         html;
	index index.html index.htm;
        ssl_certificate cert/214534222920959.pem;
        ssl_certificate_key cert/214534222920959.key;
        ssl_session_timeout  5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        location / {
	  #root html;
	  #index index.html index.htm;
	  proxy_pass http://127.0.0.1:3000;
        }

}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;进程管理-pm2&#34;&gt;进程管理 - PM2&lt;/h3&gt;

&lt;p&gt;使用它可以很方便的启动、停止和监控进程。刚开始重新发布接口的时候，都需要停止服务，kill进程，再次启动服务，有了pm2只要&lt;code&gt;pm2 restart 进程名&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上是我最近一段时间小程序之旅的总结，希望对你有所帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>https://linkrober.github.io/bookshelf/2018/02/%E9%80%92%E5%BD%92/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2018/02/%E9%80%92%E5%BD%92/</guid>
      <description>&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text primary&#34;&gt;
基本思想
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;递归是一种直接或者间接调用自身函数或者方法的算法。递归的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。递归算法，其实就是程序的自身调用。在一段程序中往往会遇到调用自身的那样一种coding策略。递归往往能带来非常简洁非常直观的代码形式，从而使我们的编码大大简化，但是递归的思想确实和我们的常规思维相逆。我们通常是从上而下的思考问题，而递归是从下往上进行思考。这样我们就能看到我们会用很少的语句解决很大的问题，所以递归策略最主要的体现就是较少的代码量解决复杂的问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text primary&#34;&gt;
Example：计算阶乘
&lt;/span&gt;
计算阶乘是递归程序的经典示例。计算某个数的阶乘就是用那个数乘以包含1在内的比它小的所有数。例如，&lt;code&gt;factorial(6)&lt;/code&gt;等价于&lt;code&gt;6*5*4*3*2*1&lt;/code&gt;,阶乘的特性是，某个数的阶乘等于起始数乘以比它小的数的阶乘。阶乘函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int factorial(int n) {
	return n * factorial(n-1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这个函数会永远执行下去，因为它没有终止条件。所以我们需要一个条件告诉它何时停止。我们这里给出的条件就是&lt;code&gt;n == 1&lt;/code&gt;停止&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int factorial(int n){
	if(n == 1){
		return 1;
	}
	else {
		return n * factorial(n - 1);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;流程示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../fact-shape.jpg&#34; alt=&#34;fact-shape&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text primary&#34;&gt;
Example：斐波纳契数列
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;数学上&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97&#34;&gt;斐波纳契数列&lt;/a&gt;是以递归的方式来定义的：
&lt;img src=&#34;../../../Fibonacci Sequence.png&#34; alt=&#34;Fibonacci Sequence&#34; /&gt;&lt;/p&gt;

&lt;p&gt;写成递归程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int Fibonacci(int n){
    if (n &amp;lt;= 1)  
        return n;  
    else  
        return Fibonacci(n-1) + Fibonacci(n-2);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text primary&#34;&gt;
递归条件
&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;递归开始时需要一个种子值&lt;/li&gt;
&lt;li&gt;不断的调用自身&lt;/li&gt;
&lt;li&gt;检查当前值是否已经匹配基本条件。如果匹配，则进行处理并返回值&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>再见2017，你好2018</title>
      <link>https://linkrober.github.io/bookshelf/2018/01/%E5%86%8D%E8%A7%812017%E4%BD%A0%E5%A5%BD2018/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2018/01/%E5%86%8D%E8%A7%812017%E4%BD%A0%E5%A5%BD2018/</guid>
      <description>&lt;p&gt;不知不觉工作已有三个年头，在iOS这条路上，从当年战战兢兢的新人变成一个熟练的开发者，这一路走来真不容易。不仅仅是身体上的负荷，个人对于技术的追求也使自己或迷惘或奋起。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;工作&#34;&gt;工作&lt;/h4&gt;

&lt;p&gt;前两年基本上都在加班赶业务做是某块业务，对于一款App从无到有如何架构的没有系统的考虑过。今年在公司的这款Wecycle视频社交App上，团队内从开发语言、设计模式、缓存策略、网络层设计、组件化方案等几个维度来架构这款App。因为前期产品架构的好，后面产品迭代大家都做的比较轻松。就像一幢大厦有了整体的框架，需要什么就往里面塞就行，定期修正下，时间久了，也不用担心楼歪了。&lt;/p&gt;

&lt;p&gt;今年App做了不少，除了刚才说的还有Snapvote，一款投票App；VISO，一款视频和滤镜编辑的App。
Wecycle是Object-C和Swift混编的工程，在这期间算是入门了苹果爸爸的新开发语言，Swfit所倡导的面相协议编程让开发人员的脑洞可以开的更大了，通过协议抽象各种应用场景着实让人兴奋了一把，在Swfit2.0之后&lt;code&gt;protocol&lt;/code&gt;的&lt;code&gt;extension&lt;/code&gt;支持默认实现，为协议插上了翅膀。感兴趣的同学不妨看看&lt;a href=&#34;https://github.com/ishkawa/APIKit&#34;&gt;&lt;code&gt;APIKit&lt;/code&gt;&lt;/a&gt;这个Swift库，它通过POP的方式在网络请求和模型解析之间给出了一个很棒的解决方案，在此不展开了。Swift的解包、写时复制、大量的值类型的使用使得我们的代码比OC时代写起来更安全。&lt;/p&gt;

&lt;p&gt;Snapvote是一款简单的投票类工具App，没有用户系统，可以说是比较简单的了，所以考虑用跨平台的框架ReactNative开发，顺便练练手。一次使用两个工具（Xcode、React Native Debuger）同时调试,那叫酸爽，两个显示器都不够用。扒拉扒拉ReactNative的OC实现，Runtime、消息转发、RunLoop、多线程、线程锁一大堆的知识点，让人受益匪浅；同时又稍微学了点javascript。关于ReactNative的相关体验自己写了一个系列共四篇文章,从安装到原理的讨论，算是有个交代吧。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/react-native%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90%E5%88%B0%E7%8E%B0%E6%9C%89%E9%A1%B9%E7%9B%AE%E4%B8%AD/&#34;&gt;React Native如何集成到现有项目中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/react-native%E5%92%8Cnative%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/&#34;&gt;React Native和Native间的通信实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/rctrootviewrctbridge%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/&#34;&gt;RCTRootView、RCTBridge做了什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/12/object-c%E5%92%8Cjs%E9%80%9A%E4%BF%A1%E6%A6%82%E8%BF%B0/&#34;&gt;Object-C和JS通信概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/viso-photo-editor-collage/id1312830469?ls=1&amp;amp;mt=8&#34;&gt;VISO&lt;/a&gt;视频图片编辑的App和VISCO很像，有兴趣的同学可以体验下，期待你们的意见😄。经历了OC和Swift混编的痛苦，本来想使用纯Swift开发，但是受限于公司内部某些视频编辑库是OC写的一时半会儿没发改过来，只能写回OC了。通过这款App的开发让我对音视频的处理有了一个全面的了解。前两年一直忙于业务没有深挖OC的底层，今年花了很多时间在这上面，不仅对Runtime、RunLoop、线程、线程锁有了更深入的理解，还花时间把C又拉出来练了练。用C写了个App上的Socket服务（Ps：因为期间一直在看网络方面的书籍&lt;a href=&#34;https://read.douban.com/ebook/12054542/&#34;&gt;《图解HTTP》&lt;/a&gt;、&lt;a href=&#34;https://book.douban.com/subject/1088054/&#34;&gt;《TCP／IP详解》&lt;/a&gt;，写的时候少走了点弯路，果然是书到用时方恨少），通过浏览器访问App的某个端口实时的查看埋点数据，方便了QA的测试。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/11/%E4%B8%80%E4%B8%AA%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8E%82%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/&#34;&gt;一个音视频厂的图像处理流程概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/09/run-loops-%E4%B8%80/&#34;&gt;Run Loops (一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/&#34;&gt;iOS多线程中的锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;行业&#34;&gt;行业&lt;/h4&gt;

&lt;p&gt;因为市场上的培训班不断的输出iOS开发者，iOS市场基本饱和，工作也不是三年前随随便便的就能找到，对技术人员的基本素养要求更高，市场正在慢慢回归到良性，挺好。 今年Javascript、Python、Java大行其道，但还是相信苹果爸爸。在OC这门语言上我会继续深入，它是一门动态的语言有很多有趣的技术是那些在编译期就决定怎么跑的语言所不具备的。学习并吸收它，让自己更透彻的了解一门语言的底层机制。对一个几年的开发人员来说，如果一门语言都不能理解的比较透彻，那是可悲的。花更多的时间熟悉Swift，今后让自己的技术能够平稳的过渡。&lt;/p&gt;

&lt;p&gt;“在我们这个地方，你必须不停地奔跑，才能留在原地。” —— 《爱丽丝漫游奇境》● 红桃皇后&lt;/p&gt;

&lt;h4 id=&#34;生活&#34;&gt;生活&lt;/h4&gt;

&lt;p&gt;今年自己的个人生活出现了些状况，多的也不说了大家都懂。这次经历让我意识到即使是两个人已经在一起了，也不要丢失掉原来的自己，不要忘记对方是因为原来的你才想和你在一起。如果你变了，她也变了。控制自己，时刻保持优秀。无论是工作还是生活，活的精致点。&lt;/p&gt;

&lt;h4 id=&#34;2017书单&#34;&gt;2017书单&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《图解HTTP》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;图文并茂，叙述生动。适合新手，让读者对HTTP很快形成一个整体的概念，明白为何这样设计。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《Linux Shell脚本》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当作参考书需要的时候翻翻&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《Object-C高级编程（iOS和OSX多线程和内存管理）》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Autorelease、属性修饰符、block、GCD都有比较深入的理解，都是干货，适合反复阅读。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《Head First HTML》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;入门推荐&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《程序员的自我修养》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;好书，对编译和连接有比较深入的描述，是个大菠萝，得慢慢啃。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《深入理解计算机系统》&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;好书，操作系统必读书籍，又是个大菠萝。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Object-C和JS通信概述</title>
      <link>https://linkrober.github.io/bookshelf/2017/12/object-c%E5%92%8Cjs%E9%80%9A%E4%BF%A1%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/12/object-c%E5%92%8Cjs%E9%80%9A%E4%BF%A1%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;本系列文章作为学习RN期间的总结&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/react-native%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90%E5%88%B0%E7%8E%B0%E6%9C%89%E9%A1%B9%E7%9B%AE%E4%B8%AD/&#34;&gt;React Native如何集成到现有项目中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/react-native%E5%92%8Cnative%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/&#34;&gt;React Native和Native间的通信实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/rctrootviewrctbridge%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/&#34;&gt;RCTRootView、RCTBridge做了什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Object-C和JS通信概述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;流程梳理&#34;&gt;流程梳理&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;../../../来自JSPath作者Bang的一张流程图.png&#34; alt=&#34;来自JSPath作者Bang的一张流程图&#34; /&gt;
首先，无论是RN端还是Native端都会持有一个bridge负责对来自不同端的模块进行桥街，再做消息处理。现附上一张来自JSPath作者Bang的图。
RN调用某个方法向Native发送消息，方法首先会被分解成ModuleId、MethodId和参数，发送到OCBridge。那么OCBridge是如何接受的呢？（因为对JS代码不熟悉这里只讨论OC部分）&lt;/p&gt;

&lt;p&gt;在第一次初始化ReactNative的时候模块信息会被初始化，包括模块名称、方法名。在注册模块的时候我们会用到&lt;code&gt;RCT_EXPORT_MODULE();&lt;/code&gt;这个宏，宏展开&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define RCT_EXPORT_MODULE(js_name) \
RCT_EXTERN void RCTRegisterModule(Class); \
+ (NSString *)moduleName { return @#js_name; } \
+ (void)load { RCTRegisterModule(self); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法1:如果自定义了模块的名称就使用自定义的名称而不是原类的名称&lt;/p&gt;

&lt;p&gt;方法2:在+(void)load方法里对类进行一次注册，注册代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void RCTRegisterModule(Class moduleClass)
{
  static dispatch_once_t onceToken;
  dispatch_once(&amp;amp;onceToken, ^{
    RCTModuleClasses = [NSMutableArray new];
  });

  RCTAssert([moduleClass conformsToProtocol:@protocol(RCTBridgeModule)],
            @&amp;quot;%@ does not conform to the RCTBridgeModule protocol&amp;quot;,
            moduleClass);

  // Register module
  [RCTModuleClasses addObject:moduleClass];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果当前类遵循协议&lt;code&gt;RCTBridgeModule&lt;/code&gt;,就把它放到一个静态变量数组&lt;code&gt;RCTModuleClasses&lt;/code&gt;中。所以启动之后，所有RN需要的模块都会被动态载入。
这些模块会被存储在三张表中&lt;code&gt;_moduleDataByName&lt;/code&gt;、&lt;code&gt;_moduleDataByID&lt;/code&gt;、&lt;code&gt;_moduleClassesByID&lt;/code&gt;,在初始化的时候通过遍历该数组来初始化。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDictionary&amp;lt;NSString *, RCTModuleData *&amp;gt; *_moduleDataByName;
NSArray&amp;lt;RCTModuleData *&amp;gt; *_moduleDataByID;
NSArray&amp;lt;Class&amp;gt; *_moduleClassesByID;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;for (Class moduleClass in RCTGetModuleClasses()) {
    NSString *moduleName = RCTBridgeModuleNameForClass(moduleClass);

    // Check for module name collisions
    RCTModuleData *moduleData = moduleDataByName[moduleName];
    if (moduleData) {
      if (moduleData.hasInstance) {
        // Existing module was preregistered, so it takes precedence
        continue;
      } else if ([moduleClass new] == nil) {
        // The new module returned nil from init, so use the old module
        continue;
      } else if ([moduleData.moduleClass new] != nil) {
        // Both modules were non-nil, so it&#39;s unclear which should take precedence
        RCTLogError(@&amp;quot;Attempted to register RCTBridgeModule class %@ for the &amp;quot;
                    &amp;quot;name &#39;%@&#39;, but name was already registered by class %@&amp;quot;,
                    moduleClass, moduleName, moduleData.moduleClass);
      }
    }

    // Instantiate moduleData (TODO: can we defer this until config generation?)
    moduleData = [[RCTModuleData alloc] initWithModuleClass:moduleClass
                                                     bridge:self];
    moduleDataByName[moduleName] = moduleData;
    [moduleClassesByID addObject:moduleClass];
    [moduleDataByID addObject:moduleData];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分别是模块名称、模块名称对应的对象&lt;code&gt;RCTModuleData&lt;/code&gt;、模块名称和模块对象的映射字典，方便后续使用。&lt;/p&gt;

&lt;p&gt;这时候还有一个重要的东西需要处理就是callback，JSBridge在传递消息的时候会把callback缓存起来，仅仅把callbackId传递到OCBridge。
这时候OCBridge拿到了传过来的ModuleId、MethodId、callbackId，再通过Native端的配置表分别取出模块和方法。模块会被转化为&lt;code&gt;RCTModuleData&lt;/code&gt;对象，方法都会被转化为一个&lt;code&gt;RCTModuleMethod&lt;/code&gt;对象，看一下这个对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  Class _moduleClass;
  const RCTMethodInfo *_methodInfo;
  NSString *_JSMethodName;

  SEL _selector;
  NSInvocation *_invocation;
  NSArray&amp;lt;RCTArgumentBlock&amp;gt; *_argumentBlocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现了&lt;code&gt;_moduleClass&lt;/code&gt;、&lt;code&gt;_argumentBlocks&lt;/code&gt;、&lt;code&gt;_invocation&lt;/code&gt;、&lt;code&gt;_selector&lt;/code&gt;这时候就很容易想到消息转发的最后一个阶段，将消息的目标、selector、参数封装到NSInvocation中进行消息转发。&lt;/p&gt;

&lt;p&gt;刚才上面讲到模块的注册，那么方法是如何筛选的呢？注意下面的3个宏&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define RCT_EXPORT_METHOD(method) \
  RCT_REMAP_METHOD(, method)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#define RCT_REMAP_METHOD(js_name, method) \
  _RCT_EXTERN_REMAP_METHOD(js_name, method, NO) \
  - (void)method;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \
  + (const RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) { \
    static RCTMethodInfo config = {#js_name, #method, is_blocking_synchronous_method}; \
    return &amp;amp;config; \
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我们具体定义方法的时候并没有&lt;code&gt;-(void)&lt;/code&gt;字符串前缀，因为在预编译的时候，宏会帮我们加上这段字符（看第二个宏）。
第三个宏主要实现了字符串的拼接，&lt;code&gt;(__LINE__, __COUNTER__)&lt;/code&gt;的意思是为当前的宏生成一个唯一的tag（行数+一个数字），再和前面的&lt;code&gt;js_name&lt;/code&gt;连接，最后再和&lt;code&gt;__rct_export__&lt;/code&gt;连接，大概像这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void)__rct_export__8976699MethodName{
	//
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;其实&lt;strong&gt;COUNTER&lt;/strong&gt;是一个预定义的宏，这个值在编译过程中将从0开始计数，每次被调用时加1。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所有JSBridge传过来的参数都是&lt;code&gt;NSNumber&lt;/code&gt;,OCBridge会把它们转化成基本类型和字符串。上面在提到JSBridge传参数的时候会带一个callbackId，这时候OCBridge会根据这个Id生成一个callback，保存在内存中。&lt;/p&gt;

&lt;p&gt;这时候OC执行方法的调用，执行block。将参数和callbackId传到JSBridge，JSBridge根据Id找到之前缓存的JSCallback，进行调用。到这里就完成RN-Native-RN的一个闭环。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JS是怎么调用OC的呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实并不是JS调用OC，而是JS将消息放到一个消息队列里面MessageQueue，等OC来取，这里面还有很多问题值得讨论多长时间取一次；不来取怎么办。有待我们继续研究&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么OC和JS可以实现这种框架？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要实现这个机制需要语言有动态反射的特性(OC是一门动态语言，消息和消息的target等都是在运行时决定)，即可以通过类/方法名字符串找到对应的类/方法进行调用，没有这特性就做不了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;知识点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/09/run-loops-%E4%B8%80/&#34;&gt;RunLoop&lt;/a&gt;让JS线程常驻内存&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//RCTJSCExecutor

+ (void)runRunLoopThread
{
  @autoreleasepool {
    // copy thread name to pthread name
    pthread_setname_np([NSThread currentThread].name.UTF8String);

    // Set up a dummy runloop source to avoid spinning
    CFRunLoopSourceContext noSpinCtx = {0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
    CFRunLoopSourceRef noSpinSource = CFRunLoopSourceCreate(NULL, 0, &amp;amp;noSpinCtx);
    CFRunLoopAddSource(CFRunLoopGetCurrent(), noSpinSource, kCFRunLoopDefaultMode);
    CFRelease(noSpinSource);

    // run the run loop
    while (kCFRunLoopRunStopped != CFRunLoopRunInMode(kCFRunLoopDefaultMode, ((NSDate *)[NSDate distantFuture]).timeIntervalSinceReferenceDate, NO)) {
      RCTAssert(NO, @&amp;quot;not reached assertion&amp;quot;); // runloop spun. that&#39;s bad.
    }
  }
}

static NSThread *newJavaScriptThread(void)
{
  NSThread *javaScriptThread = [[NSThread alloc] initWithTarget:[RCTJSCExecutor class]
                                                       selector:@selector(runRunLoopThread)
                                                         object:nil];
  javaScriptThread.name = RCTJSCThreadName;
  javaScriptThread.qualityOfService = NSOperationQualityOfServiceUserInteractive;
  [javaScriptThread start];
  return javaScriptThread;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;通过动态&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/10/runtime%E4%B8%89-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/&#34;&gt;消息转发&lt;/a&gt;发送来自RN的消息,RCTModuleMethod&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//RCTModuleMethod

NSMethodSignature *typeSignature = [RCTConvert methodSignatureForSelector:selector];
NSInvocation *typeInvocation = [NSInvocation invocationWithMethodSignature:typeSignature];
typeInvocation.selector = selector;
typeInvocation.target = [RCTConvert class];

[argumentBlocks addObject:^(__unused RCTBridge *bridge, NSUInteger index, id json) {
void *returnValue = malloc(typeSignature.methodReturnLength);
[typeInvocation setArgument:&amp;amp;json atIndex:2];
[typeInvocation invoke];
[typeInvocation getReturnValue:returnValue];
[invocation setArgument:returnValue atIndex:index + 2];
free(returnValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;用Runtime拿到所有的类信息和方法&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//RCTBridge

void RCTVerifyAllModulesExported(NSArray *extraModules)
{
  // Check for unexported modules
  unsigned int classCount;
  Class *classes = objc_copyClassList(&amp;amp;classCount);

  NSMutableSet *moduleClasses = [NSMutableSet new];
  [moduleClasses addObjectsFromArray:RCTGetModuleClasses()];
  [moduleClasses addObjectsFromArray:[extraModules valueForKeyPath:@&amp;quot;class&amp;quot;]];

  for (unsigned int i = 0; i &amp;lt; classCount; i++) {
    Class cls = classes[i];
    Class superclass = cls;
    while (superclass) {
      if (class_conformsToProtocol(superclass, @protocol(RCTBridgeModule))) {
        if ([moduleClasses containsObject:cls]) {
          break;
        }

        // Verify it&#39;s not a super-class of one of our moduleClasses
        BOOL isModuleSuperClass = NO;
        for (Class moduleClass in moduleClasses) {
          if ([moduleClass isSubclassOfClass:cls]) {
            isModuleSuperClass = YES;
            break;
          }
        }
        if (isModuleSuperClass) {
          break;
        }

        RCTLogWarn(@&amp;quot;Class %@ was not exported. Did you forget to use RCT_EXPORT_MODULE()?&amp;quot;, cls);
        break;
      }
      superclass = class_getSuperclass(superclass);
    }
  }

  free(classes);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;GCD的大量使用，在初始化各个模块时(initModulesAndLoadSource和setupJSExecutorAndModuleConfig这两个group)对于线程依赖的控制&lt;code&gt;dispatch_group_enter();&lt;/code&gt;&lt;code&gt;dispatch_group_leave()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//RCTBatchedBridge

- (void)start
{
  [[NSNotificationCenter defaultCenter]
    postNotificationName:RCTJavaScriptWillStartLoadingNotification
    object:_parentBridge userInfo:@{@&amp;quot;bridge&amp;quot;: self}];

  RCT_PROFILE_BEGIN_EVENT(0, @&amp;quot;-[RCTBatchedBridge setUp]&amp;quot;, nil);

  dispatch_queue_t bridgeQueue = dispatch_queue_create(&amp;quot;com.facebook.react.RCTBridgeQueue&amp;quot;, DISPATCH_QUEUE_CONCURRENT);

  dispatch_group_t initModulesAndLoadSource = dispatch_group_create();

  // Asynchronously load source code
  dispatch_group_enter(initModulesAndLoadSource);
  __weak RCTBatchedBridge *weakSelf = self;
  __block NSData *sourceCode;
  [self loadSource:^(NSError *error, NSData *source, __unused int64_t sourceLength) {
    if (error) {
      RCTLogWarn(@&amp;quot;Failed to load source: %@&amp;quot;, error);
      dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf stopLoadingWithError:error];
      });
    }

    sourceCode = source;
    dispatch_group_leave(initModulesAndLoadSource);
  } onProgress:^(RCTLoadingProgress *progressData) {
#if RCT_DEV &amp;amp;&amp;amp; __has_include(&amp;quot;RCTDevLoadingView.h&amp;quot;)
    RCTDevLoadingView *loadingView = [weakSelf moduleForClass:[RCTDevLoadingView class]];
    [loadingView updateProgress:progressData];
#endif
  }];

  // Synchronously initialize all native modules that cannot be loaded lazily
  [self initModulesWithDispatchGroup:initModulesAndLoadSource];

  RCTPerformanceLogger *performanceLogger = self-&amp;gt;_performanceLogger;
  __block NSString *config;
  dispatch_group_enter(initModulesAndLoadSource);
  dispatch_async(bridgeQueue, ^{
    dispatch_group_t setupJSExecutorAndModuleConfig = dispatch_group_create();

    // Asynchronously initialize the JS executor
    dispatch_group_async(setupJSExecutorAndModuleConfig, bridgeQueue, ^{
      [performanceLogger markStartForTag:RCTPLJSCExecutorSetup];
      [weakSelf setUpExecutor];
      [performanceLogger markStopForTag:RCTPLJSCExecutorSetup];
    });

    // Asynchronously gather the module config
    dispatch_group_async(setupJSExecutorAndModuleConfig, bridgeQueue, ^{
      if (weakSelf.valid) {
        RCT_PROFILE_BEGIN_EVENT(0, @&amp;quot;-[RCTBatchedBridge moduleConfig&amp;quot;, nil);
        [performanceLogger markStartForTag:RCTPLNativeModulePrepareConfig];
        config = [weakSelf moduleConfig];
        [performanceLogger markStopForTag:RCTPLNativeModulePrepareConfig];
        RCT_PROFILE_END_EVENT(RCTProfileTagAlways, @&amp;quot;&amp;quot;);
      }
    });

    dispatch_group_notify(setupJSExecutorAndModuleConfig, bridgeQueue, ^{
      // We&#39;re not waiting for this to complete to leave dispatch group, since
      // injectJSONConfiguration and executeSourceCode will schedule operations
      // on the same queue anyway.
      [performanceLogger markStartForTag:RCTPLNativeModuleInjectConfig];
      [weakSelf injectJSONConfiguration:config onComplete:^(NSError *error) {
        [performanceLogger markStopForTag:RCTPLNativeModuleInjectConfig];
        if (error) {
          RCTLogWarn(@&amp;quot;Failed to inject config: %@&amp;quot;, error);
          dispatch_async(dispatch_get_main_queue(), ^{
            [weakSelf stopLoadingWithError:error];
          });
        }
      }];
      dispatch_group_leave(initModulesAndLoadSource);
    });
  });

  dispatch_group_notify(initModulesAndLoadSource, bridgeQueue, ^{
    RCTBatchedBridge *strongSelf = weakSelf;
    if (sourceCode &amp;amp;&amp;amp; strongSelf.loading) {
      [strongSelf executeSourceCode:sourceCode];
    }
  });

  RCT_PROFILE_END_EVENT(RCTProfileTagAlways, @&amp;quot;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;参考文档&#34;&gt;参考文档&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.cnbang.net/tech/2698/&#34;&gt;React Native通信机制详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://awhisper.github.io/2016/06/24/ReactNative%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/&#34;&gt;ReactNative iOS源码解析&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS多线程中的锁</title>
      <link>https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/</guid>
      <description>&lt;p&gt;涉及到多线程共享资源的情况下就避免不了资源竞争的问题，这时候就会用到各种锁，例如，&lt;code&gt;@synchronized&lt;/code&gt;、&lt;code&gt;NSLock&lt;/code&gt;、&lt;code&gt;OSSpinLock&lt;/code&gt;等等，虽然都是锁，但是锁的底层实现也不尽相同。大概可以分为：&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt;、&lt;span class=&#34;highlight-text blue&#34;&gt;自旋锁&lt;/span&gt;、&lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;、
&lt;span class=&#34;highlight-text blue&#34;&gt;读写锁&lt;/span&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	lock()//加锁
		doSomeThing()//临界区
	unlock()//解锁
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们锁的目的是在任何时刻最多只能有一个线程在修改资源，即在任何时刻只能有一个操作者保持锁。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;互斥锁&#34;&gt;互斥锁&lt;/h4&gt;

&lt;p&gt;通过一个全局变量来控制某个线程是否可以在某个时刻访问资源，该变量值大于0说明锁正在被使用。如果某个线程在尝试获得锁的是否发现已经被占用，线程挂起，等待锁的释放。&lt;/p&gt;

&lt;h4 id=&#34;自旋锁&#34;&gt;自旋锁&lt;/h4&gt;

&lt;p&gt;通过一个全局变量来控制某个线程是否可以在某个时刻访问资源，该变量值大于0说明锁正在被使用。如果某个线程在尝试获得锁的是否发现已经被占用，进入忙等状态，直到获得锁。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;以上可以看出，互斥锁和自旋锁很类似，稍有不同的地方在于当处于等待状态的时候各自的线程是怎么调度的。互斥锁即使时间片还未用尽，互斥锁也会直接挂起，这样就减少了CPU的开销。但是这时候会进行上下文（线程）的切换，也会带来一定的开销，适合I/O密集型操作。自旋锁，顾名思义，即使处于等待状态线程也不会挂起，一直处于忙等状态，类似于一直在进行一个whilte循环。这样增加了CPU的开销，所以对于需要保持上下文的任务必须要使用自旋锁，同时它是不能被抢占的（高优先级会抢占低优先级的进程），适用于CPU密集型的任务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;递归锁&#34;&gt;递归锁&lt;/h4&gt;

&lt;p&gt;对于递归调的时候我们不能简单的使用某个锁来锁住临界区，这样就会造成死锁，必须要使用递归锁。当加锁的时候，变量就会加1，解锁的时候开始减1，直到值为0的时候释放锁。&lt;/p&gt;

&lt;h4 id=&#34;读写锁&#34;&gt;读写锁&lt;/h4&gt;

&lt;p&gt;在上面提到的几种锁同一时刻只允许一个线程访问资源，在操作资源的时候，往往会出现一个线程在写操作，一个线程在读操作，这时候我们就会用到读写锁。
读写锁，它分为两种锁，读锁和写锁。当一个线程在读资源的时候，我们为其加上读锁，有另一个线程也要访问资源的时候我们需要再加一个读锁。当第三个线程需要进行写操作的时候我们就要加上一个写锁，但是这个写锁只有当读锁的使用者为0的时候才有效。也就是说我们必须等另外两个线程的读操作结束之后才能为其加上写锁。虽然互斥锁和自旋锁也能达到要求，但是读写锁无疑让控制更加精细，节省了CPU。&lt;/p&gt;

&lt;h4 id=&#34;ios中的锁&#34;&gt;iOS中的锁&lt;/h4&gt;

&lt;p&gt;大神ibireme的一篇博客&lt;a href=&#34;https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&#34;&gt;不再安全的 OSSpinLock&lt;/a&gt;对锁的性能做了简单的比较，大家可以看下。
&lt;img src=&#34;../../../来自ibireme的博客.png&#34; alt=&#34;来自ibireme的博客&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;osspinlock&#34;&gt;OSSpinLock&lt;/h6&gt;

&lt;span class=&#34;highlight-text blue&#34;&gt;自旋锁&lt;/span&gt;

&lt;p&gt;在此之前OSSpinLock是无疑性能最好的锁，在2015年的时候苹果工程师透露出了自旋锁的bug。具体问题大概如下：
系统维护了不同等级优先级的线程，高优先级的线程更容易获得系统资源。当一个低优先级的线程先获得锁之后，高优先级线程这时候也试图获取锁。这时候高优先级占据了大量的CPU，一直处于忙等状态。而低优先级的线程因为没有分配到足够的CPU一直无法完成任务，也就无法释放锁。这时候线程的调度就产生了优先级翻转。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//定义OSSpinLock锁
__block OSSpinLock theLock = OS_SPINLOCK_INIT;
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    OSSpinLockLock(&amp;amp;theLock); 
    NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;); 
    sleep(3); 
    NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;);
    OSSpinLockUnlock(&amp;amp;theLock);
});
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
     OSSpinLockLock(&amp;amp;theLock); 
     sleep(1); 
     NSLog(@&amp;quot;需要线程同步的操作2&amp;quot;); 
     OSSpinLockUnlock(&amp;amp;theLock);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;sychronized&#34;&gt;sychronized&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;iOS中性能最差的锁，但是写起来很开心，用起来简单，无论普通的锁还是递归锁都能应对。它牺牲了性能，保证了接口得友好。它会把每个传入的对象当作锁（这要求我们要保证对象的唯一性）并把他们放在一个哈希表中存储，通过这张表来管理锁。要注意的是，对象不能为&lt;strong&gt;nil&lt;/strong&gt;，这会让临界区不再是线程安全的。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;&lt;/p&gt;

&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;

&lt;pre&gt;&lt;code&gt;//需要加锁的对象
NSObject *obj = [[NSObject alloc] init];
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    @synchronized(obj) {
         NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;);
         sleep(3); 
         NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;);
     } 
  }); 
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    sleep(1); 
    @synchronized(obj) { 
         NSLog(@&amp;quot;需要线程同步的操作2&amp;quot;); 
     } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13438:385647] 需要线程同步的操作1 开始
ThreadTest[13438:385647] 需要线程同步的操作1 结束
ThreadTest[13438:385646] 需要线程同步的操作2
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nslock&#34;&gt;NSLock&lt;/h6&gt;

&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt;

&lt;p&gt;将C语言的pthread_mutex锁进行了一次封装，更加的OC。&lt;code&gt;NSLock&lt;/code&gt;提供了&lt;code&gt;tryLock&lt;/code&gt;和&lt;code&gt;lockBeforeDate:&lt;/code&gt;方法。在加锁前尝试加锁，如果返回无法获得锁，并不会阻塞线程会继续往下走，返回&lt;code&gt;NO&lt;/code&gt;,&lt;code&gt;lockBeforeDate:&lt;/code&gt;让你控制加锁的时间，在规定时间未获得锁返回&lt;code&gt;NO&lt;/code&gt;
&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//创建锁
NSLock *lock = [[NSLock alloc] init];
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    //[lock lock]; 
    //立即加锁
    [lock lockBeforeDate:[NSDate date]];
    NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;); 
    sleep(2); 
    NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;); 
    [lock unlock];
});
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    sleep(1);
    //尝试加锁
    if ([lock tryLock]) {
        //尝试获取锁，如果获取不到返回NO，不会阻塞该线程 
        NSLog(@&amp;quot;锁可用的操作&amp;quot;); 
        [lock unlock]; 
    }else{
        NSLog(@&amp;quot;锁不可用的操作&amp;quot;); 
    } 
    
    NSDate *date = [[NSDate alloc] initWithTimeIntervalSinceNow:3]; 
    if ([lock lockBeforeDate:date]) {
          //尝试在未来的3s内获取锁，并阻塞该线程，如果3s内获取不到恢复线程, 返回NO,不会阻塞该线程
          NSLog(@&amp;quot;没有超时，获得锁&amp;quot;); 
          [lock unlock]; 
     }else{ 
          NSLog(@&amp;quot;超时，没有获得锁&amp;quot;); 
     } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13541:394814] 需要线程同步的操作 1 开始
ThreadTest[13541:394804] 锁不可用的操作
ThreadTest[13541:394814] 需要线程同步的操作 1 结束
ThreadTest[13541:394804] 没有超时，获得锁
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nsrecursivelock&#34;&gt;NSRecursiveLock&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;实现和&lt;code&gt;NSLock&lt;/code&gt;差不多，只不过在底层NSLock使用的C的&lt;code&gt;pthread_mutex_lock&lt;/code&gt;,而&lt;code&gt;NSRecursiveLock&lt;/code&gt;使用的是&lt;code&gt;pthread_mutex_recursive&lt;/code&gt;。
它也同样提供了&lt;code&gt;- (BOOL)tryLock&lt;/code&gt;和&lt;code&gt;- (BOOL)lockBeforeDate:(NSDate *)limit&lt;/code&gt;方法&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//NSLock *lock = [[NSLock alloc] init];
NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    static void (^RecursiveMethod)(int); 
    RecursiveMethod = ^(int value) { 
        [lock lock]; 
        if (value &amp;gt; 0) { 
            NSLog(@&amp;quot;value = %d&amp;quot;, value); 
            sleep(1); 
            RecursiveMethod(value - 1); 
      } 
        [lock unlock]; 
    };
     RecursiveMethod(5); 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用&lt;code&gt;NSLock&lt;/code&gt;就会直接死锁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13593:400360] value = 5
ThreadTest[13593:400360] value = 4
ThreadTest[13593:400360] value = 4
ThreadTest[13593:400360] value = 2
ThreadTest[13593:400360] value = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nscondition&#34;&gt;NSCondition&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;条件变量&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;条件变量和信号量很类似，提供了阻塞、等待就绪、唤醒线程的方法。比如，生产-消费者模式。
在单线程执行中，我们经常会通过一个布尔值来控制某个方法或者值是否需要被执行和修改。在多线程的环境下，需要互斥锁来配合保证线程安全。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSConditionLock *lock = [[NSConditionLock alloc] init];
NSMutableArray *products = [NSMutableArray array]; 
NSInteger HAS_DATA = 1; 
NSInteger NO_DATA = 0;

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    while (1) { 
        [lock lockWhenCondition:NO_DATA]; 
        [products addObject:[[NSObject alloc] init]]; 
        NSLog(@&amp;quot;produce a product,总量:%zi&amp;quot;,products.count); 
        [lock unlockWithCondition:HAS_DATA]; 
        sleep(1); 
   } 
}); 

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    while (1) { 
         NSLog(@&amp;quot;wait for product&amp;quot;); 
         [lock lockWhenCondition:HAS_DATA]; 
         [products removeObjectAtIndex:0]; 
         NSLog(@&amp;quot;custome a product&amp;quot;); 
         [lock unlockWithCondition:NO_DATA]; 
    } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13645:406942] wait for product
ThreadTest[13645:406951] produce a product, 总量 :1
ThreadTest[13645:406942] custome a product
ThreadTest[13645:406942] wait for product
ThreadTest[13645:406951] produce a product, 总量:1
ThreadTest[13645:406942] custome a product
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有当&lt;code&gt;unlock&lt;/code&gt;和&lt;code&gt;lock&lt;/code&gt;的值一一对应才能唤醒线程，执行后续操作。&lt;/p&gt;

&lt;h5 id=&#34;dispatch-semaphore-信号&#34;&gt;dispatch_semaphore（信号）&lt;/h5&gt;

&lt;p&gt;通过信号来控制同时执行的线程个数，来达到枷锁的目的。只有当信号大于0的时候才能执行接下去的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//创建一个信号，同一时间只有一个线程可以执行，10即10个线程可以同时执行
dispatch_semaphore_create(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//等待信号&amp;gt;0的时候再执行下面的操作，并将信号减一
dispatch_semaphore_wait(self._lock, DISPATCH_TIME_FOREVER)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//信号+1
dispatch_semaphore_signal(self._lock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self._lock = dispatch_semaphore_create(1);
    self.array = [[NSMutableArray alloc] initWithObjects:@(1),@(2),@(3), nil];
    for (int i = 0; i &amp;lt; 100; i ++) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            dispatch_semaphore_wait(self._lock, DISPATCH_TIME_FOREVER);
            NSLog(@&amp;quot;-----%d&amp;quot;,i);
            sleep(2);
            dispatch_semaphore_signal(self._lock);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MultiThread[10894:436938] -----0
MultiThread[10894:436939] -----1
MultiThread[10894:436945] -----2
MultiThread[10894:436937] -----3
MultiThread[10894:436936] -----4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上除了第一个结果其他的每隔2s才打印出来&lt;/p&gt;

&lt;h4 id=&#34;参考资料&#34;&gt;参考资料&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&#34;&gt;不再安全的 OSSpinLock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://casatwy.com/pthreadde-ge-chong-tong-bu-ji-zhi.html&#34;&gt;pthread的各种同步机制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bestswifter.com/ios-lock/&#34;&gt;深入理解 iOS 开发中的锁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/4edf98a61483&#34;&gt;IOS 保证线程同步方式&amp;amp;性能对比&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lattera/glibc/blob/master/nptl/pthread_mutex_lock.c&#34;&gt;pthreadmutexlock.c 源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&#34;&gt;关于 @synchronized，这儿比你想知道的还要多&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_lock.html&#34;&gt;pthreadmutexlock&lt;/a&gt;
&lt;a href=&#34;https://developer.apple.
com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html&#34;&gt;ThreadSafety&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/62814/difference-between-binary-semaphore-and-mutex&#34;&gt;Difference between binary semaphore and mutex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/Javadino/article/details/2891388&#34;&gt;[Pthread] Linux中的线程同步机制(二)&amp;ndash;In Glibc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://android.googlesource.com/platform/external/pthreads/+/master/pthread_cond_wait.
c&#34;&gt;pthreadcondwait&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3513045/conditional-variable-vs-semaphore&#34;&gt;Conditional Variable vs Semaphore&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
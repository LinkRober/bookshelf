<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on 董二千</title>
    <link>https://linkrober.github.io/bookshelf/categories/development/index.xml</link>
    <description>Recent content in Development on 董二千</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://linkrober.github.io/bookshelf/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Run Loops基础概念篇二</title>
      <link>https://linkrober.github.io/bookshelf/2017/09/run-loops%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87%E4%BA%8C/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/09/run-loops%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87%E4%BA%8C/</guid>
      <description>&lt;h3 id=&#34;when-would-you-use-a-run-loop&#34;&gt;When Would You Use a Run Loop?&lt;/h3&gt;

&lt;p&gt;你唯一要使用run loop，就是当你要在application中创建线程的时候。你Application的主线程是架构很重要的一部分。所以，iOS系统为app的提供了&lt;i&gt;runloop&lt;/i&gt;代码，并自动开始。在iOS中运行Main loop作为app启动步骤的一部分。&lt;/p&gt;

&lt;p&gt;对于其他的线程，你需要考虑是否必须要使用&lt;i&gt;run loop&lt;/i&gt;。如果有需要，配置并自己启动它。你不需要在每个线程中都启用run loop。例如，如果你使用一个线程来执行一些很长时间的运行和已经准备好的任务，你可能要避免使用它。Run loop的目的主要是用来解决线程间的通信。例如，如果你打算做下面的事情，你需要开启一个run loop。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用port或者自定义input source来和其他线程通讯&lt;/li&gt;
&lt;li&gt;在线程中使用timer&lt;/li&gt;
&lt;li&gt;在Cocoa application使用&lt;code&gt;performSelector…&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;维持线程来执行周期性的任务

如果你选择使用run loop，配置和设置就是接下来要做的。纵观整个线程编码过程，你应该有一个明确的认识在什么时候退出线程，这比强制退出好很多。关于如何配置和退出run loop的信息在这&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5&#34;&gt;Using Run Loop Objects&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-run-loop-objects&#34;&gt;Using Run Loop Objects&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;run loop&lt;/i&gt;对象提供了主要的接口来添加input sources，timers，run-loop observers到&lt;i&gt;run loop&lt;/i&gt;中再运行它。每个线程有一个和它相关的run loop object。在Cocoa中，这个对象是&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop&#34;&gt;NSRunLoop&lt;/a&gt;的实例。在应用的底层，它是&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunloop&#34;&gt;CFRunLoopRef&lt;/a&gt;类的指针。&lt;/p&gt;

&lt;h3 id=&#34;getting-a-run-loop-object&#34;&gt;Getting a Run Loop Object&lt;/h3&gt;

&lt;p&gt;获取当前线程的runloop对象，你使用下面的一种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在Cocoa Application中，使用&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop/1412291-current&#34;&gt;NSRunLoop&lt;/a&gt;的类方法&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop&#34;&gt;currentRunLoop&lt;/a&gt;，来获取&lt;code&gt;NSRunLoop&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/1542428-cfrunloopgetcurrent&#34;&gt;CFRunLoopGetCurrent&lt;/a&gt;方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尽管它们不是无缝桥接的类，当需要的时候你可以从&lt;code&gt;NSRunLoop&lt;/code&gt;对象获得一个&lt;code&gt;CFRunLoopRef&lt;/code&gt;指针。&lt;code&gt;NSRunLoop&lt;/code&gt;类定义了一个&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsrunloop/1410140-getcfrunloop&#34;&gt;getCFRunLoop&lt;/a&gt;方法，它返回了一个&lt;code&gt;CFRunLoopRef&lt;/code&gt;类型，这你可以传入到Core Foundation中。因为两个对象指向同一个run loop，需要的时候你可以混合使用。&lt;/p&gt;

&lt;h3 id=&#34;configuring-the-run-loop&#34;&gt;Configuring the Run Loop&lt;/h3&gt;

&lt;p&gt;当你在自定义线程中跑run loop的时候，你至少添加一个input source或timer到run loop中，如果一个*run loop*没有任何source来监听，当你尝试运行它的时候，它会立即退出。如何向run loop中添加一个source，请看这里&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW7&#34;&gt;Configuring Run Loop Sources&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;除了装载sources，你也可以装载run loop observers，使用它们来监听run loop的执行步骤。为了装载run loop observer，你创建了一个&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunloopobserver&#34;&gt;CFRunLoopObserverRef&lt;/a&gt;指针，并且使用&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/1542504-cfrunloopaddobserver&#34;&gt;CFRunLoopAddObserver&lt;/a&gt;方法并把它添加到你的run loop中。Run loop observer必须要使用Core Foundation来创建。&lt;/p&gt;

&lt;p&gt;下面展示了在一个线程中，添加一个run loop observer到run loop中的主要的代码部分。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)threadMain
{
	//The application use garbage collection,so no autorelease pool is needed.
	NSRunLoop *myRunLoop = [NSRunLoop currentRunLoop];	
	//Create a run loop observer and attach it to the run loop.
	CFRunLoopObserverContent context = {0,self,NULL,NULL,NULL};
	CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,kCFRunLoopAllActivities,YES,0,&amp;amp;myRunLoopObserver,&amp;amp;context);
	if(observer)
	{
		CFRunLoopRef cfLoop = [myRunLoop getCFRunLoop];
		CFRunLoopAddObserver(cfLoop,observer,kCFRunLoopDefaultMode);		
	}	
	//Create and schedule the timer.
		[NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(doFireTimer:) userInfo:nil repeats:YES];
		NSInteger loopCount = 10;
	do 
	{
		//Run the run loop 10 times to let the timer fire
		[myRunLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1]];
		loopCount--;
	}
	while(loopCount);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当为一个活跃的线程配置run loop的时候，至少添加一个input source到接受的消息。尽管你能够只需要通过一个timer来启动run loop中，但是，一旦timer触发之后，它就会无效的，这会引起run loop的退出。传入一个repeat的timer可以保持run loop运行很长一段时间。但是将会周期性的调用触发的timer来唤醒你的线程。这是维持线程中&lt;i&gt;run loop&lt;/i&gt;的另一种方式，一个input source等待事件的到达，让你的线程处于睡眠中，直到它被唤醒。&lt;/p&gt;

&lt;h3 id=&#34;starting-the-run-loop&#34;&gt;Starting the Run Loop&lt;/h3&gt;

&lt;p&gt;一个run loop必须装载至少一个input source或者timer来。如果没有，run loop立即退出。
下面有几种办法开启一个run loop。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无条件的启动run loop&lt;/li&gt;
&lt;li&gt;设置一个超时时间启动run loop&lt;/li&gt;
&lt;li&gt;通过一种特殊的模式启动run loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无条件的启动&lt;i&gt;runloop&lt;/i&gt;是最简单的，但是这也是最不推荐的一种方式。无条件的启动你的runloop，把线程作为&lt;i&gt;runloop&lt;/i&gt;的一个参数。这种方式对runloop的控制权很小。你可以添加或移除input source和timers，唯一停止&lt;i&gt;runloop&lt;/i&gt;的方式就是kill。这种启动方式没有办法在自定义mode。&lt;/p&gt;

&lt;p&gt;除了无条件的启动一个runloop，使用time out value来开始一个&lt;i&gt;runloop&lt;/i&gt;更好。当你使用time out value，runloop运行直到事件到达或者超时。如果事件抵达，事件会被派发到一个handler来处理，然后run loop退出。你的code又能够重新开始runloop去处理下一个事件。如果超时，你可以简单的重启runloop，或者利用这段时间做任何需要的事。&lt;/p&gt;

&lt;p&gt;除了time out value，你也可以使用一个指定的mode来运行runloop。Modes和timeout value并不是互斥的。当运行runloop的时候也可以同时使用它们。Modes限制了source的type。详细被描述在&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW12&#34;&gt;Run Loop Modes&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下面的code主要部分展示了runloop的基本结构。本质上，你添加你的input source和timer到runloop。重复调用其中一个routine来开始一个&lt;i&gt;run loop&lt;/i&gt;。每次run loop routine 返回的时，你检查&lt;i&gt;run lop&lt;/i&gt;是否满足某些条件导致退出thread。例子中使用Core Foundation的run loop routines，以至于它能检查返回的结果并检测run loop为什么退出。你也能使用&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop&#34;&gt;NSRunLoop&lt;/a&gt;的方法以一种相似的方式来运行runloop，如果你正在使用Cocoa框架中的NSRunLoop，它是不需要检查return value的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)skeletonThreadMain {
	//Set up an autorelease pool here if not using garbage collection.
	BOOL done = NO;
	//Add your sources or timer to the run loop and do any other setup
	do
	{
		//Start the run loop but return after earch source is handled
		SInt32 result = CFRunLoopRunInMode(kCFRunLoopDefaultMode,10,YES)
		
		//If a source explicitly stopped the run loop,or if there no sources or timers,go head and exit.
		if ((result == kCFRunLoopRunStopped) || (result == kCFRunLoopRunFinished))
		done = YES;
		
		//Check for any other exit conditions here and set the done variable as needed
	}
	while(!done);
	//Clean up code here. Be sure to release any allocated autorelease pools.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;递归运行run loop也是可能的。换句话说，你能够调用&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/1542011-cfrunlooprun&#34;&gt;CFRunLoopRun&lt;/a&gt;、&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/1541988-cfrunloopruninmode&#34;&gt;CFRunLoopRunInMode&lt;/a&gt;,任何&lt;code&gt;NSRunLoop&lt;/code&gt;的方法，从input source 或者 timer的handler routine开始runloop。当这样做的时候，你可以使用你想要的mode来运行内嵌的runloop。包括被outer run loop正在使用的mode。&lt;/p&gt;

&lt;h3 id=&#34;exiting-the-run-loop&#34;&gt;Exiting the Run Loop&lt;/h3&gt;

&lt;p&gt;有两种办法使runloop在处理事件之前退出。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为&lt;i&gt;Runloop&lt;/i&gt;配置一个time out时间&lt;/li&gt;
&lt;li&gt;主动告诉&lt;i&gt;Runloop&lt;/i&gt;停止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用time out时间是一种比较好的选择。在退出之前，指定一个time out时间让runloop完成所有的任务，包括向&lt;i&gt;runloop observer&lt;/i&gt;发送通知。&lt;/p&gt;

&lt;p&gt;使用&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/1541796-cfrunloopstop&#34;&gt;CFRunLoopStop&lt;/a&gt;方法停止一个&lt;i&gt;runloop&lt;/i&gt;，产生一个类似于超时的结果。使用runloop发送完剩下的runloop通知然后退出。唯一不同的就是只有当你无条件的启动&lt;i&gt;Runloop&lt;/i&gt;的时候才能使用这种方式退出。&lt;/p&gt;

&lt;p&gt;尽管移除runloop的input source和timers可以引起runloop的退出，但是这不是一种稳定的方式。一些系统一般添加input source到run loop来处理需要的事件。因为你的code不需要关心这些input source。所以你不能移除input sources，让&lt;i&gt;run loop&lt;/i&gt;退出。&lt;/p&gt;

&lt;h3 id=&#34;thread-safety-and-run-loop-objects&#34;&gt;Thread Safety and Run Loop Objects&lt;/h3&gt;

&lt;p&gt;线程安全取决于你使用操作&lt;i&gt;runloop&lt;/i&gt;的API。在Core Foundation中的方法一般是线程安全的，可以被任何其他线程调用。如果你正在执行操作，这些操作改变了runloop的配置。无论什么时候，这样做任然是一个很好的实践。&lt;/p&gt;

&lt;p&gt;Cocoa的&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop&#34;&gt;NSRunLoop&lt;/a&gt;类。Cocoa的NSRunLoop和Core Foundation不一样，不是线程安全的。如果你使用&lt;code&gt;NSRunLoop&lt;/code&gt;类来修改你的runloop，你应该在原来的线程中做这些操作。在其他线程添加一个input source或者timer到原来runloop可能引起crash，或者一个意想不到的行为。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Run Loops基础概念篇一</title>
      <link>https://linkrober.github.io/bookshelf/2017/09/run-loops%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87%E4%B8%80/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/09/run-loops%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;run-loops&#34;&gt;Run Loops&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;下面会用一些陌生的或者容易让人混淆的字符，我们先来统一概念再继续，这样能够让你更加愉快的阅读：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;runloop:&lt;/strong&gt;iOS一个底层机制的专业术语。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run loop:&lt;/strong&gt;一种运行的循环。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handler:&lt;/strong&gt;指&lt;code&gt;handlePort:&lt;/code&gt;、&lt;code&gt;customSrc:&lt;/code&gt;、&lt;code&gt;mySelector:&lt;/code&gt;、&lt;code&gt;timerFired:&lt;/code&gt;，指开发者希望当进入run loop的时候要执行的操作&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run-loop observer：&lt;/strong&gt;观察runloop行为的观察者&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run-loop mode：&lt;/strong&gt;每个runloop都要指定一种mode，一种mode可以对应多个input source&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;runloop object：&lt;/strong&gt;runloop相关的对象，这里分Cocoa和CoreFoundation中的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;i&gt;Runloop&lt;/i&gt;是线程架构相关的一部分，是事件处理的循环。你可以用它来安排循环执行任务，协调相关的事件（kCFRunLoopEntry、kCFRunLoopExit等）。
用几行示意代码来展示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function loop() {
    initialize();
    do {
        var message = get_next_message();
        process_message(message);
    } while (message != quit);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;Runloop&lt;/i&gt;实际上是一个管理要处理的事件和消息的对象，并为开发者提供了一个入口来执行run loop的逻辑部分。一直处于类似于“接受消息&amp;ndash;&amp;gt;等待&amp;ndash;&amp;gt;处理”这样的一个循环汇总

&amp;gt;&lt;i&gt;Runloop&lt;/i&gt;的目的：一般我们自己写的线程在执行完相应的任务就会退出，而runloop&lt;strong&gt;让你的线程在有事干的时候干活，没事干的时候休息，节省系统资源&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;i&gt;unloop&lt;/i&gt;的管理不全是自动的，&lt;strong&gt;对于自己的线程，必须要自己添加代码，并在适当的时候启动Run loop&lt;/strong&gt;来响应接受的事件。
Cocoa和Core Foundation提供了*runloop objects*来帮助你配置和管理线程的run loop。你的Application不需要自己创建这些对象(像alloc、init这些方法)。每个thread，包括Application的主线程，都已经有runloop object，有方法可以直接获取这这些对象，类似于这样的&lt;code&gt;[NSRunLoop currentRunLoop]&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef
static CFMutableDictionaryRef loopsDic;
/// 访问 loopsDic 时的锁
static CFSpinLock_t loopsLock;
 
/// 获取一个 pthread 对应的 RunLoop。
CFRunLoopRef _CFRunLoopGet(pthread_t thread) {
    OSSpinLockLock(&amp;amp;loopsLock);
    
    if (!loopsDic) {
        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。
        loopsDic = CFDictionaryCreateMutable();
        CFRunLoopRef mainLoop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);
    }
    
    /// 直接从 Dictionary 里获取。
    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));
    
    if (!loop) {
        /// 取不到时，创建一个
        loop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, thread, loop);
        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。
        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);
    }
    
    OSSpinLockUnLock(&amp;amp;loopsLock);
    return loop;
}
 
CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGet(pthread_main_thread_np());
}
 
CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGet(pthread_self());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;苹果提供了&lt;code&gt;CFRunLoopGetMain&lt;/code&gt; 、&lt;code&gt;CFRunLoopGetMain&lt;/code&gt;这两个方法来创建&lt;i&gt;runloop&lt;/i&gt;，如果它不被调用，线程中就不会有runloop。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cocoa中的&lt;code&gt;NSRunLoop&lt;/code&gt;,和Core Foundation中的&lt;code&gt;CFRunLoopRef&lt;/code&gt;等Run loop相关的类。它们的方法一般也是一一对应的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;唯一不同的是：你自己创建的线程需要明确的代码来让runloop跑起来，比如&lt;code&gt;[runLoop run]&lt;/code&gt;这样的方法。但是对于主线程的&lt;i&gt;runloop&lt;/i&gt;，系统会在App起来的时候自动设置并跑主线程里面的&lt;i&gt;runloop&lt;/i&gt;，这是Application运行起来的一部分。&lt;/p&gt;

&lt;h3 id=&#34;anatomy-of-run-loop-剖析runloop&#34;&gt;Anatomy of Run Loop（剖析runloop）&lt;/h3&gt;

&lt;p&gt;“一个运行的循环”，看它名字的意思就能猜得到。它会循环不断的进入线程，在&lt;i&gt;runloop&lt;/i&gt;进入之后做一些自己的事情。你的code提供了状态的控制用来实现&lt;i&gt;runloop&lt;/i&gt;真正的循环部分。—— 换句话说，你的code提供&lt;code&gt;while&lt;/code&gt;或&lt;code&gt;for&lt;/code&gt;循环来驱动run loop。在你的循环中，你使用一个&lt;i&gt;runloop object&lt;/i&gt;来运行事件处理的code，&lt;i&gt;runloop&lt;/i&gt;接受事件并调用你已经准备好的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 这里doFireTimer方法就是你要处理的事件的code，&amp;lt;i&amp;gt;runloop&amp;lt;/i&amp;gt;在从sleep状态被wakeup之后会执行改方法。
*/
[NSTimer scheduledTimerWithTimeInterval:0.016
                                     target:self
                                   selector:@selector(doFireTimer:)
                                   userInfo:nil
                                    repeats:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面我们提到&lt;strong&gt;“你使用一个runloop object来运行事件处理的code”&lt;/strong&gt;，这里的事件是从哪里来呢？即事件源是什么？&lt;/p&gt;

&lt;p&gt;事件源分两类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Input source&lt;/i&gt;所驱动的异步事件，一般它用来从一个线程向另一个线程发送事件或者从一个Application向另一个Application。&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Timer sources&lt;/i&gt;所驱动的同步事件，事件发生在一个已经预先设定好的时间，或者在重复的事件间隔发生。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当事件到达的时候，这两种source会按照系统指定的步骤来处理事件。&lt;/p&gt;

&lt;p&gt;下图展示了一个&lt;i&gt;runloop&lt;/i&gt;的概念结构和各种不同的sources。Input sources发送一个异步的事件来执行相对应的handler（例如，图中的&lt;code&gt;hanlePort&lt;/code&gt;、&lt;code&gt;mySelector&lt;/code&gt;等），并通过&lt;code&gt;runUntilDate:&lt;/code&gt;方法（调用thread相关的&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloop&#34;&gt;NSRunLoop&lt;/a&gt;对象）来退出。Timer sources发送事件到runloop的handler，但不会引起runloop的退出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-2f8e40f8ce0f82c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;runloop-1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;除了处理输入源对应的handler，&lt;i&gt;Runloop&lt;/i&gt;生成关于run loop行为的通知。注册&lt;i&gt;run-loop&lt;/i&gt; 的observer接受这些通知。使用它们在thread上做一些其他的操作。你可以在你的线程中使用Core Foundation里面的类来创建&lt;i&gt;run-loop observer&lt;/i&gt;。&lt;/p&gt;

&lt;h3 id=&#34;run-loop-modes&#34;&gt;Run Loop Modes&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;run-loop mode&lt;/i&gt;是被监听的&lt;i&gt;Input sources&lt;/i&gt;和&lt;i&gt;Timers&lt;/i&gt;的集合，同时还是被通知的&lt;i&gt;run-loop observer&lt;/i&gt;的集合，大家可能比较疑惑怎么是两种东西的集合（source和obaserver），下面是我的理解，从代码出发：
&lt;code&gt;[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];&lt;/code&gt;
&lt;strong&gt;线程的每个Source都要指定一个Mode，这里是NSDefaultRunLoopMode&lt;/strong&gt;
&lt;code&gt;CFRunLoopAddObserver(cfLoop, observer, kCFRunLoopCommonModes);&lt;/code&gt;
&lt;strong&gt;观察者是观察该Runloop的某些Modes，kCFRunLoopCommonModes是mode的集合，每种mode都可以添加到Common中&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每次你运行你的&lt;i&gt;runloop&lt;/i&gt;的时候，要指定一个具体的mode在&lt;i&gt;runloop&lt;/i&gt;里面跑。在进入&lt;i&gt;runloop&lt;/i&gt;的时候，只有和这个mode相关联的source能被对应的&lt;i&gt;run-loop observer&lt;/i&gt;监听到，被允许向它们传递事件。而其他mode相关的source会一直等待，直到&lt;i&gt;run-loop mode&lt;/i&gt;和source指定的mode相对应的时候才开始传递事件。&lt;/p&gt;

&lt;p&gt;在你的代码中，你通过具体的名称来定义mode(&lt;code&gt;kCFRunLoopDefaultMode&lt;/code&gt;、&lt;code&gt;kCFRunLoopCommonModes&lt;/code&gt;等)。Cocoa和Core Foundation都定义了默认的mode和一些经常使用的mode。&lt;/p&gt;

&lt;p&gt;你也能通过简单的字符串来自定义自己的mode。尽管custom mode定义起来好像很随意，但使用起来可不能随意啊。对于任何mode，你必须要确保添加一个或者更多的&lt;i&gt;sources&lt;/i&gt;，&lt;i&gt;timers&lt;/i&gt;或者&lt;i&gt;run-loop observer&lt;/i&gt;，如果你没有做到，&lt;i&gt;run loop&lt;/i&gt;就会直接退出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如果没有第二行代码，runloop会自动退出
NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
[runLoop run];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以使用mode过滤掉不想要的source。大多数情况下，你只需要用系统定义的“default”mode来运行你的runloop。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note:Mode是根据事件source来匹配的而不是根据事件的type。例如，你不可以使用鼠标的按下事件或者键盘按下事件来匹配mode。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是一些系统定义好的Modes&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Mode&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsdefaultrunloopmode&#34;&gt;NSDefaultRunLoopMode&lt;/a&gt;(Cocoa)&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/kcfrunloopdefaultmode&#34;&gt;kCFRunLoopDefaultMode&lt;/a&gt;(Core Foundation)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Connection&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsconnectionreplymode&#34;&gt;NSConnectionReplyMode&lt;/a&gt;(Cocoa)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Modal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsmodalpanelrunloopmode&#34;&gt;NSModalPanelRunLoopMode&lt;/a&gt;(Cocoa)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Event tracking&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloopmode/1428765-eventtrackingrunloopmode&#34;&gt;NSEventTrackingRunLoopMode&lt;/a&gt;(Cocoa)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Common modes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/runloopmode/1408609-commonmodes&#34;&gt;NSRunLoopCommonModes&lt;/a&gt;(Cocoa)&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/kcfrunloopcommonmodes&#34;&gt;kCFRunLoopCommonModes&lt;/a&gt;(Core Foundation)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;input-sources&#34;&gt;Input Sources&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Input source&lt;/i&gt;通过异步的方式向你的线程传递事件。事件的源取决于&lt;i&gt;input source&lt;/i&gt;的类型。&lt;i&gt;input source&lt;/i&gt;大概分为两类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Port-based port&lt;/strong&gt;
&lt;i&gt;Port-based port&lt;/i&gt;监控你application的Mach port。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Custom input source&lt;/strong&gt;
&lt;i&gt;Custom input source&lt;/i&gt;监控自定义的事件source。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;i&gt;runloop&lt;/i&gt;不关心是哪种&lt;i&gt;input source&lt;/i&gt;，这两种*input sources*系统都有实现。这两个&lt;i&gt;input source&lt;/i&gt;唯一的不同就是它们如何发送信号。&lt;i&gt;Port-based port&lt;/i&gt;通过内核自动发送信号。&lt;i&gt;Custom input source&lt;/i&gt;只能从其他线程接受手动发送的信号。&lt;/p&gt;

&lt;p&gt;当你创建一个&lt;i&gt;input source&lt;/i&gt;，你把它赋值到&lt;i&gt;runloop&lt;/i&gt;的mode。mode会影响被监控的input source。大多数情况，你在&lt;code&gt;NSDefaultRunLoopMode&lt;/code&gt;下运行&lt;i&gt;runloop&lt;/i&gt;，但是你也可以指定自定义的mode。如果一个&lt;i&gt;input source&lt;/i&gt;不在当前被监控的mode中，它产生的一些事件将会被暂时的放在一边，直到下一个run loop的mode和input source的mode相同才开始处理这个input source产生的事件。&lt;/p&gt;

&lt;p&gt;接下去的部分描述了一些input source&lt;/p&gt;

&lt;h5 id=&#34;port-based-sources&#34;&gt;Port-Based Sources&lt;/h5&gt;

&lt;p&gt;Cocoa和Core Foundation通过提供端口相关的对象和方法来创建&lt;i&gt;Port-Based Source&lt;/i&gt;。例如，在Cocoa中，你没必要直接创建input source。你使用&lt;code&gt;NSPort&lt;/code&gt;的方法&lt;code&gt;[NSPort port]&lt;/code&gt;，添加port到run loop中。Port object会为你创建和配置所需的&lt;i&gt;Port-Based Sources&lt;/i&gt;。&lt;/p&gt;

&lt;p&gt;在 Core Foundation中，你必须要自己创建port和它的run loop source。用 &lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfmachport&#34;&gt;CFMachPortRef&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfmessageportref&#34;&gt;CFMessagePortRef&lt;/a&gt;,  &lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfsockeref&#34;&gt;CFSocketRef&lt;/a&gt;这些不透明指针创建相应的对象。&lt;/p&gt;

&lt;p&gt;如何配置和设置自定义的&lt;i&gt;Port-Based Sources&lt;/i&gt;，请看&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-131281&#34;&gt; Configuring a Port-Based Input Source&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;custom-input-sources-core-foundation&#34;&gt;Custom Input Sources（Core Foundation）&lt;/h5&gt;

&lt;p&gt;为了创建自定义的input source，你必须使用Core Foundation中的&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunloopsource&#34;&gt;CFRunLoopSourceRef&lt;/a&gt;不透明类相关的方法。你需要在回调方法中配置这个Custom Input Sources。Core Foundation会在配置Custom Input Sources、处理输入事件和当source要从runloop中移除的时候调用这几个回调。&lt;/p&gt;

&lt;p&gt;对于如何创建一个custom input source请看这里&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW3&#34;&gt;Defining a Custom Input Source&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;cocoa-perform-selector-sources-cocoa&#34;&gt;Cocoa Perform Selector Sources（Cocoa）&lt;/h5&gt;

&lt;p&gt;除了&lt;i&gt;Port-Based Sources&lt;/i&gt;，Cocoa定义了一个&lt;i&gt;custom input source&lt;/i&gt;，这允许你向任何线程中发送选择子。和&lt;i&gt;Port-Based Sources&lt;/i&gt;一样，执行选择子selector的请求在同一个线程上是连续的，当多个方法同时向线程发送请求的时候可能会导致同步的问题。和&lt;i&gt;Port-Based Sources&lt;/i&gt;不同的是：一个&lt;i&gt;perform selector source&lt;/i&gt;执行完它的selector，它自己会从runloop中移除。&lt;/p&gt;

&lt;p&gt;当向另一个线程发送selector请求时，目标线程必须有一个active的&lt;i&gt;runloop&lt;/i&gt;。这意味着你必须等待，直到该线程中runloop的状态变成 active。因为主线程会自己开始一个&lt;i&gt;runloop&lt;/i&gt;，只要系统一调用Application delegate的&lt;code&gt;applicationDidFinishLaunching:&lt;/code&gt;（这时候系统的runloop就创建出来了），你就可以向主线程发送selector请求。每次&lt;i&gt;Runloop&lt;/i&gt;会处理所有队列的selector请求，而不是只处理一个队列的请求。下面列出了一些perform方法&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Methods&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1414900-performselector&#34;&gt;performSelectorOnMainThread:withObject:waitUntilDone:&lt;/a&gt;、&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1411637-performselector&#34;&gt;performSelectorOnMainThread:withObject:waitUntilDone:modes:&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1414476-perform&#34;&gt;performSelector:onThread:withObject:waitUntilDone:&lt;/a&gt;、&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1417922-perform&#34;&gt;performSelector:onThread:withObject:waitUntilDone:modes:&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1416176-perform&#34;&gt;performSelector:withObject:afterDelay:&lt;/a&gt;、&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1415652-perform&#34;&gt;performSelector:withObject:afterDelay:inModes:&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1417611-cancelpreviousperformrequests&#34;&gt;cancelPreviousPerformRequestsWithTarget:&lt;/a&gt;、&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject/1410849-cancelpreviousperformrequests&#34;&gt;cancelPreviousPerformRequestsWithTarget:selector:object:&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;timer-sources&#34;&gt;Timer Sources&lt;/h5&gt;

&lt;p&gt;&lt;i&gt;Timer sources&lt;/i&gt;会在将来的某个时间，发送同步事件到你的当前的线程。Timer是线程用来通知它自己的一种方式。
尽管它是基于时间的通知，一个timer并不能保证在准确的时间点执行事件。和其他的&lt;i&gt;Input source&lt;/i&gt;一样，Timer和你&lt;i&gt;run loop&lt;/i&gt;指定的mode有关系。如果Timer的mode不是你当前runloop正在跑的mode，它是不会被触发的，直到你的&lt;i&gt;runloop&lt;/i&gt;运行的的mode是你的Timer所支持的。类似的，如果一个Timer被触发，但是当runloop在执行Handler，Timer将会一直等待，直到下次再次进入runloop的时候才会执行。如果这个&lt;i&gt;runloop&lt;/i&gt;不再跑了，这个Timer将永远不会被触发。&lt;/p&gt;

&lt;p&gt;你可以配置Timer来运行事件，一次或者不停重复。一个重复的Timer会基于设定好的触发时间，自动重新安排它自己到run loop中，但这个时间间隔并不一定准确。例如，如果一个Timer在一个特定时间被触发，每5秒重复一次。即使实际的触发时间被延迟了，被安排的触发时间总落在5秒的延迟时间间隔之内。如果触发时间被延迟太多，会导致它错过了一次或者更多被安排到run loop的机会。在一个不恰当的时机被触发之后，Timer则会被安排到下一次run loop。
关于配置timer sources的更多信息，请看&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW6&#34;&gt;Configuring Timer Sources&lt;/a&gt;。更多相关信息&lt;a href=&#34;https://developer.apple.com/documentation/foundation/timer&#34;&gt;NSTimer Class Reference&lt;/a&gt;或&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunlooptimer-rhk&#34;&gt;CFRunLoopTimer Reference&lt;/a&gt;。&lt;/p&gt;

&lt;h5 id=&#34;run-loop-observers&#34;&gt;Run Loop Observers&lt;/h5&gt;

&lt;p&gt;一般的source是在一个异步或者同步的事件发生的时候被触发的，而&lt;i&gt;run-loop observer&lt;/i&gt;是在&lt;i&gt;runloop&lt;/i&gt;它执行的时候触发的。你可以通过&lt;i&gt;run-loop observer&lt;/i&gt;来准备一些线程待处理的事件，或者在线程sleep之前，在线程中做一些事。&lt;i&gt;run-loop observers&lt;/i&gt;可以观察到下面的一些事件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;进入&lt;i&gt;runloop&lt;/i&gt;的时候&lt;/li&gt;
&lt;li&gt;当&lt;i&gt;runloop&lt;/i&gt;将要处理timer的时候&lt;/li&gt;
&lt;li&gt;当&lt;i&gt;runloop&lt;/i&gt;将要处理input source的时候&lt;/li&gt;
&lt;li&gt;当&lt;i&gt;runloop&lt;/i&gt;将要sleep的时候&lt;/li&gt;
&lt;li&gt;当&lt;i&gt;runloop&lt;/i&gt;已经醒来，还没有开始处理event的时候&lt;/li&gt;
&lt;li&gt;当&lt;i&gt;runloop&lt;/i&gt;退出的时候&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以使用Core Foundation向Application添加&lt;i&gt;run-loop observer&lt;/i&gt;。为了创建一个&lt;i&gt;run_loop observer&lt;/i&gt;，你需要使用&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunloopobserver&#34;&gt;CFRunLoopObserverRef&lt;/a&gt;类。这个类会追踪你自定义callback函数、你感兴趣的&lt;code&gt;CFRunLoopActivity&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;和Timer相似，&lt;i&gt;run-loop observer&lt;/i&gt;可以只运行一次，或者不停重复。只运行一次的&lt;i&gt;run-loop observer&lt;/i&gt;在一次run loop之后就会从&lt;i&gt;runloop&lt;/i&gt;中移除。当你创建&lt;i&gt;run-loop observer&lt;/i&gt;的时候，你要决定r是一次还是不停重复。&lt;/p&gt;

&lt;p&gt;对于如何创建一个&lt;i&gt;run-loop observer&lt;/i&gt;的例子，看&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW18&#34;&gt; Configuring the Run Loop&lt;/a&gt;,更多相关信息&lt;a href=&#34;https://developer.apple.com/documentation/corefoundation/cfrunloopobserver-ri3&#34;&gt;CFRunLoopObserver Reference&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-run-loop-sequence-of-events&#34;&gt;The Run Loop Sequence of Events&lt;/h5&gt;

&lt;p&gt;每次你运行&lt;i&gt;runloop&lt;/i&gt;，你线程的&lt;i&gt;runloop&lt;/i&gt;会处理之前挂起的事件，并且向*run-loop observer*发送通知。&lt;i&gt;runloop&lt;/i&gt;执行的顺序如下面所列出的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通知&lt;i&gt;run-loop observer&lt;/i&gt;，进入&lt;i&gt;runloop&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;通知&lt;i&gt;run-loop observer&lt;/i&gt;，已经准备好的Timer将要触发&lt;/li&gt;
&lt;li&gt;通知&lt;i&gt;run-loop observer&lt;/i&gt;，以及准备好的*no-port-based input source*将要被触发&lt;/li&gt;
&lt;li&gt;触发&lt;i&gt;no-port-based input source&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;如果一个&lt;i&gt;port-based input source&lt;/i&gt;准备好等待触发，立即处理该事件，再从第九步开始执行&lt;/li&gt;
&lt;li&gt;通知&lt;i&gt;run-loop observer&lt;/i&gt;，线程将要sleep&lt;/li&gt;
&lt;li&gt;线程sleep直到下面的事件发生：

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;port-based input source&lt;/i&gt;事件到达&lt;/li&gt;
&lt;li&gt;一个Timer触发了&lt;/li&gt;
&lt;li&gt;&lt;i&gt;runloop&lt;/i&gt;超时了&lt;/li&gt;
&lt;li&gt;&lt;i&gt;runloop&lt;/i&gt;被手动唤醒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通知&lt;i&gt;run-loop observer&lt;/i&gt;，线程将要被唤醒&lt;/li&gt;

&lt;li&gt;&lt;p&gt;处理挂起的事件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果一个用户定义的timer触发了，处理相关事件，重新开始循环，回到第二步继续执行&lt;/li&gt;
&lt;li&gt;如果&lt;i&gt;input source&lt;/i&gt;触发，传递相应的事件&lt;/li&gt;
&lt;li&gt;如果&lt;i&gt;runloop*&lt;/i&gt;明确的被唤醒，但是还没有超时，重新开始循环，回到第二步继续执行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通知&lt;i&gt;run_loop observer&lt;/i&gt;，&lt;i&gt;runloop&lt;/i&gt;已经退出&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt;no-port-based input source就是我们常说的&lt;strong&gt;source0&lt;/strong&gt;，port-based input source就是&lt;strong&gt;source1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为Timer和input source的通知是在事件被触发之前，所以这之间有一个过渡时间。如果你要在这个时间做一些事情，你可以使用&lt;strong&gt;sleep&lt;/strong&gt;和 &lt;strong&gt;awake-from-sleep&lt;/strong&gt; 通知来帮助你获得这段时间的控制权。&lt;/p&gt;

&lt;p&gt;一个&lt;i&gt;runloop&lt;em&gt;&lt;/i&gt;可以通过使用&lt;i&gt;run loop object&lt;/i&gt;被唤醒。其他的事件也可能引起&lt;i&gt;runloop&lt;/em&gt;&lt;/i&gt;被唤醒。例如，添加&lt;i&gt;no-port-based input source&lt;/i&gt;来唤醒&lt;i&gt;runloop*&lt;/i&gt;以至于input source可以被立即处理，而不是等待其他的事件发生。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;iOS系统中有很多用到了RunLoop的地方：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AutoreleasePool：监听&lt;code&gt;kCFRunLoopEntry&lt;/code&gt;事件，保证在所以回调之前创建自动释放池；监听&lt;code&gt;BeforeWaiting&lt;/code&gt;事件，释放旧的线程池，创建新的线程池；监听&lt;code&gt;kCFRunLoopExit&lt;/code&gt;事件，保证线程池最后被释放。&lt;/li&gt;
&lt;li&gt;事件响应：通过port-based input source监听用户的事件，并转发给App进程，如用UIControl的事件。&lt;/li&gt;
&lt;li&gt;手势识别：监听&lt;code&gt;kCFRunLoopBeforeWaiting&lt;/code&gt;事件在事件的回调函数中标记待处理的手势，并处理手势。&lt;/li&gt;
&lt;li&gt;界面更新：&lt;code&gt;setNeedsLayout&lt;/code&gt;、&lt;code&gt;setNeedsDisplay&lt;/code&gt;都会将该view标记为待处理，等到下一个runloop的时候会布局UI。&lt;/li&gt;
&lt;li&gt;定时器：就是一个CFRunLoopTimerRef&lt;/li&gt;
&lt;li&gt;PerformSelecter：将方法扔到某个线程中，在下一个run loop的时候执行。&lt;/li&gt;
&lt;li&gt;关于GCD：dispatch_async(dispatch_get_main_queue(), block)向主线程的run loop发送消息，唤醒run loop。并执行block中的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;PPT总结一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-cb2c4b4a6d0973e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.12.16 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-fb6430f46efe4735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.12.37 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-7118fdeabb5ffe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.12.53 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-e7ae08b4d61ec9e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.13.01 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-073579ed39612c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.12.47 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-cae92bc60b877b48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.13.12 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-fae8de2bdb8232aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.13.21 AM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1086250-ac972598a07a90bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Screen Shot 2017-09-05 at 10.13.27 AM.png&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>消息转发</title>
      <link>https://linkrober.github.io/bookshelf/2017/04/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 03 Apr 2017 03:05:31 +0800</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/04/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;描述：如果类不能执行这个方法，会执行动态&lt;strong&gt;消息转发&lt;/strong&gt;，如果该类还是不能动态的添加方法，则走&lt;strong&gt;完整的消息转发&lt;/strong&gt;。分两步，第一步&lt;strong&gt;看看有没有其他类可以执行该方法&lt;/strong&gt;，如果没有走第二步，&lt;strong&gt;将所有的细节封装到NSInvocation中，给接受者最后一次机会&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;演示：
动态消息转发
&amp;gt;在一个类&lt;code&gt;MessageObj&lt;/code&gt;中定义两个方法，&lt;code&gt;testDynamicMethodForward&lt;/code&gt;一个有实现方法，&lt;code&gt;start&lt;/code&gt;一个没有实现的方法，调用没有实现的方法，在动态消息转发的时候将这个方法hook到已经实现的方法上：
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface MessageObj()
@end


@implementation MessageObj

//-(void)start{}
void testDynamicMethodForward(){
    printf(&amp;quot;testDynamicMethodForward \n&amp;quot;);
}

+(BOOL)resolveInstanceMethod:(SEL)sel {
    class_addMethod([self class], sel, (IMP)testDynamicMethodForward, &amp;quot;v@@:&amp;quot;);
    return YES;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印如下：testDynamicMethodForward&lt;/p&gt;

&lt;p&gt;完整的消息转发第一步
&amp;gt;定义两个类，第一个类&lt;code&gt;MessageObj&lt;/code&gt;有一个未实现的方法&lt;code&gt;start&lt;/code&gt;，并且没有实现动态消息转发。第二个类&lt;code&gt;OtherClass&lt;/code&gt;，有一个和第一个类中未实现的方法同名的方法&lt;code&gt;start&lt;/code&gt;，在进行完整消息转发的第一步时，将&lt;code&gt;MessageOb&lt;/code&gt;j中未实现的方法hook到，&lt;code&gt;OtherClass&lt;/code&gt;的同名方法&lt;code&gt;start&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;OtherClass类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface OtherClass : NSObject

@end

@implementation OtherClass

-(void)start{
    NSLog(@&amp;quot;do some thing %@&amp;quot;,[self class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MessageObj类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MessageObj

//-(void)start{}

-(id)forwardingTargetForSelector:(SEL)aSelector {
    printf(&amp;quot;%p \n&amp;quot;,&amp;amp;aSelector);
    OtherClass *obj = [OtherClass new];
    return obj;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用&lt;code&gt;start&lt;/code&gt;方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MessageObj *obj = [MessageObj new];
[obj start];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印：do some thing OtherClass&lt;/p&gt;

&lt;p&gt;完整消息转发的第二步
如果以上两步都失败了，就走到这里。定义两个类&lt;code&gt;MessageObj&lt;/code&gt;、&lt;code&gt;OtherClass&lt;/code&gt;，&lt;code&gt;MessageObj&lt;/code&gt;中存在&lt;code&gt;OtherClass&lt;/code&gt;的实例。当走到消息转发的第三步时，先进行方法重签名&lt;code&gt;-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&lt;/code&gt;，再走最后的消息转发&lt;code&gt;-(void)forwardInvocation:(NSInvocation *)anInvocation&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;OtherClass类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface OtherClass : NSObject

@end
@implementation OtherClass

-(void)start{
    NSLog(@&amp;quot;message transform third part %@&amp;quot;,[self class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MessageObj类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MessageObj


-(instancetype)init {
    if (self = [super init]) {
        otherClass = [OtherClass new];
    }
    return  self;
}


//-(void)start{}
//方法重签名
-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector {
    NSMethodSignature *signature = [super methodSignatureForSelector:aSelector];
    if (!signature) {
        signature = [otherClass methodSignatureForSelector:aSelector];
    }
    return signature;
}
//最后的消息转发
-(void)forwardInvocation:(NSInvocation *)anInvocation {
    if (!otherClass) {
        [self doesNotRecognizeSelector:[anInvocation selector]];
    }
    [anInvocation invokeWithTarget:otherClass];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印：message transform third part OtherClass&lt;/p&gt;

&lt;p&gt;用途：
- 在方法不能识别的时候做一些保护，防止crash
- 调试的时候打印一些感兴趣的日志
- 也可以hook系统的方法玩玩呀&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
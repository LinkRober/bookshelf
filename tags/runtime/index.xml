<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>董二千</title>
    <link>https://LinkRober.github.io/bookshelf/tags/runtime/index.xml</link>
    <description>Recent content on 董二千</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://LinkRober.github.io/bookshelf/tags/runtime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>方法替换和Aspects</title>
      <link>https://linkrober.github.io/bookshelf/2020/11/%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2%E5%92%8Caspects/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2020/11/%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2%E5%92%8Caspects/</guid>
      <description>&lt;h4 id=&#34;带着问题看文章&#34;&gt;带着问题看文章：&lt;/h4&gt;

&lt;p&gt;1.常规姿势的方法替换原理是什么&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;Aspects&lt;/code&gt;的方法替换原理是什么&lt;/p&gt;

&lt;p&gt;3.为什么这样下面的代码这样hook之后，所有的实例的&lt;code&gt;viewWillAppear:&lt;/code&gt;也被hook了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[UIViewController class] aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionBefore usingBlock:^(){
        
} error:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.为什么&lt;code&gt;Aspect&lt;/code&gt;不能hook静态方法&lt;/p&gt;

&lt;p&gt;5.如果用先用Aspects hook了方法A，接着又用MethodSwizzle方法（下文有）对A进行了hook，两个hook都能执行吗？
&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3 id=&#34;正文&#34;&gt;正文&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;runtime&#34;&gt;&lt;code&gt;Runtime&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;void MethodSwizzle(Class c,SEL origSEL,SEL overrideSEL)
   {
       Method origMethod = class_getInstanceMethod(c, origSEL);
       Method overrideMethod= class_getInstanceMethod(c, overrideSEL);
       if(class_addMethod(c, origSEL, method_getImplementation(overrideMethod),method_getTypeEncoding(overrideMethod)))
       {
            //当前类不存在`origSEL`
            class_replaceMethod(c,overrideSEL, method_getImplementation(origMethod), method_getTypeEncoding(origMethod));
       } else  {
            method_exchangeImplementations(origMethod,overrideMethod);
       }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-method-class-getinstancemethod-class-cls-sel-sel&#34;&gt;1. &lt;code&gt;Method class_getInstanceMethod(Class cls, SEL sel)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;从子类往父类递归查找Method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static method_t *
getMethod_nolock(Class cls, SEL sel)
{
    method_t *m = nil;

    runtimeLock.assertLocked();

    // fixme nil cls?
    // fixme nil sel?

    assert(cls-&amp;gt;isRealized());

    while (cls  &amp;amp;&amp;amp;  ((m = getMethodNoSuper_nolock(cls, sel))) == nil) {
        cls = cls-&amp;gt;superclass;
    }

    return m;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-bool-class-addmethod-class-cls-sel-name-imp-imp-const-char-types&#34;&gt;2. &lt;code&gt;BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;为类添加新方法&lt;/p&gt;

&lt;p&gt;如果当前类已经有这个&lt;code&gt;selector&lt;/code&gt;，拿到该&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;返回False；如果没有，或父类存在，会将这个方法的IMP指向新的IMP，返回True。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
    if (!cls) return NO;

    mutex_locker_t lock(runtimeLock);
    return ! addMethod(cls, name, imp, types ?: &amp;quot;&amp;quot;, NO);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;static IMP 
addMethod(Class cls, SEL name, IMP imp, const char *types, bool replace)
{
    IMP result = nil;

    runtimeLock.assertLocked();

    checkIsKnownClass(cls);
    
    assert(types);
    assert(cls-&amp;gt;isRealized());

    method_t *m;
    if ((m = getMethodNoSuper_nolock(cls, name))) {
        // already exists
        if (!replace) {
            result = m-&amp;gt;imp;
        } else {
            result = _method_setImplementation(cls, m, imp);
        }
    } else {
        // fixme optimize
        method_list_t *newlist;
        newlist = (method_list_t *)calloc(sizeof(*newlist), 1);
        newlist-&amp;gt;entsizeAndFlags = 
            (uint32_t)sizeof(method_t) | fixed_up_method_list;
        newlist-&amp;gt;count = 1;
        newlist-&amp;gt;first.name = name;
        newlist-&amp;gt;first.types = strdupIfMutable(types);
        newlist-&amp;gt;first.imp = imp;

        prepareMethodLists(cls, &amp;amp;newlist, 1, NO, NO);
        cls-&amp;gt;data()-&amp;gt;methods.attachLists(&amp;amp;newlist, 1);
        flushCaches(cls);

        result = nil;
    }

    return result;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-imp-class-replacemethod-class-cls-sel-name-imp-imp-const-char-types&#34;&gt;3. &lt;code&gt;IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;改变当前类中某个&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IMP 
class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
    if (!cls) return nil;

    mutex_locker_t lock(runtimeLock);
    return addMethod(cls, name, imp, types ?: &amp;quot;&amp;quot;, YES);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;static IMP _method_setImplementation(Class cls, method_t *m, IMP imp)
{
    runtimeLock.assertLocked();

    if (!m) return nil;
    if (!imp) return nil;

    IMP old = m-&amp;gt;imp;
    m-&amp;gt;imp = imp;

    // Cache updates are slow if cls is nil (i.e. unknown)
    // RR/AWZ updates are slow if cls is nil (i.e. unknown)
    // fixme build list of classes whose Methods are known externally?

    flushCaches(cls);

    updateCustomRR_AWZ(cls, m);

    return old;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-void-method-exchangeimplementations-method-m1-method-m2&#34;&gt;4. &lt;code&gt;void method_exchangeImplementations(Method m1, Method m2)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;交换两个&lt;code&gt;Method&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void method_exchangeImplementations(Method m1, Method m2)
{
    if (!m1  ||  !m2) return;

    mutex_locker_t lock(runtimeLock);

    IMP m1_imp = m1-&amp;gt;imp;
    m1-&amp;gt;imp = m2-&amp;gt;imp;
    m2-&amp;gt;imp = m1_imp;


    // RR/AWZ updates are slow because class is unknown
    // Cache updates are slow because class is unknown
    // fixme build list of classes whose Methods are known externally?

    flushCaches(nil);

    updateCustomRR_AWZ(nil, m1);
    updateCustomRR_AWZ(nil, m2);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结：&lt;/br&gt;
上面包含了方法交互的两种方式：
- 已经存在的要交换的方法，直接交换方法的&lt;code&gt;IMP&lt;/code&gt;指针
- 要交换的方法不存在，动态创建方法再交换方法的&lt;code&gt;IMP&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tips:交换&lt;code&gt;Method&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method_exchangeImplementations(class_getInstanceMethod(self, @selector(viewDidAppear:)),
                                   class_getInstanceMethod(self, @selector(ex_viewDidAppear:
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;aspects&#34;&gt;&lt;code&gt;Aspects&lt;/code&gt;&lt;/h4&gt;

&lt;h5 id=&#34;一-消息转发&#34;&gt;（一）消息转发&lt;/h5&gt;

&lt;p&gt;消息转发有3个阶段：
1. 当前对象动态添加方法来响应
2. 有备用对象能够响应该方法
3. 通过forwardInvocation方法来处理该方法&lt;/p&gt;

&lt;p&gt;阶段3最灵活，和原来的类耦合最少。&lt;code&gt;Aspects&lt;/code&gt;就是在这个阶段来做方法替换。它替换的是什么呢，就是&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB95b6876b75aa452319fef5a997016d55?method=download&amp;amp;shareKey=809104bf2daedc6e202304bd2e45d2e8&#34; alt=&#34;&#34; /&gt;
经过讨论应该是下面这样的流程
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB84716c5dcfa90f82f31dca71e6baf268?method=download&amp;amp;shareKey=476d1e7dc88416af4d492f8d9e541243&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aspects会强制将你要hook的方法的&lt;code&gt;IMP&lt;/code&gt;指向&lt;code&gt;_objc_msgForward&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;，也就意味着你&lt;strong&gt;直接&lt;/strong&gt;走到了消息转发的最后一步。接着在新的&lt;code&gt;IMP&lt;/code&gt;： &lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt; 里面做各种切面的hook，before、instead、after。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef NS_OPTIONS(NSUInteger, AspectOptions) {
    AspectPositionAfter   = 0,            /// Called after the original implementation (default)
    AspectPositionInstead = 1,            /// Will replace the original implementation.
    AspectPositionBefore  = 2,            /// Called before the original implementation.
    
    AspectOptionAutomaticRemoval = 1 &amp;lt;&amp;lt; 3 /// Will remove the hook after the first execution.
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;二-实例对象和类对象的hook&#34;&gt;（二）实例对象和类对象的Hook&lt;/h5&gt;

&lt;p&gt;类对象：&lt;br&gt;
直接将当前类对象&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;替换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_swizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    // If there is no method, replace will act like class_addMethod.
    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, &amp;quot;v@:@&amp;quot;);
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例对象：&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBaab254928096c6f3850e8c5d74175e90?method=download&amp;amp;shareKey=f9ddd204eb6c299ad61feb797005dca4&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1.动态创建当前类的子类，2.再将子类的&lt;code&gt;forwardInvocation&lt;/code&gt;进行替换，3.最后将类对象和原类&lt;code&gt;class&lt;/code&gt;方法的&lt;code&gt;IMP&lt;/code&gt;指向当前类的&lt;code&gt;class&lt;/code&gt;方法的&lt;code&gt;IMP&lt;/code&gt;,4.将当前类的&lt;code&gt;isa&lt;/code&gt;指向动态创建的类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const char *subclassName = [className stringByAppendingString:AspectsSubclassSuffix].UTF8String;
Class subclass = objc_getClass(subclassName);
if (subclass == nil) {
		subclass = objc_allocateClassPair(baseClass, subclassName, 0);
		if (subclass == nil) {
            NSString *errrorDesc = [NSString stringWithFormat:@&amp;quot;objc_allocateClassPair failed to allocate class %s.&amp;quot;, subclassName];
            AspectError(AspectErrorFailedToAllocateClassPair, errrorDesc);
            return nil;
        }

		aspect_swizzleForwardInvocation(subclass);
		aspect_hookedGetClass(subclass, statedClass);
		aspect_hookedGetClass(object_getClass(subclass), statedClass);
		objc_registerClassPair(subclass);
	}
	//将self的isa指向动态创建的类
object_setClass(self, subclass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样做能保证现有的方法能正常执行；对当前类结构的改动最小。在&lt;code&gt;remove&lt;/code&gt;的时候&lt;code&gt;isa&lt;/code&gt;指针指回来就好了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
NSString *className = NSStringFromClass(klass);
        if ([className hasSuffix:AspectsSubclassSuffix]) {
            Class originalClass = NSClassFromString([className stringByReplacingOccurrencesOfString:AspectsSubclassSuffix withString:@&amp;quot;&amp;quot;]);
            NSCAssert(originalClass != nil, @&amp;quot;Original class must exist&amp;quot;);
            //将self的isa指向原来的类
            object_setClass(self, originalClass);
            AspectLog(@&amp;quot;Aspects: %@ has been restored.&amp;quot;, NSStringFromClass(originalClass));
            ...
        }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;三-源码&#34;&gt;（三）源码&lt;/h5&gt;

&lt;h6 id=&#34;配置&#34;&gt;配置&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;static id aspect_add(id self, SEL selector, AspectOptions options, id block, NSError **error) {
    NSCParameterAssert(self);
    NSCParameterAssert(selector);
    NSCParameterAssert(block);

    __block AspectIdentifier *identifier = nil;
    
    ①aspect_performLocked(^{
        if (②aspect_isSelectorAllowedAndTrack(self, selector, options, error)) {
            ③AspectsContainer *aspectContainer = aspect_getContainerForObject(self, selector);
            identifier = [AspectIdentifier identifierWithSelector:selector object:self options:options block:block error:error];
            if (identifier) {
                ④[aspectContainer addAspect:identifier withOptions:options];

                // Modify the class to allow message interception.
                ⑤aspect_prepareClassAndHookSelector(self, selector, error);
            }
        }
    });
    return identifier;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;①-br&#34;&gt;①&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;对代码块加自旋锁&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_performLocked(dispatch_block_t block) {
    static OSSpinLock aspect_lock = OS_SPINLOCK_INIT;
    OSSpinLockLock(&amp;amp;aspect_lock);
    block();
    OSSpinLockUnlock(&amp;amp;aspect_lock);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;②-br&#34;&gt;②&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;selector校验和tracker设置&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;黑名单校验，这些方法是无法被hook的，有&lt;code&gt;retain&lt;/code&gt;、&lt;code&gt;release&lt;/code&gt;、&lt;code&gt;autorelease&lt;/code&gt;、&lt;code&gt;forwardInvocation:&lt;/code&gt;、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Check against the blacklist.
NSString *selectorName = NSStringFromSelector(selector);
if ([disallowedSelectorList containsObject:selectorName]) {
    NSString *errorDescription = [NSString stringWithFormat:@&amp;quot;Selector %@ is blacklisted.&amp;quot;, selectorName];
    AspectError(AspectErrorSelectorBlacklisted, errorDescription);
    return NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dealloc&lt;/code&gt;无法在&lt;code&gt;AspectPositionBefore&lt;/code&gt;情况下被hook；当前实例和类必须要都能响应要hook的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AspectOptions position = options&amp;amp;AspectPositionFilter;
if ([selectorName isEqualToString:@&amp;quot;dealloc&amp;quot;] &amp;amp;&amp;amp; position != AspectPositionBefore) {
    NSString *errorDesc = @&amp;quot;AspectPositionBefore is the only valid position when hooking dealloc.&amp;quot;;
    AspectError(AspectErrorSelectorDeallocPosition, errorDesc);
    return NO;
}
if (![self respondsToSelector:selector] &amp;amp;&amp;amp; ![self.class instancesRespondToSelector:selector]) {
    NSString *errorDesc = [NSString stringWithFormat:@&amp;quot;Unable to find selector -[%@ %@].&amp;quot;, NSStringFromClass(self.class), selectorName];
    AspectError(AspectErrorDoesNotRespondToSelector, errorDesc);
    return NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果是类对象，为该类及其继承体系上的所有类创建一个&lt;code&gt;AspectTracker&lt;/code&gt;，并保存到一个全局单例的可变字典中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    currentClass = klass;
    AspectTracker *parentTracker = nil;
    do {
        AspectTracker *tracker = swizzledClassesDict[currentClass];
        if (!tracker) {
            tracker = [[AspectTracker alloc] initWithTrackedClass:currentClass parent:parentTracker];
            swizzledClassesDict[(id&amp;lt;NSCopying&amp;gt;)currentClass] = tracker;
        }
        [tracker.selectorNames addObject:selectorName];
        // All superclasses get marked as having a subclass that is modified.
        parentTracker = tracker;
    }while ((currentClass = class_getSuperclass(currentClass)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AspectTracker结构&lt;/code&gt;
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB715024449547b00293407b3d99066c57?method=download&amp;amp;shareKey=d84e9dd7fe1949030441cea5e1156e96&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;③-br&#34;&gt;③&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;通过runtime为当前类关联一个&lt;code&gt;AspectsContainer&lt;/code&gt;类型的属性。命名方式是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//aspects__ + 方法名
eg:aspects__eat:andWater:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AspectsContainer&lt;/code&gt;保存了被hook方法的三种切面数组
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB970471b0e4303ce3e0f095a4a2c92d93?method=download&amp;amp;shareKey=014892c4716701c7a5ed9026b33e33d1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;数组里面的对象&lt;code&gt;AspectIdentifier&lt;/code&gt;包含了在进行所有切面操作所需的信息，原方法、切面block、切面block的签名、如何切以及原方法所属的类。
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB78a33ecad4ae519b1113d730103d4def?method=download&amp;amp;shareKey=49e5bfc2a4f7297a29964987ea9fa873&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在创建&lt;code&gt;AspectIdentifier&lt;/code&gt;对象的初始化方法里有两个校验逻辑，1. 方法签名的校验 2. 方法签名兼容性判断。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Aspects&lt;/code&gt;定义了一个结构和&lt;code&gt;NSGlobalBlock&lt;/code&gt;类似的结构体&lt;code&gt;_AspectBlock&lt;/code&gt;。我们的切面block(&lt;code&gt;NSGlobalBlock&lt;/code&gt;)会被强转为&lt;code&gt;_AspectBlock&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Block internals.
typedef NS_OPTIONS(int, AspectBlockFlags) {
	AspectBlockFlagsHasCopyDisposeHelpers = (1 &amp;lt;&amp;lt; 25),
	AspectBlockFlagsHasSignature          = (1 &amp;lt;&amp;lt; 30)
};
typedef struct _AspectBlock {
	__unused Class isa;
	AspectBlockFlags flags;
	__unused int reserved;
	void (__unused *invoke)(struct _AspectBlock *block, ...);
	struct {
		unsigned long int reserved;
		unsigned long int size;
		// requires AspectBlockFlagsHasCopyDisposeHelpers
		void (*copy)(void *dst, const void *src);
		void (*dispose)(const void *);
		// requires AspectBlockFlagsHasSignature
		const char *signature;
		const char *layout;
	} *descriptor;
	// imported variables
} *AspectBlockRef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Block方法签名的校验有两步：
1. &lt;code&gt;!(layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasSignature)&lt;/code&gt;(这应该是flags的一个规则)，如果&lt;code&gt;layout-&amp;gt;flags&lt;/code&gt;的值是0，返回nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AspectBlockRef layout = (__bridge void *)block;
	if (!(layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasSignature)) {
        NSString *description = [NSString stringWithFormat:@&amp;quot;The block %@ doesn&#39;t contain a type signature.&amp;quot;, block];
        AspectError(AspectErrorMissingBlockSignature, description);
        return nil;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;layout-&amp;gt;descriptor&lt;/code&gt;中是否存在&lt;code&gt;signature&lt;/code&gt;。&lt;code&gt;desc&lt;/code&gt;先向下偏移2个&lt;code&gt;unsigned long int&lt;/code&gt;大小，如果存在copy和dispose函数继续向下偏移2个&lt;code&gt;unsigned long int&lt;/code&gt;大小。这时候检查签名是否为空。
&lt;code&gt;
void *desc = layout-&amp;gt;descriptor;
	desc += 2 * sizeof(unsigned long int);
	if (layout-&amp;gt;flags &amp;amp; AspectBlockFlagsHasCopyDisposeHelpers) {
		desc += 2 * sizeof(void *);
}
	if (!desc) {
    NSString *description = [NSString stringWithFormat:@&amp;quot;The block %@ doesn&#39;t has a type signature.&amp;quot;, block];
    AspectError(AspectErrorMissingBlockSignature, description);
    return nil;
}
	const char *signature = (*(const char **)desc);
	return [NSMethodSignature signatureWithObjCTypes:signature];
&lt;/code&gt;
&lt;img src=&#34;https://lc-api-gold-cdn.xitu.io/3293f66aeb756e10eba7&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方法签名兼容性判断，通过对比方法签名来实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *blockSignature, id object, SEL selector, NSError **error) {
    NSCParameterAssert(blockSignature);
    NSCParameterAssert(object);
    NSCParameterAssert(selector);

    BOOL signaturesMatch = YES;
    NSMethodSignature *methodSignature = [[object class] instanceMethodSignatureForSelector:selector];
    if (blockSignature.numberOfArguments &amp;gt; methodSignature.numberOfArguments) {
        signaturesMatch = NO;
    }else {
        if (blockSignature.numberOfArguments &amp;gt; 1) {
            const char *blockType = [blockSignature getArgumentTypeAtIndex:1];
            if (blockType[0] != &#39;@&#39;) {
                signaturesMatch = NO;
            }
        }
        // Argument 0 is self/block, argument 1 is SEL or id&amp;lt;AspectInfo&amp;gt;. We start comparing at argument 2.
        // The block can have less arguments than the method, that&#39;s ok.
        if (signaturesMatch) {
            for (NSUInteger idx = 2; idx &amp;lt; blockSignature.numberOfArguments; idx++) {
                const char *methodType = [methodSignature getArgumentTypeAtIndex:idx];
                const char *blockType = [blockSignature getArgumentTypeAtIndex:idx];
                // Only compare parameter, not the optional type data.
                if (!methodType || !blockType || methodType[0] != blockType[0]) {
                    signaturesMatch = NO; break;
                }
            }
        }
    }

    if (!signaturesMatch) {
        NSString *description = [NSString stringWithFormat:@&amp;quot;Blog signature %@ doesn&#39;t match %@.&amp;quot;, blockSignature, methodSignature];
        AspectError(AspectErrorIncompatibleBlockSignature, description);
        return NO;
    }
    return YES;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果方法签名个数不等返回NO；如果切面block的方法签名第1个参数（从第0个开始）的字符不是&lt;code&gt;@&lt;/code&gt;返回NO；如果切面block的方法签名和要替换方法的方法签名从第2个开始不能一一匹配返回NO。&lt;/p&gt;

&lt;h3 id=&#34;④-br&#34;&gt;④&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;将构建好的&lt;code&gt;AspectIdentifier&lt;/code&gt;，添加到类对应的&lt;code&gt;AspectsContainer&lt;/code&gt;中，调用Hook方法时要用。&lt;/p&gt;

&lt;h3 id=&#34;⑤-br&#34;&gt;⑤&lt;/br&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;static void aspect_prepareClassAndHookSelector(NSObject *self, SEL selector, NSError **error) {
    NSCParameterAssert(selector);
    Class klass = aspect_hookClass(self, error);
    Method targetMethod = class_getInstanceMethod(klass, selector);
    IMP targetMethodIMP = method_getImplementation(targetMethod);
    if (!aspect_isMsgForwardIMP(targetMethodIMP)) {
        // Make a method alias for the existing method implementation, it not already copied.
        const char *typeEncoding = method_getTypeEncoding(targetMethod);
        SEL aliasSelector = aspect_aliasForSelector(selector);
        if (![klass instancesRespondToSelector:aliasSelector]) {
            __unused BOOL addedAlias = class_addMethod(klass, aliasSelector, method_getImplementation(targetMethod), typeEncoding);
            NSCAssert(addedAlias, @&amp;quot;Original implementation for %@ is already copied to %@ on %@&amp;quot;, NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);
        }

        // We use forwardInvocation to hook in.
        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);
        AspectLog(@&amp;quot;Aspects: Installed hook for -[%@ %@].&amp;quot;, klass, NSStringFromSelector(selector));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里就是调整&lt;code&gt;IMP&lt;/code&gt;指针。下面这段代码主要有两个功能。
1. 将类的&lt;code&gt;forwardInvocation&lt;/code&gt;的&lt;code&gt;IMP&lt;/code&gt;指向自定义的&lt;code&gt;IMP&lt;/code&gt;。这里分四种情况，（一）已经hook过的类，指实例对象，当前类的前缀是&lt;code&gt;_Aspects_&lt;/code&gt;，直接返回。（二）类对象，上文已讨论过。（三）类对象和元类不是同一个类。（四）动态添加方法，上文也已讨论过。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//交换forwardInvocation IMP的代码
static NSString *const AspectsForwardInvocationSelectorName = @&amp;quot;__aspects_forwardInvocation:&amp;quot;;
static void aspect_swizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    // If there is no method, replace will act like class_addMethod.
    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, &amp;quot;v@:@&amp;quot;);
    if (originalImplementation) {
        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, &amp;quot;v@:@&amp;quot;);
    }
    AspectLog(@&amp;quot;Aspects: %@ is now aspect aware.&amp;quot;, NSStringFromClass(klass));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.将要hook方法的&lt;code&gt;IMP&lt;/code&gt;指向&lt;code&gt;_objc_msgForward&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;到这里完成了所有的配置工作&lt;/p&gt;

&lt;h6 id=&#34;运行时&#34;&gt;运行时&lt;/h6&gt;

&lt;p&gt;直接上源码。&lt;/br&gt;
先拿实例对象和类对象的&lt;code&gt;AspectsContainer&lt;/code&gt;，可以为空。组装&lt;code&gt;AspectInfo&lt;/code&gt;。先执行所有的&lt;code&gt;beforeAspects&lt;/code&gt;切;接着如果存在&lt;code&gt;insteadAspects&lt;/code&gt;，执行install切面，否则执行原方法；最后执行&lt;code&gt;afterAspects&lt;/code&gt;切面。在每个切面执行的时候，实例对象和类对象的都要执行。如果有需要remove的切面都会加到&lt;code&gt;aspectsToRemove&lt;/code&gt;这个数组里面，最后以remove掉。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma mark - Aspect Invoke Point

// This is a macro so we get a cleaner stack trace.
#define aspect_invoke(aspects, info) \
for (AspectIdentifier *aspect in aspects) {\
    [aspect invokeWithInfo:info];\
    if (aspect.options &amp;amp; AspectOptionAutomaticRemoval) { \
        aspectsToRemove = [aspectsToRemove?:@[] arrayByAddingObject:aspect]; \
    } \
}

// This is the swizzled forwardInvocation: method.
static void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {
    NSCParameterAssert(self);
    NSCParameterAssert(invocation);
    SEL originalSelector = invocation.selector;
	SEL aliasSelector = aspect_aliasForSelector(invocation.selector);
    invocation.selector = aliasSelector;
    AspectsContainer *objectContainer = objc_getAssociatedObject(self, aliasSelector);
    AspectsContainer *classContainer = aspect_getContainerForClass(object_getClass(self), aliasSelector);
    AspectInfo *info = [[AspectInfo alloc] initWithInstance:self invocation:invocation];
    NSArray *aspectsToRemove = nil;

    // Before hooks.
    aspect_invoke(classContainer.beforeAspects, info);
    aspect_invoke(objectContainer.beforeAspects, info);

    // Instead hooks.
    BOOL respondsToAlias = YES;
    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {
        aspect_invoke(classContainer.insteadAspects, info);
        aspect_invoke(objectContainer.insteadAspects, info);
    }else {
        Class klass = object_getClass(invocation.target);
        do {
            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {
                [invocation invoke];
                break;
            }
        }while (!respondsToAlias &amp;amp;&amp;amp; (klass = class_getSuperclass(klass)));
    }

    // After hooks.
    aspect_invoke(classContainer.afterAspects, info);
    aspect_invoke(objectContainer.afterAspects, info);

    // If no hooks are installed, call original implementation (usually to throw an exception)
    if (!respondsToAlias) {
        invocation.selector = originalSelector;
        SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);
        if ([self respondsToSelector:originalForwardInvocationSEL]) {
            ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);
        }else {
            [self doesNotRecognizeSelector:invocation.selector];
        }
    }

    // Remove any hooks that are queued for deregistration.
    [aspectsToRemove makeObjectsPerformSelector:@selector(remove)];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里基本差不多了，还有两个地方没讲，切面Block调用实现&lt;code&gt;[aspect invokeWithInfo:info]&lt;/code&gt;和移除切面，有兴趣的可以看看。&lt;/p&gt;

&lt;p&gt;最后附上一张整体流程图
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEB24a1a6c4e7c65ed963c9c65099042c69?method=download&amp;amp;shareKey=c4ea75a79f085b53d9d848ebd1b8543b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;四-答题&#34;&gt;（四）答题&lt;/h5&gt;

&lt;p&gt;1、2上面基本都已经说清楚了，我们从3看起：&lt;/p&gt;

&lt;p&gt;3.为什么这样hook之后所有的实例方法也被hook了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[UIViewController class] aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionBefore usingBlock:^(){
        
} error:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;答：这里考察的是&lt;code&gt;isa&lt;/code&gt;的概念。实例对象调用方法的时候是在&lt;strong&gt;isa指针指向的对象&lt;/strong&gt;里的方法列表去找，而&lt;strong&gt;isa指针指向的对象&lt;/strong&gt;就是类对象，&lt;code&gt;Aspects&lt;/code&gt;改变的是类对象方法列表里方法的&lt;code&gt;IMP&lt;/code&gt;，所以无论那是实例调用了&lt;code&gt;viewWillAppear:&lt;/code&gt;都会被hook&lt;/p&gt;

&lt;p&gt;4.为什么&lt;code&gt;Aspect&lt;/code&gt;不能hook静态方法
答：这里考察的也是&lt;code&gt;isa&lt;/code&gt;的概念，可见&lt;code&gt;isa&lt;/code&gt;在runtime中的地位非常重要。因为类对象调用方法的时候是到元类中去查找，而我们并没有对元类的方法进行hook。&lt;/p&gt;

&lt;p&gt;5.如果用先用Aspects hook了方法A，接着又用MethodSwizzle对A进行了hook，两个hook都能执行吗？
答：先看这张图，以&lt;code&gt;viewDidAppear:&lt;/code&gt;为列&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBbd552a8d0fd08c81bddf036c20023229?method=download&amp;amp;shareKey=c8ab8006d377bd96f97cd3bc38ca9d1b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viewDidAppear:&lt;/code&gt;的IMP先被指向了&lt;code&gt;forwardInvocatoin:&lt;/code&gt;，当用MethodSwizzle进行第二次hook的时候，原来想指向&lt;code&gt;viewDidAppear:&lt;/code&gt;正真的&lt;code&gt;IMP&lt;/code&gt;的指针其实指向了&lt;code&gt;forwardInvocatoin:&lt;/code&gt;，而&lt;code&gt;forwardInvocatoin:&lt;/code&gt;被&lt;code&gt;Aspects&lt;/code&gt;指向了自定义的&lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt;。这时候当调用&lt;code&gt;km_viewDidAppear:&lt;/code&gt;的时候调用了&lt;code&gt;Aspects&lt;/code&gt;的消息转发。在执行原方法的时候执行的是&lt;code&gt;aspects__t_viewDidAppear:&lt;/code&gt;而不是当初动态添加的&lt;code&gt;aspects__viewDidAppear:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self doesNotRecognizeSelector:invocation.selector];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以答案是用&lt;code&gt;MethodSwizzle&lt;/code&gt;hook的方法可以执行。&lt;code&gt;Aspects&lt;/code&gt;Hook的方法无法执行，已经无法拿到正确的&lt;code&gt;AspectsContainer&lt;/code&gt;，动态添加的属性名称class_getSuperclass不对（是基于&lt;code&gt;viewDidAppear&lt;/code&gt;创建的属性，而不是&lt;code&gt;km_viewDidAppear&lt;/code&gt;）了，最后崩溃了。&lt;/p&gt;

&lt;p&gt;但是&lt;code&gt;Aspects&lt;/code&gt;还给了你最后一次机会如果被hook的类里面实现了方法&lt;code&gt;__aspects_forwardInvocation&lt;/code&gt;还能挽救下崩溃的局面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
invocation.selector = originalSelector;
SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);
if ([self respondsToSelector:originalForwardInvocationSEL]) {
    ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);
}else {
    [self doesNotRecognizeSelector:invocation.selector];
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上的推断建立在当前类没有实现&lt;code&gt;viewDidAppear:&lt;/code&gt;的前提下。如果当前类实现了&lt;code&gt;viewDidAppear:&lt;/code&gt;MethodSwizzle拿到的就不是被交换过的IMP。这时候就可以形成闭环：&lt;code&gt;km_viewDidAppear:&lt;/code&gt;-&amp;gt;&lt;code&gt;viewDidAppear:(调用了[super viewDidAppear])&lt;/code&gt;-&amp;gt;&lt;code&gt;__ASPECTS_ARE_BEING_CALLED__&lt;/code&gt;-&amp;gt;&lt;code&gt;Aspects的hook方法&lt;/code&gt;&lt;/br&gt;
&lt;img src=&#34;https://note.youdao.com/yws/api/personal/file/WEBb7863bbb0e16ab705af8d7443bfead85?method=download&amp;amp;shareKey=3b736c680f87c3c52f724c4845dca10b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;四-知识点&#34;&gt;（四）知识点：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;消息转发&lt;/li&gt;
&lt;li&gt;runtime的各种方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object_getClass(id _Nullable obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_isMetaClass(Class _Nullable cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_getSuperclass(Class _Nullable cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_getInstanceMethod(Class _Nullable cls, SEL _Nonnull name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_getImplementation(Method _Nonnull m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_getTypeEncoding(Method _Nonnull m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_replaceMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_exchangeImplementations(Method _Nonnull m1, Method _Nonnull m2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object_setClass(id _Nullable obj, Class _Nonnull cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;isa指针&lt;/li&gt;
&lt;li&gt;block结构&lt;/li&gt;
&lt;li&gt;NSMethodSignature方法签名&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Runtime(三) 消息转发</title>
      <link>https://linkrober.github.io/bookshelf/2017/10/runtime%E4%B8%89-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/10/runtime%E4%B8%89-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;p&gt;向对象发送一个消息，如果没有处理就会发生错误。但是在产生错误之前，runtime会给接受对象第二次机会来处理消息。
&lt;/p&gt;

&lt;h3 id=&#34;forwarding&#34;&gt;Forwarding&lt;/h3&gt;

&lt;p&gt;向对象发送一个消息，如果没有处理就会发生错误。但是在产生错误之前，runtime会向对象发送&lt;code&gt;forwardInvocation:&lt;/code&gt;消息，消息携带了一个&lt;code&gt;NSInvocation&lt;/code&gt;对象，这个对象里面包裹了原始消息和参数。&lt;/p&gt;

&lt;p&gt;你可以实现&lt;code&gt;forwardInvocation:&lt;/code&gt;方法来处理消息，来避免错误的发生。正如方法名所暗示的&lt;code&gt;forwardInvocation:&lt;/code&gt;一般用来向另一个对象转发消息。&lt;/p&gt;

&lt;p&gt;为了看到转发的过程和结果，我们想象下面的场景：首先，你设计了一个对象能够响应&lt;code&gt;negotiate&lt;/code&gt;方法，你希望它能够响应另外一个对象的消息。无论&lt;code&gt;negotiate&lt;/code&gt;的方法体是在哪里实现的,你可以通过传入&lt;code&gt;negotiate&lt;/code&gt;消息到另一个对象来完成。下一步，假设你想要&lt;code&gt;negotiate&lt;/code&gt;消息的响应可以被另外一个类明确的接受。一种办法是通过继承的方式，让你的类从父类中继承这个方法。但是如果在不同的继承链中，这种方法是不可能实现的。&lt;/p&gt;

&lt;p&gt;即使你的类不能通过继承的方式使用&lt;code&gt;negotiate&lt;/code&gt;方法，我们仍然可以借用下面这种方式，向另一个类对象传递消息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)negotiate
{
    if ( [someOtherObject respondsTo:@selector(negotiate)] )
        return [someOtherObject negotiate];
    return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这种方式有点笨重，特别是如果你有大量的消息需要传递到另一个类的时候。你必须要在一个方法里面覆盖所有你想要调用的其他类的方法。而且，可能有些方法你不能考虑周全。所有的方法集合都依赖于运行时事件，在以后类的实现中作为新的方法发生改变。&lt;/p&gt;

&lt;p&gt;第二次机会被&lt;code&gt;forwardInvocation:&lt;/code&gt;方法所提供，这是一种比较特殊的解决方式，它是动态的而不是静态的。它工作起来就像是：当一个对象不能响应一个消息，因为在消息中没有selector匹配这个方法。runtime会用&lt;code&gt;forwardInvocation:&lt;/code&gt;消息来通知对象。每个对象都从NSObject里继承了&lt;code&gt;forwardInvocation:&lt;/code&gt;方法。但是NSObject只是简单的调用&lt;code&gt;doesNotRecognizeSelector:&lt;/code&gt;。通过重写NSObject版本的实现，你可以利用这次机会，通过&lt;code&gt;forwardInvocation:&lt;/code&gt;消息提供一个方法转发到另一个类中。
为了转发一个消息，所有的&lt;code&gt;forwardInvocation:&lt;/code&gt;方法必须包含下面的两个步骤:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;确定消息的去向&lt;/li&gt;
&lt;li&gt;转发的时候携带原始的参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;消息可以通过&lt;code&gt;invokeWithTarget:&lt;/code&gt;方法被发送：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)forwardInvocation:(NSInvocation *)anInvocation
{
	if ([someOtherObject respondsToSelector:[anInvocation selector]])
		[aInvocation invokeWithTarget:someOtherObject];
	else
		[super forwardInvocation:anInvocation];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;被转发的消息的返回值被返回到原始的sender。所有返回值的类型包括：ids、structures，双精度浮点数。
对于unrecognized消息，&lt;code&gt;forwardInvocation:&lt;/code&gt;方法就像一个消息转发中心，将message包裹起来发送到不同的接受者。或者作为一个中转站，发送所有消息到同样的地方。它可以转发一个消息到另一个。&lt;code&gt;forwardInvocation:&lt;/code&gt;方法可以定位几个消息消息到单一的response。&lt;code&gt;forwardInvocation:&lt;/code&gt;要做的是准备实现。但是，这次机会为转发链中的链接对象提供更多程序设计的可能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;forwardInvocation:&lt;/code&gt;方法开始处理消息，只有它们不能调用在接受者中已经存在的方法时。比如，你想要你的对象去转发&lt;code&gt;negotiate&lt;/code&gt;消息到另一个对象，但对象并没有自己对该消息的实现。如果是这样，消息将永远不会到达&lt;code&gt;forwardInvocation:&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;forwarding-and-multiple-inheritance&#34;&gt;Forwarding and Multiple Inheritance&lt;/h3&gt;

&lt;p&gt;转发可以模仿多继承，可以实现多继承的一些效果。对象通过转发来响应消息，就像是借用或者继承了另一个类的某个方法的实现
&lt;img src=&#34;../../../forwarding.png&#34; alt=&#34;forwarding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在这个例子中，Warrior类的实例转发一个&lt;code&gt;negotiate&lt;/code&gt;消息到Diplomat类的实例。Warrior可以像Diplomat一样调用negotiate。看起来就像响应&lt;code&gt;negotiate&lt;/code&gt;方法。
对象转发消息，这样“继承”的方法来自两种继承架构链。上面的例子中，它就像Warrior的类继承自Diplomat ，就像子类继承父类一样。&lt;/p&gt;

&lt;p&gt;转发提供了很多特性，一般你可以用它来实现多继承。但是，这和多继承有两个很大不同地方：首先，在一个类中，多继承组合出不同的能力。它趋向于较庞大的多接口对象。另一方面，继承可以区分不同种类的方法到不同的对象。&lt;/p&gt;

&lt;h3 id=&#34;forwarding-and-inheritance&#34;&gt;Forwarding and Inheritance&lt;/h3&gt;

&lt;p&gt;尽管转发可以模仿继承，NSObject类绝不能混合这两种方式。像&lt;code&gt;respondsToSelector:&lt;/code&gt;和&lt;code&gt;isKindOfClass:&lt;/code&gt;方法，只能在继承链中看到，不能用于消息转发链。例如，一个Warrior对象被查询是否响应&lt;code&gt;negotiate&lt;/code&gt;消息，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if([aWarrior respondsToSelector:@selector(negotiate)])
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;答案是&lt;code&gt;NO&lt;/code&gt;，在某种意义上，即使它能无错误的接受&lt;code&gt;negotiate&lt;/code&gt;消息，并且响应它们，通过转发它们到Diplomat。&lt;/p&gt;

&lt;p&gt;在许多情况下，&lt;code&gt;NO&lt;/code&gt;是正确的答案。但也需不是。如果你使用转发来设置一个替代的object或者扩展一个类的能力，转发机制应该像继承一样透明。如果你想要你的对象的行为就好像真正是通过继承来实现消息转发的。你将需要重新实现&lt;code&gt;respondsToSelector:&lt;/code&gt;和&lt;code&gt;isKindOfClass:&lt;/code&gt;包括你的转发算法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)respondsToSelector:(SEL)aSelector
{
	if([super respondsToSelector:aSelector])
		return YESl
	else {
		/* Here,test whether the aSelector message can *
		 * be forwarded to another object and whether that *
		 * object can respond to it.Return YES if it can. */
	}
	return NO;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了&lt;code&gt;respondsToSelector:&lt;/code&gt;和&lt;code&gt;isKindOfClass:&lt;/code&gt;,&lt;code&gt;instancesRespondToSelector:&lt;/code&gt;方法应该反映转发算法。如果协议被使用,&lt;code&gt;conformsToProtocol:&lt;/code&gt;方法应该同样被添加到这个list中。类似的，如果一个对象转发任何它接受的远程消息，它应该有一个&lt;code&gt;methodSignatureForSelector:&lt;/code&gt;方法的实现，它能返回方法精确的描述。最终响应转发的消息。例如，如果一个对象能够转发一个消息到它的替代者，你应该向下面这样实现&lt;code&gt;methodSignatureForSelector:&lt;/code&gt;方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector
{
	NSMethodSignature *signature = [super methodSignatureForSelector:selector];
	if(!signature){
		signature = [surrogate methodSignatureForSelector:selector];
	}
	return signature;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可能考虑把转发算法放在私有代码的某个地方并且拥有所有这些方法,&lt;code&gt;forwardInvocation:&lt;/code&gt;包括调用它。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;这是一个高级技巧，仅仅适用于没有其他解决方案的时候。这也不将作为继承的替代。如果你必须使用这个技术，确保你能完全理解在进行转发和要转发到的目标类的行为。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这部分提到的方法被描述在&lt;code&gt;NSObject&lt;/code&gt;类的说明中。更多的关于&lt;code&gt;invokeWithTarget:&lt;/code&gt;请看&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsinvocation&#34;&gt;NSInvocation&lt;/a&gt;类的说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Runtime (二)  动态方法实现</title>
      <link>https://linkrober.github.io/bookshelf/2017/10/runtime-%E4%BA%8C--%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 09 Oct 2017 18:06:28 +0800</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/10/runtime-%E4%BA%8C--%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h3 id=&#34;dynamic-method-resolution&#34;&gt;Dynamic Method Resolution&lt;/h3&gt;

&lt;p&gt;有的时候，你可能想要提供方法的动态实现。例如，Object-C 属性特征包含了&lt;code&gt;@dynamic&lt;/code&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@dynamic propertyName;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是告诉编译器属性相关方法的实现会被动态的提供。&lt;/p&gt;

&lt;p&gt;你可以实现&lt;code&gt;resolveInstanceMethod:&lt;/code&gt;和&lt;code&gt;resolveClassMethod:&lt;/code&gt;为各个实例和类动态的提供一个selector。&lt;/p&gt;

&lt;p&gt;一个Object-C方法是一个简单的C函数，它最少持有两个参数&amp;ndash;&lt;code&gt;self&lt;/code&gt;和&lt;code&gt;_cmd&lt;/code&gt;。你可以使用&lt;code&gt;class_addMethod&lt;/code&gt;添加一个函数到类中作为方法，函数大概像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void dynamicMethodIMP(id self,SEL _cmd) {
	//implementation...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以动态的把它添加到类中作为一个方法，通过使用&lt;code&gt;resolveInstanceMethod:&lt;/code&gt;调用&lt;code&gt;resolveThisMethodDynamically&lt;/code&gt;方法，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MyClass
+ (BOOL)resolveInstanceMethod:(SEL)aSEL
{
	if(aSEL == @selector(resolveThisMethodDynamically)){
		class_addMethod([self class],aSEL,(IMP)dynamicMethodIMP,&amp;quot;v@:&amp;quot;);
		return YES;
	}
	return [super resolveInstanceMethod:aSEL];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@end
一个类在消息转发机制开始前有机会动态的添加一个方法。如果&lt;code&gt;respondsToSelector:&lt;/code&gt;或者&lt;code&gt;instancesRespondToSelector:&lt;/code&gt;方法被调用时，动态的方法接受者首先会被给予一次机会，为selector提供一个&lt;code&gt;IMP&lt;/code&gt;。如果你实现了&lt;code&gt;resolveInstanceMethod:&lt;/code&gt;方法，但是想要指定的selector，通过转发机制被转发，你要return &lt;code&gt;NO&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;dynamic-loading&#34;&gt;Dynamic Loading&lt;/h3&gt;

&lt;p&gt;一个Object-C程序可以在运行的时候加载和链接新的类。动态加载可以用来做很多不同的事情。例如，系统偏好中的不同模块是通过动态加载的方式实现的。
在Cocoa的环境中，动态加载一般被用来让应用更具灵活性。在编写自己的模块的时候，可以在runtime的时候被加载。更多的是用接口加载自定义的模版。OS X的系统设置中加载自定义的偏好模块。你应用程序的模块扩展等。
因此在Mach-O文件中有一个runtime函数执行Object-C的动态加载(objc_loadModules,定义在objc/objc-load.h中)，Cocoa的&lt;code&gt;NSBundle&lt;/code&gt;类为动态加载提供了一个更方便的接口&amp;ndash;面向对象的聚合相关服务的接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Runtime (一) 消息</title>
      <link>https://linkrober.github.io/bookshelf/2017/09/runtime-%E4%B8%80-%E6%B6%88%E6%81%AF/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/09/runtime-%E4%B8%80-%E6%B6%88%E6%81%AF/</guid>
      <description>&lt;h3 id=&#34;message&#34;&gt;Message&lt;/h3&gt;

&lt;p&gt;这篇文章描述了消息如何通过使用&lt;code&gt;objc_msgSend&lt;/code&gt;发送，如何通过方法名称找到对应方法的reference&lt;/p&gt;

&lt;h4 id=&#34;the-objc-msgsend-function&#34;&gt;The objc_msgSend Function&lt;/h4&gt;

&lt;p&gt;在Object-C中，发送的消息直到运行时才绑定到正真的方式实现。
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[receiver message]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;objc_msgSend&lt;/code&gt;是真正调用消息的函数，这个函数持有消息的接受者和方法的名称：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objc_msgSend(receiver,selector)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何其他的参数也是通过这个方法传入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objc_msgSend(receiver,selector,arg1,arg2,...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法会做一些必要的事情来进行动态绑定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先找到方法的实现即selector的引用。因为在不同的类中都可以实现相同方法名的方法，所以通过方法的实现找到真正的receiver的class。&lt;/li&gt;
&lt;li&gt;然后传入该方法指定的receiver和参数。&lt;/li&gt;
&lt;li&gt;最后将实现的返回值作为它自己的返回值。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note:编译器生成调用消息的方法，在日常开发中永远不要在你写的代码中直接调用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在架构中消息传递的关键在于编译器编译每个class和object。每个class的结构中包含两个重要元素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指向父类的指针&lt;/li&gt;
&lt;li&gt;一个类的派发表 ，这个表记录了方法的selector和定义该方法的地址。&lt;code&gt;setOrigin::&lt;/code&gt;方法和其对应的地址；&lt;code&gt;display&lt;/code&gt;和其对应的地址。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当一个新的对象被创建，内存被分配，实例变量被初始化。第一件事就是对象变量指针指向它的类结构。这个指针一般被称作&lt;code&gt;isa&lt;/code&gt;,给予对象访问类的权利。所有的类都是从这个类继承而来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note:尽管这是oc不太严谨的一部分(容易被hook)，但是这也是oc对象在运行时不可缺少的一部分。一个对象需要一个和它等效的结构体来代表，在任何地方都可以用它来定义。如果你曾经需要创建一个根对象。这个对象自动继承&lt;code&gt;NSObject&lt;/code&gt;或者&lt;code&gt;NSProxy&lt;/code&gt;都会携带一个&lt;code&gt;isa&lt;/code&gt;变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;类的这些元素和对象结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../messaging1.png&#34; alt=&#34;messaging1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当消息被发送到一个对象，消息方法跟随对象的&lt;code&gt;isa&lt;/code&gt;指向类结构，在派发表中一直向上寻找对应的方法。如果你不能在这里找到你需要的方法，&lt;code&gt;objc_msgSend&lt;/code&gt;方法会继续向上在父类的派发表里面尝试寻找该方法。还是失败就会一直寻找直到到达&lt;code&gt;NSObject&lt;/code&gt;类，一旦找到selector，就会从表中的入口调用该方法，把它传递到对象的数据结构中。&lt;/p&gt;

&lt;p&gt;这种方式的方法调用是在运行时进行的。在面向对象编程的专业术语中，我们称它为—&lt;strong&gt;动态消息绑定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了加速消息处理的过程，运行时系统会缓存曾经使用过的selectors和对应的方法地址。每个类是被分开缓存的。和在类中定义的方法一样，它也包含继承方法的selector。在查找派发表之前，消息路径会第一个会检查接受者类的缓存.如果方法的selector在缓存中，消息只比方法调用慢一点点。一旦程序运行了足够长的时间唤醒缓存，几乎发送的所有消息都能在缓存中找到。在程序运行的时候，缓存动态的增加来容纳新的方法。&lt;/p&gt;

&lt;h4 id=&#34;using-hidden-arguments&#34;&gt;Using Hidden Arguments&lt;/h4&gt;

&lt;p&gt;当&lt;code&gt;objc_msgSend&lt;/code&gt;寻找实现方法的过程，它调用方法并传递所有的参数。同时它也为这个程序传递了两个隐藏的参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接受者对象&lt;/li&gt;
&lt;li&gt;方法的selector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些参数给予每个方法的实现明确的信息。因为这两个参数的隐藏不能表现在编码中，一般是在编译的时候被插入到具体的实现。&lt;/p&gt;

&lt;p&gt;尽管这些参数没有被明确的声明，源码仍然可以引用到它们(就像可以引用对象的实例变量)。方法通过&lt;code&gt;self&lt;/code&gt;引用接受者对象，通过&lt;code&gt;_cmd&lt;/code&gt;代表selector。在下面的例子中，&lt;code&gt;_cmd&lt;/code&gt;指向&lt;code&gt;strange&lt;/code&gt;方法的selector，这个对象的&lt;code&gt;self&lt;/code&gt;接受&lt;code&gt;strange&lt;/code&gt;消息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- strange
{
	id target = getTheReceiver();
	SEL method = getTheMethod();

	if(target == self || method == _cmd)
		return nil;
	return [target performSelector:method];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;getting-a-method-address&#34;&gt;Getting a Method Address&lt;/h4&gt;

&lt;p&gt;避免动态绑定的唯一办法，就是拿到方法的地址直接调用，就像调用一个方法一样。这只适合在一些少有情况下：当一个具体的方法需要被多次成功的执行，你想要在每次方法执行的时候避免消息带来的开销。&lt;/p&gt;

&lt;p&gt;定义在&lt;code&gt;NSObject&lt;/code&gt;类中的方法&lt;code&gt;methodForSelector:&lt;/code&gt;你可以获得一个指向方法具体实现的指针，然后使用指针调用程序。&lt;code&gt;methodForSelector:&lt;/code&gt;方法返回的指针一定要小心的包裹来指向一个适当的函数类型。返回值和输入参数都需要包含在里面。&lt;/p&gt;

&lt;p&gt;下面的例子展示了&lt;code&gt;setFilled:&lt;/code&gt;方法调用的实现过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void (*setter)(id,SEL,BOOL);
int i;
setter = (void (*)(id,SEL,BOOL))[target methodForSelector:@selector(setFilled:)];
for(i = 0;i &amp;lt; 100;i++){
	setter(targetList[i],@selector(setFilled:),YES);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先&lt;code&gt;self&lt;/code&gt;和&lt;code&gt;_cmd&lt;/code&gt;被传递到具体的实现，在两个参数在方法中通过语法的方式被隐藏，但是当这些参数在被作为一个funcation被调用的时候必须要明确。
使用&lt;code&gt;methodForSelector:&lt;/code&gt;来避免动态绑定可以节省大部分时间。但是如果同一个消息被多次调用，动态绑定的缓存机制可能更优雅点，因为上面的&lt;code&gt;for&lt;/code&gt;循环会遍历所有tartet。
记住，&lt;code&gt;methodForSelector:&lt;/code&gt;是Cocoa的运行时系统提供的，它不是OC语言自己的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>消息转发</title>
      <link>https://linkrober.github.io/bookshelf/2017/04/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 03 Apr 2017 03:05:31 +0800</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/04/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;描述：如果类不能执行这个方法，会执行动态&lt;strong&gt;消息转发&lt;/strong&gt;，如果该类还是不能动态的添加方法，则走&lt;strong&gt;完整的消息转发&lt;/strong&gt;。分两步，第一步&lt;strong&gt;看看有没有其他类可以执行该方法&lt;/strong&gt;，如果没有走第二步，&lt;strong&gt;将所有的细节封装到NSInvocation中，给接受者最后一次机会&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;演示：
动态消息转发
&amp;gt;在一个类&lt;code&gt;MessageObj&lt;/code&gt;中定义两个方法，&lt;code&gt;testDynamicMethodForward&lt;/code&gt;一个有实现方法，&lt;code&gt;start&lt;/code&gt;一个没有实现的方法，调用没有实现的方法，在动态消息转发的时候将这个方法hook到已经实现的方法上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface MessageObj()
@end


@implementation MessageObj

//-(void)start{}
void testDynamicMethodForward(){
    printf(&amp;quot;testDynamicMethodForward \n&amp;quot;);
}

+(BOOL)resolveInstanceMethod:(SEL)sel {
    class_addMethod([self class], sel, (IMP)testDynamicMethodForward, &amp;quot;v@@:&amp;quot;);
    return YES;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印如下：testDynamicMethodForward&lt;/p&gt;

&lt;p&gt;完整的消息转发第一步
&amp;gt;定义两个类，第一个类&lt;code&gt;MessageObj&lt;/code&gt;有一个未实现的方法&lt;code&gt;start&lt;/code&gt;，并且没有实现动态消息转发。第二个类&lt;code&gt;OtherClass&lt;/code&gt;，有一个和第一个类中未实现的方法同名的方法&lt;code&gt;start&lt;/code&gt;，在进行完整消息转发的第一步时，将&lt;code&gt;MessageOb&lt;/code&gt;j中未实现的方法hook到，&lt;code&gt;OtherClass&lt;/code&gt;的同名方法&lt;code&gt;start&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;OtherClass类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface OtherClass : NSObject

@end

@implementation OtherClass

-(void)start{
    NSLog(@&amp;quot;do some thing %@&amp;quot;,[self class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MessageObj类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MessageObj

//-(void)start{}

-(id)forwardingTargetForSelector:(SEL)aSelector {
    printf(&amp;quot;%p \n&amp;quot;,&amp;amp;aSelector);
    OtherClass *obj = [OtherClass new];
    return obj;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用&lt;code&gt;start&lt;/code&gt;方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MessageObj *obj = [MessageObj new];
[obj start];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印：do some thing OtherClass&lt;/p&gt;

&lt;p&gt;完整消息转发的第二步
如果以上两步都失败了，就走到这里。定义两个类&lt;code&gt;MessageObj&lt;/code&gt;、&lt;code&gt;OtherClass&lt;/code&gt;，&lt;code&gt;MessageObj&lt;/code&gt;中存在&lt;code&gt;OtherClass&lt;/code&gt;的实例。当走到消息转发的第三步时，先进行方法重签名&lt;code&gt;-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&lt;/code&gt;，再走最后的消息转发&lt;code&gt;-(void)forwardInvocation:(NSInvocation *)anInvocation&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;OtherClass类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface OtherClass : NSObject

@end
@implementation OtherClass

-(void)start{
    NSLog(@&amp;quot;message transform third part %@&amp;quot;,[self class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MessageObj类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MessageObj


-(instancetype)init {
    if (self = [super init]) {
        otherClass = [OtherClass new];
    }
    return  self;
}


//-(void)start{}
//方法重签名
-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector {
    NSMethodSignature *signature = [super methodSignatureForSelector:aSelector];
    if (!signature) {
        signature = [otherClass methodSignatureForSelector:aSelector];
    }
    return signature;
}
//最后的消息转发
-(void)forwardInvocation:(NSInvocation *)anInvocation {
    if (!otherClass) {
        [self doesNotRecognizeSelector:[anInvocation selector]];
    }
    [anInvocation invokeWithTarget:otherClass];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印：message transform third part OtherClass&lt;/p&gt;

&lt;p&gt;用途：
- 在方法不能识别的时候做一些保护，防止crash
- 调试的时候打印一些感兴趣的日志
- 也可以hook系统的方法玩玩呀&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
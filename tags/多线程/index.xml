<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>董二千</title>
    <link>https://LinkRober.github.io/bookshelf/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml</link>
    <description>Recent content on 董二千</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://LinkRober.github.io/bookshelf/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Object-C多线程总结</title>
      <link>https://linkrober.github.io/bookshelf/2018/05/object-c%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2018/05/object-c%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;多线程概念&lt;/li&gt;
&lt;li&gt;NSOperation&lt;/li&gt;
&lt;li&gt;GCD(Grand Central Dispatch)&lt;/li&gt;
&lt;li&gt;NSThread&lt;/li&gt;
&lt;li&gt;资源竞争&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;多线程概念&#34;&gt;多线程概念&lt;/h3&gt;

&lt;p&gt;线程也叫轻量级进程，是程序执行流的最小单元。
线程组成：&lt;strong&gt;线程ID&lt;/strong&gt;、&lt;strong&gt;指令指针&lt;/strong&gt;、&lt;strong&gt;寄存器集合&lt;/strong&gt;、&lt;strong&gt;堆栈&lt;/strong&gt;。
线程是进程中的一个实体，是被系统独立调度和分派的基本单位。&lt;/p&gt;

&lt;p&gt;线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属于一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。&lt;/p&gt;

&lt;p&gt;线程有就绪、阻塞和运行三种基本状态。&lt;br&gt;
&lt;strong&gt;就绪&lt;/strong&gt;：是指线程具备运行的所有条件，逻辑上可运行，在等待处理机。&lt;br&gt;
&lt;strong&gt;运行&lt;/strong&gt;：线程占有处理机正在运行&lt;br&gt;
&lt;strong&gt;阻塞&lt;/strong&gt;：线程在等一个事件（如信号量），逻辑上不可执行&lt;/p&gt;

&lt;p&gt;每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。在单个程序中同时运行多个线程完成不同的工作，称为&lt;strong&gt;多线程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;nsoperation&#34;&gt;NSOperation&lt;/h3&gt;

&lt;p&gt;因为&lt;code&gt;NSOperation&lt;/code&gt;是一个抽象类，我们不能直接使用它，我们一般使用系统定义好了的两个子类&lt;code&gt;NSInvocationOperation&lt;/code&gt;和&lt;code&gt;NSBlockOperation&lt;/code&gt;。尽管&lt;code&gt;NSOperation&lt;/code&gt;很抽象，但是它的实现很优雅，能让你安全的执行任务。&lt;/p&gt;

&lt;p&gt;它是一次性对象（single-shot object），一个任务执行结束了，就不能再次执行。我们通常将它添加到&lt;code&gt;NSOperationQueue&lt;/code&gt;来执行任务。&lt;code&gt;NSOperationQueue&lt;/code&gt;将任务放到其他线程或者直接调动&lt;code&gt;GCD&lt;/code&gt;来执行任务。如果你不想使用&lt;code&gt;NSOperationQueue&lt;/code&gt;可以直接通过&lt;code&gt;NSOperation&lt;/code&gt;的&lt;code&gt;start&lt;/code&gt;方法来执行。但是这样会给你的code带来更多的负担。如果执行的时候线程不在一个就绪状态就会引起异常(&lt;code&gt;NSOperation&lt;/code&gt;存在依赖)。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;nsblockoperation-nsinvocationoperation&#34;&gt;NSBlockOperation&amp;amp;NSInvocationOperation&lt;/h4&gt;

&lt;p&gt;添加任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//selector
- (nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;
//block
+ (instancetype)blockOperationWithBlock:(void (^)(void))block;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//开始执行任务
- (void)start
//可以取消线程操作对应方法
- (void)cancel
//添加依赖
- (void)addDependency:(NSOperation *)op
//移除依赖
- (void)removeDependency:(NSOperation *)op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;nsoperationqueue&#34;&gt;NSOperationQueue&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;NSOperation&lt;/code&gt;的队列，通过设置并发数量来控制异步还是同步，属性为&lt;code&gt;maxConcurrentOperationCount&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperation:(NSOperation *)op;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperations:(NSArray&amp;lt;NSOperation *&amp;gt; *)ops waitUntilFinished:(BOOL)wait API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- (void)addOperationWithBlock:(void (^)(void))block API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;添加完之后会立即执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;取消任务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)cancelAllOperations;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)waitUntilAllOperationsAreFinished;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;会使当前线程（例如，主线程）忙等，直到所有任务完成&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;gcd-grand-central-dispatch&#34;&gt;GCD (Grand Central Dispatch)&lt;/h3&gt;

&lt;p&gt;GCD将语言特性、OC运行时和系统提供的优化结合在一起，充分发挥系统的多核特性。BSD子系统，Core Foundation和Cocoa API都是用了CGD来帮助iOS系统和App跑的更快、更高效、响应更及时。GCD在系统层面更好的协调了所有在run的App，使它们在系统资源的利用上达到了一个平衡。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;当你使用Object-C的编译器编译你的App，所有的GCD对象都是Object-C对象。在RAC环境下，引用和释放也是自动管理的。在非ARC环境下需要手动管理。（dispatch_retain和 dispatch_release）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CGD&lt;/code&gt;每个任务都要放到一个队列中去执行，队列分两种串行队列和并行队列。任务也分两种同步和异步。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;串行队列&lt;/th&gt;
&lt;th&gt;并行队列&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同步线程&lt;/td&gt;
&lt;td&gt;会阻塞当前线程；不会开辟新的线程；任务在当前的线程串行执行&lt;/td&gt;
&lt;td&gt;会阻塞当前线程；不会开辟新的线程；任务在当前的线程同步执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异步线程&lt;/td&gt;
&lt;td&gt;不会阻塞当前线程；会开辟新的线程；任务在新的线程串行执行&lt;/td&gt;
&lt;td&gt;不会阻塞当前线程；会开辟新的线程；任务在新的线程异步执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;死锁&#34;&gt;死锁&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dispatch_sync(dispatch_get_main_queue(), ^{
    NSLog(@&amp;quot;sync - %@&amp;quot;, [NSThread currentThread]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为是同步任务，主线程停下，等待队列里的任务完成，因为队列是主队列，跑的是主线程，这时候主线程处于等待状态，就出现了互相等待的情况。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group&#34;&gt;dispatch_group&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dispatch_group&lt;/code&gt;能够在一个&lt;code&gt;Queue&lt;/code&gt;的所有任务结束之后得到通知，执行相关代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    dispatch_group_t anchorGroup = dispatch_group_create();

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dispatch_group_notify(anchorGroup, anchorQueue, ^{
        //刷新第一个cell
        @strongify(self);
        [self.tableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:0 inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group-enter-dispatch-group-leave&#34;&gt;dispatch_group_enter&amp;amp;&amp;amp;dispatch_group_leave&lt;/h4&gt;

&lt;p&gt;当GCD的任务是异步的时候，如果想要在所有任务结束之后得到通知，就要在各个任务的前后加上&lt;code&gt;dispatch_group_enter&lt;/code&gt;和&lt;code&gt;dispatch_group_leave&lt;/code&gt;。他们需要传入&lt;code&gt;group&lt;/code&gt;作为参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch_group_enter(anchorGroup);
    dispatch_async(anchorQueue, ^{
        [[XYLeaderboardService share] anchorCharmLeaderboard:XYLeaderboardCharmMonthType succeed:^(NSArray&amp;lt;XYLeaderboardItem *&amp;gt; *items) {
            @strongify(self);
            [self.datasource firstObject].secondLeaderboard = items;
            dispatch_group_leave(anchorGroup);
        } failure:^(XYNetError *error) {
            //
            dispatch_group_leave(anchorGroup);
        }];
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-barrier-async-dispatch-queue-t-queue-dispatch-block-t-block&#34;&gt;dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);&lt;/h4&gt;

&lt;p&gt;等待queue中的任务全部结束，异步执行block中的任务&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-barrier-sync-dispatch-queue-t-queue-dispatch-noescape-dispatch-block-t-block&#34;&gt;dispatch_barrier_sync(dispatch_queue_t queue,DISPATCH_NOESCAPE dispatch_block_t block);&lt;/h4&gt;

&lt;p&gt;等待queue中的任务全部结束，同步执行block中的任务&lt;/p&gt;

&lt;h3 id=&#34;nsthread&#34;&gt;NSThread&lt;/h3&gt;

&lt;p&gt;在执行一个长任务的时候比较有优势，其他的和&lt;code&gt;NSOperation&lt;/code&gt;比较像。&lt;/p&gt;

&lt;h4 id=&#34;创建nsthread&#34;&gt;创建NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithBlock:^{

    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithTarget:&amp;lt;#(nonnull id)#&amp;gt; selector:&amp;lt;#(nonnull SEL)#&amp;gt; object:&amp;lt;#(nullable id)#&amp;gt;];

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;运行nsthread&#34;&gt;运行NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSThread *thread = [[NSThread alloc] initWithBlock:^{
        NSLog(@&amp;quot;thread测试%@&amp;quot;,[NSThread currentThread]);
    }];
    [thread start];

//直接运行
[NSThread detachNewThreadWithBlock:^{
        NSLog(@&amp;quot;thrad直接执行%@&amp;quot;,[NSThread currentThread]);
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;停止nsthread&#34;&gt;停止NSThread&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//退出当前线程
[NSThread exit];
//取消该线程
NSThread *thread = [[NSThread alloc] initWithBlock:^{
        NSLog(@&amp;quot;thread测试%@&amp;quot;,[NSThread currentThread]);
    }];
[thread cancel];

//阻塞当前线程直到某个时间
[NSThread sleepUntilDate:&amp;lt;#(nonnull NSDate *)#&amp;gt;];

//使当前线程沉睡多少时间
NSLog(@&amp;quot;===============start sleep================&amp;quot;);
[NSThread sleepForTimeInterval:5];
NSLog(@&amp;quot;==============end sleep=================&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;检测当前nsthread的状态&#34;&gt;检测当前NSThread的状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//是否正在执行
[thread isExecuting];
//是否完成
[thread isFinished];
//是否被取消
[thread isCancelled];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;priority&#34;&gt;Priority&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//设置当前线程的优先级
[NSThread setThreadPriority:&amp;lt;#(double)#&amp;gt;];
//查看当前线程的优先级
[NSThread threadPriority];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;资源竞争&#34;&gt;资源竞争&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/&#34;&gt;iOS多线程中的锁&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS多线程中的锁</title>
      <link>https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://linkrober.github.io/bookshelf/2017/12/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%94%81/</guid>
      <description>&lt;p&gt;涉及到多线程共享资源的情况下就避免不了资源竞争的问题，这时候就会用到各种锁，例如，&lt;code&gt;@synchronized&lt;/code&gt;、&lt;code&gt;NSLock&lt;/code&gt;、&lt;code&gt;OSSpinLock&lt;/code&gt;等等，虽然都是锁，但是锁的底层实现也不尽相同。大概可以分为：&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt;、&lt;span class=&#34;highlight-text blue&#34;&gt;自旋锁&lt;/span&gt;、&lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;、
&lt;span class=&#34;highlight-text blue&#34;&gt;读写锁&lt;/span&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	lock()//加锁
		doSomeThing()//临界区
	unlock()//解锁
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们锁的目的是在任何时刻最多只能有一个线程在修改资源，即在任何时刻只能有一个操作者保持锁。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;互斥锁&#34;&gt;互斥锁&lt;/h4&gt;

&lt;p&gt;通过一个全局变量来控制某个线程是否可以在某个时刻访问资源，该变量值大于0说明锁正在被使用。如果某个线程在尝试获得锁的是否发现已经被占用，线程挂起，等待锁的释放。&lt;/p&gt;

&lt;h4 id=&#34;自旋锁&#34;&gt;自旋锁&lt;/h4&gt;

&lt;p&gt;通过一个全局变量来控制某个线程是否可以在某个时刻访问资源，该变量值大于0说明锁正在被使用。如果某个线程在尝试获得锁的是否发现已经被占用，进入忙等状态，直到获得锁。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;以上可以看出，互斥锁和自旋锁很类似，稍有不同的地方在于当处于等待状态的时候各自的线程是怎么调度的。互斥锁即使时间片还未用尽，互斥锁也会直接挂起，这样就减少了CPU的开销。但是这时候会进行上下文（线程）的切换，也会带来一定的开销，适合I/O密集型操作。自旋锁，顾名思义，即使处于等待状态线程也不会挂起，一直处于忙等状态，类似于一直在进行一个whilte循环。这样增加了CPU的开销，所以对于需要保持上下文的任务必须要使用自旋锁，同时它是不能被抢占的（高优先级会抢占低优先级的进程），适用于CPU密集型的任务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;递归锁&#34;&gt;递归锁&lt;/h4&gt;

&lt;p&gt;对于递归调的时候我们不能简单的使用某个锁来锁住临界区，这样就会造成死锁，必须要使用递归锁。当加锁的时候，变量就会加1，解锁的时候开始减1，直到值为0的时候释放锁。&lt;/p&gt;

&lt;h4 id=&#34;读写锁&#34;&gt;读写锁&lt;/h4&gt;

&lt;p&gt;在上面提到的几种锁同一时刻只允许一个线程访问资源，在操作资源的时候，往往会出现一个线程在写操作，一个线程在读操作，这时候我们就会用到读写锁。
读写锁，它分为两种锁，读锁和写锁。当一个线程在读资源的时候，我们为其加上读锁，有另一个线程也要访问资源的时候我们需要再加一个读锁。当第三个线程需要进行写操作的时候我们就要加上一个写锁，但是这个写锁只有当读锁的使用者为0的时候才有效。也就是说我们必须等另外两个线程的读操作结束之后才能为其加上写锁。虽然互斥锁和自旋锁也能达到要求，但是读写锁无疑让控制更加精细，节省了CPU。&lt;/p&gt;

&lt;h4 id=&#34;ios中的锁&#34;&gt;iOS中的锁&lt;/h4&gt;

&lt;p&gt;大神ibireme的一篇博客&lt;a href=&#34;https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&#34;&gt;不再安全的 OSSpinLock&lt;/a&gt;对锁的性能做了简单的比较，大家可以看下。
&lt;img src=&#34;../../../来自ibireme的博客.png&#34; alt=&#34;来自ibireme的博客&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;osspinlock&#34;&gt;OSSpinLock&lt;/h6&gt;

&lt;span class=&#34;highlight-text blue&#34;&gt;自旋锁&lt;/span&gt;

&lt;p&gt;在此之前OSSpinLock是无疑性能最好的锁，在2015年的时候苹果工程师透露出了自旋锁的bug。具体问题大概如下：
系统维护了不同等级优先级的线程，高优先级的线程更容易获得系统资源。当一个低优先级的线程先获得锁之后，高优先级线程这时候也试图获取锁。这时候高优先级占据了大量的CPU，一直处于忙等状态。而低优先级的线程因为没有分配到足够的CPU一直无法完成任务，也就无法释放锁。这时候线程的调度就产生了优先级翻转。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//定义OSSpinLock锁
__block OSSpinLock theLock = OS_SPINLOCK_INIT;
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    OSSpinLockLock(&amp;amp;theLock); 
    NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;); 
    sleep(3); 
    NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;);
    OSSpinLockUnlock(&amp;amp;theLock);
});
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
     OSSpinLockLock(&amp;amp;theLock); 
     sleep(1); 
     NSLog(@&amp;quot;需要线程同步的操作2&amp;quot;); 
     OSSpinLockUnlock(&amp;amp;theLock);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;sychronized&#34;&gt;sychronized&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;iOS中性能最差的锁，但是写起来很开心，用起来简单，无论普通的锁还是递归锁都能应对。它牺牲了性能，保证了接口得友好。它会把每个传入的对象当作锁（这要求我们要保证对象的唯一性）并把他们放在一个哈希表中存储，通过这张表来管理锁。要注意的是，对象不能为&lt;strong&gt;nil&lt;/strong&gt;，这会让临界区不再是线程安全的。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;&lt;/p&gt;

&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;

&lt;pre&gt;&lt;code&gt;//需要加锁的对象
NSObject *obj = [[NSObject alloc] init];
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    @synchronized(obj) {
         NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;);
         sleep(3); 
         NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;);
     } 
  }); 
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    sleep(1); 
    @synchronized(obj) { 
         NSLog(@&amp;quot;需要线程同步的操作2&amp;quot;); 
     } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13438:385647] 需要线程同步的操作1 开始
ThreadTest[13438:385647] 需要线程同步的操作1 结束
ThreadTest[13438:385646] 需要线程同步的操作2
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nslock&#34;&gt;NSLock&lt;/h6&gt;

&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt;

&lt;p&gt;将C语言的pthread_mutex锁进行了一次封装，更加的OC。&lt;code&gt;NSLock&lt;/code&gt;提供了&lt;code&gt;tryLock&lt;/code&gt;和&lt;code&gt;lockBeforeDate:&lt;/code&gt;方法。在加锁前尝试加锁，如果返回无法获得锁，并不会阻塞线程会继续往下走，返回&lt;code&gt;NO&lt;/code&gt;,&lt;code&gt;lockBeforeDate:&lt;/code&gt;让你控制加锁的时间，在规定时间未获得锁返回&lt;code&gt;NO&lt;/code&gt;
&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//创建锁
NSLock *lock = [[NSLock alloc] init];
//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    //[lock lock]; 
    //立即加锁
    [lock lockBeforeDate:[NSDate date]];
    NSLog(@&amp;quot;需要线程同步的操作1 开始&amp;quot;); 
    sleep(2); 
    NSLog(@&amp;quot;需要线程同步的操作1 结束&amp;quot;); 
    [lock unlock];
});
//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    sleep(1);
    //尝试加锁
    if ([lock tryLock]) {
        //尝试获取锁，如果获取不到返回NO，不会阻塞该线程 
        NSLog(@&amp;quot;锁可用的操作&amp;quot;); 
        [lock unlock]; 
    }else{
        NSLog(@&amp;quot;锁不可用的操作&amp;quot;); 
    } 
    
    NSDate *date = [[NSDate alloc] initWithTimeIntervalSinceNow:3]; 
    if ([lock lockBeforeDate:date]) {
          //尝试在未来的3s内获取锁，并阻塞该线程，如果3s内获取不到恢复线程, 返回NO,不会阻塞该线程
          NSLog(@&amp;quot;没有超时，获得锁&amp;quot;); 
          [lock unlock]; 
     }else{ 
          NSLog(@&amp;quot;超时，没有获得锁&amp;quot;); 
     } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13541:394814] 需要线程同步的操作 1 开始
ThreadTest[13541:394804] 锁不可用的操作
ThreadTest[13541:394814] 需要线程同步的操作 1 结束
ThreadTest[13541:394804] 没有超时，获得锁
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nsrecursivelock&#34;&gt;NSRecursiveLock&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;递归锁&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;实现和&lt;code&gt;NSLock&lt;/code&gt;差不多，只不过在底层NSLock使用的C的&lt;code&gt;pthread_mutex_lock&lt;/code&gt;,而&lt;code&gt;NSRecursiveLock&lt;/code&gt;使用的是&lt;code&gt;pthread_mutex_recursive&lt;/code&gt;。
它也同样提供了&lt;code&gt;- (BOOL)tryLock&lt;/code&gt;和&lt;code&gt;- (BOOL)lockBeforeDate:(NSDate *)limit&lt;/code&gt;方法&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//NSLock *lock = [[NSLock alloc] init];
NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    static void (^RecursiveMethod)(int); 
    RecursiveMethod = ^(int value) { 
        [lock lock]; 
        if (value &amp;gt; 0) { 
            NSLog(@&amp;quot;value = %d&amp;quot;, value); 
            sleep(1); 
            RecursiveMethod(value - 1); 
      } 
        [lock unlock]; 
    };
     RecursiveMethod(5); 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用&lt;code&gt;NSLock&lt;/code&gt;就会直接死锁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13593:400360] value = 5
ThreadTest[13593:400360] value = 4
ThreadTest[13593:400360] value = 4
ThreadTest[13593:400360] value = 2
ThreadTest[13593:400360] value = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;nscondition&#34;&gt;NSCondition&lt;/h6&gt;

&lt;p&gt;&lt;span class=&#34;highlight-text blue&#34;&gt;互斥锁&lt;/span&gt; &lt;span class=&#34;highlight-text blue&#34;&gt;条件变量&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;条件变量和信号量很类似，提供了阻塞、等待就绪、唤醒线程的方法。比如，生产-消费者模式。
在单线程执行中，我们经常会通过一个布尔值来控制某个方法或者值是否需要被执行和修改。在多线程的环境下，需要互斥锁来配合保证线程安全。&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSConditionLock *lock = [[NSConditionLock alloc] init];
NSMutableArray *products = [NSMutableArray array]; 
NSInteger HAS_DATA = 1; 
NSInteger NO_DATA = 0;

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    while (1) { 
        [lock lockWhenCondition:NO_DATA]; 
        [products addObject:[[NSObject alloc] init]]; 
        NSLog(@&amp;quot;produce a product,总量:%zi&amp;quot;,products.count); 
        [lock unlockWithCondition:HAS_DATA]; 
        sleep(1); 
   } 
}); 

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
    while (1) { 
         NSLog(@&amp;quot;wait for product&amp;quot;); 
         [lock lockWhenCondition:HAS_DATA]; 
         [products removeObjectAtIndex:0]; 
         NSLog(@&amp;quot;custome a product&amp;quot;); 
         [lock unlockWithCondition:NO_DATA]; 
    } 
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ThreadTest[13645:406942] wait for product
ThreadTest[13645:406951] produce a product, 总量 :1
ThreadTest[13645:406942] custome a product
ThreadTest[13645:406942] wait for product
ThreadTest[13645:406951] produce a product, 总量:1
ThreadTest[13645:406942] custome a product
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有当&lt;code&gt;unlock&lt;/code&gt;和&lt;code&gt;lock&lt;/code&gt;的值一一对应才能唤醒线程，执行后续操作。&lt;/p&gt;

&lt;h5 id=&#34;dispatch-semaphore-信号&#34;&gt;dispatch_semaphore（信号）&lt;/h5&gt;

&lt;p&gt;通过信号来控制同时执行的线程个数，来达到枷锁的目的。只有当信号大于0的时候才能执行接下去的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//创建一个信号，同一时间只有一个线程可以执行，10即10个线程可以同时执行
dispatch_semaphore_create(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//等待信号&amp;gt;0的时候再执行下面的操作
dispatch_semaphore_wait(self._lock, DISPATCH_TIME_FOREVER)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//信号+1
dispatch_semaphore_signal(self._lock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/b&gt;
&lt;span class=&#34;highlight-text success&#34;&gt;
Example
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self._lock = dispatch_semaphore_create(1);
    self.array = [[NSMutableArray alloc] initWithObjects:@(1),@(2),@(3), nil];
    for (int i = 0; i &amp;lt; 100; i ++) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            dispatch_semaphore_wait(self._lock, DISPATCH_TIME_FOREVER);
            NSLog(@&amp;quot;-----%d&amp;quot;,i);
            sleep(2);
            dispatch_semaphore_signal(self._lock);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MultiThread[10894:436938] -----0
MultiThread[10894:436939] -----1
MultiThread[10894:436945] -----2
MultiThread[10894:436937] -----3
MultiThread[10894:436936] -----4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上除了第一个结果其他的每隔2s才打印出来&lt;/p&gt;

&lt;h4 id=&#34;参考资料&#34;&gt;参考资料&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&#34;&gt;不再安全的 OSSpinLock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://casatwy.com/pthreadde-ge-chong-tong-bu-ji-zhi.html&#34;&gt;pthread的各种同步机制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bestswifter.com/ios-lock/&#34;&gt;深入理解 iOS 开发中的锁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/4edf98a61483&#34;&gt;IOS 保证线程同步方式&amp;amp;性能对比&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lattera/glibc/blob/master/nptl/pthread_mutex_lock.c&#34;&gt;pthreadmutexlock.c 源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&#34;&gt;关于 @synchronized，这儿比你想知道的还要多&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_lock.html&#34;&gt;pthreadmutexlock&lt;/a&gt;
&lt;a href=&#34;https://developer.apple.
com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html&#34;&gt;ThreadSafety&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/62814/difference-between-binary-semaphore-and-mutex&#34;&gt;Difference between binary semaphore and mutex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/Javadino/article/details/2891388&#34;&gt;[Pthread] Linux中的线程同步机制(二)&amp;ndash;In Glibc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://android.googlesource.com/platform/external/pthreads/+/master/pthread_cond_wait.
c&#34;&gt;pthreadcondwait&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3513045/conditional-variable-vs-semaphore&#34;&gt;Conditional Variable vs Semaphore&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>